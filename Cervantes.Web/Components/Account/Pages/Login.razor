@rendermode InteractiveServer
@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Cervantes.CORE.Entities
@using Cervantes.Web.Components.Layout
@using Cervantes.Web.Localization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using Task = System.Threading.Tasks.Task
@layout LoginLayout
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IStringLocalizer<Resource> localizer
@inject ISnackbar Snackbar


<PageTitle>@localizer["login"] | Cervantes</PageTitle>



    <MudGrid>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <img src="img/logo.png" Style="width: 100px; height: 100px;"/>
            </div>
        </MudItem>

        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText Typo="Typo.h4">Cervantes</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText>@localizer["loginDescription"]</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="d-flex justify-center">
                    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
                </div>
            }
            


        </MudItem>

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <MudGrid>

            <DataAnnotationsValidator/>

            <MudItem xs="12">
                <div class="mud-grid-item mud-grid-item-xs-12">
                    <div class="mud-input-control mud-input-input-control">
                        <div class="mud-input-control-input-container">
                            <div class="mud-input mud-input-text mud-input-adorned-start mud-input-underline mud-shrink mud-ltr">
                                <div class="mud-input-adornment mud-input-adornment-start"><svg aria-label="Icon" tabindex="-1" class="mud-icon-root mud-icon-default mud-svg-icon mud-icon-size-medium" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                                    <path d="M0 0h24v24H0z" fill="none"/><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/></svg></div>
                                <InputText class="mud-input-slot mud-input-root mud-input-root-text mud-input-root-adorned-start" type="email" @bind-Value="Input.Email" placeholder="john.doe@email.com" inputmode="text" maxlength="524288" aria-invalid="false" />
                                <div class="mud-input-slot mud-input-root mud-input-root-text mud-input-root-adorned-start" style="display:none" tabindex="-1">
                                </div>
                            </div>
                            <label class="mud-input-label mud-input-label-animated mud-input-label-text mud-input-label-inputcontrol" for="mudinput-3747ea6a-cdb8-4ad0-af2f-0fa3b5ecb37a"></label>
                        </div>
                    </div>
                </div>
                

            </MudItem>
            <MudItem xs="12">
                <div class="mud-grid-item mud-grid-item-xs-12">
                    <div class="mud-input-control mud-input-input-control">
                        <div class="mud-input-control-input-container">
                            <div class="mud-input mud-input-text mud-input-adorned-start mud-input-underline mud-shrink mud-ltr">
                                <div class="mud-input-adornment mud-input-adornment-start">
                                    
                              <svg aria-label="Icon" tabindex="-1" class="mud-icon-root mud-icon-default mud-svg-icon mud-icon-size-medium" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><g><path d="M0,0h24v24H0V0z" fill="none"/></g><g><g><path d="M2,17h20v2H2V17z M3.15,12.95L4,11.47l0.85,1.48l1.3-0.75L5.3,10.72H7v-1.5H5.3l0.85-1.47L4.85,7L4,8.47L3.15,7l-1.3,0.75 L2.7,9.22H1v1.5h1.7L1.85,12.2L3.15,12.95z M9.85,12.2l1.3,0.75L12,11.47l0.85,1.48l1.3-0.75l-0.85-1.48H15v-1.5h-1.7l0.85-1.47 L12.85,7L12,8.47L11.15,7l-1.3,0.75l0.85,1.47H9v1.5h1.7L9.85,12.2z M23,9.22h-1.7l0.85-1.47L20.85,7L20,8.47L19.15,7l-1.3,0.75 l0.85,1.47H17v1.5h1.7l-0.85,1.48l1.3,0.75L20,11.47l0.85,1.48l1.3-0.75l-0.85-1.48H23V9.22z"/></g></g>
                                                                              </svg>
                                </div>
                                <InputText class="mud-input-slot mud-input-root mud-input-root-text mud-input-root-adorned-start" type="password" @bind-Value="Input.Password" placeholder="@localizer["password"]" inputmode="text" maxlength="524288" aria-invalid="false" />
                                <div class="mud-input-slot mud-input-root mud-input-root-text mud-input-root-adorned-start" style="display:none" tabindex="-1">
                                </div>
                            </div>
                            <label class="mud-input-label mud-input-label-animated mud-input-label-text mud-input-label-inputcontrol" for="mudinput-3747ea6a-cdb8-4ad0-af2f-0fa3b5ecb37a"></label>
                        </div>
                    </div>
                </div>
            </MudItem>
            @*<MudItem xs="12" Class="d-flex justify-space-between align-center">
                <div class="mud-grid-item mud-grid-item-xs-12 d-flex justify-space-between align-center">
                    <div class="mud-input-control mud-input-control-boolean-input ml-n1">
                        <div class="mud-input-control-input-container">
                            <label class="mud-checkbox" id="checkboxed59cdb3" __internal_stopPropagation_onclick>
                                <span tabindex="0" class="mud-button-root mud-icon-button mud-primary-text hover:mud-primary-hover mud-ripple mud-ripple-checkbox">
                                    <InputCheckbox @bind-Value="Input.RememberMe" tabindex="-1" type="checkbox" class="mud-checkbox-input" />
                                 
                                    <svg class="mud-icon-root mud-svg-icon mud-icon-size-medium" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M0 0h24v24H0z" fill="none"/><path d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"/></svg>
                                </span>
                                <p class="mud-typography mud-typography-body1">@localizer["rememberMe"]</p>
                            </label>
                        </div>
                    </div>
                </div>
                
            </MudItem>*@
            <MudItem xs="12" Class="d-flex justify-center">
                <div class="mud-grid-item mud-grid-item-xs-12 d-flex justify-center">
                    <button type="submit" class="mud-button-root mud-button mud-button-filled mud-button-filled-primary mud-button-filled-size-large mud-ripple" style="width: 100%;" __internal_stopPropagation_onclick>
                        <span class="mud-button-label">@localizer["signin"]</span>
                    </button>
                </div>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudGrid>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new InputModel();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
       
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
    // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
        
    }

    public async Task LoginUser()
    {
    // This doesn't count login failures towards account lockout
    // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: true);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            Snackbar.Add(@localizer["accountLocked"], Severity.Error);
        }
        else
        {
            Snackbar.Add(@localizer["invalidLogin"], Severity.Error);
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

}