@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Task = System.Threading.Tasks.Task
@using Cervantes.CORE.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div>
        <p>
            There are no external authentication services configured. See this
            <a href="https://go.microsoft.com/fwlink/?LinkID=532715">
                article
                about setting up this ASP.NET application to support logging in via external services
            </a>.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken/>
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
                @foreach (var provider in externalLogins)
                {
                    <div class="mud-grid-item mud-grid-item-xs-12 d-flex justify-center">
                        <button type="submit" class="mud-button-root mud-button mud-button-filled mud-button-filled-primary mud-button-filled-size-large mud-ripple" style="width: 100%;" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account" __internal_stopPropagation_onclick>
                            <span class="mud-button-label">@provider.DisplayName</span>
                        </button>
                    </div>
                }
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}