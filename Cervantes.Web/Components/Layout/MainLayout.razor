@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject IStringLocalizer<Resource> localizer
@using Microsoft.Extensions.Localization
@using Cervantes.Web.Localization
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using System.Security.Claims
@using Cervantes.CORE.Entities
@using Cervantes.Web.Controllers
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Mvc
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using Task = System.Threading.Tasks.Task
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor _accessor
@using Blazor.Flags
@using Cervantes.CORE.ViewModel
@using Microsoft.AspNetCore.Antiforgery
@using UriComponents = System.UriComponents
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudThemeProvider Theme="CervantesTheme.Theme" @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
<MudPopoverProvider />
<MudDialogProvider/>
<MudSnackbarProvider/>

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Color="Color.Inherit" Elevation="0" Style="border-bottom: 1px solid var(--mud-palette-lines-default)">
                <MudIconButton Icon="@Icons.Material.Filled.MenuOpen" Color="Color.Default" OnClick="@((e) => DrawerToggle())"></MudIconButton>

                
                
                <MudDivider Vertical="true" DividerType="DividerType.Middle"></MudDivider>
                

                <SectionOutlet SectionName="appbar"/>
                <MudSpacer/>
                <MudStack Row="true">
                    <MudIconButton Class="mr-0" Icon="@Icons.Material.Rounded.Search" OnClick="@(() => OpenSearchDialog())"/>

                    <MudDialog @bind-Visible="_searchDialogOpen" Options="_dialogOptions" Class="docs-gray-bg">
                        <DialogContent>
                            <TitleContent>
                                <MudItem Class="d-flex flex-wrap justify-space-around gap-1">
                                    <MudTextField @bind-Value="@searchString" Placeholder="@localizer["search"]" Adornment="Adornment.Start" Immediate="true"
                                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" @onkeypress="Search">
                                    </MudTextField>
                                </MudItem>
                            </TitleContent>
                            <DialogContent>
                                @if (searchViewModel.Tasks != null || searchViewModel.Clients != null || searchViewModel.Projects != null || searchViewModel.Documents != null
                                     || searchViewModel.Reports != null || searchViewModel.Targets != null || searchViewModel.TargetServices != null || searchViewModel.Vaults != null
                                     || searchViewModel.VulnCategories != null || searchViewModel.Vulns != null)
                                {
                                    <MudList T="string" Clickable="true">
                                        <MudListSubheader>
                                            @localizer["results"]
                                        </MudListSubheader>
                                        @foreach (var task in searchViewModel.Tasks)
                                        {
                                            var link = "/tasks/" + task.Id;
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.Task" Href="@link">
                                                @task.Name
                                            </MudListItem>


                                        }
                                        @foreach (var client in searchViewModel.Clients)
                                        {
                                            var link = "/clients/" + client.Id;
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.BusinessCenter" Href="@link">
                                                @client.Name
                                            </MudListItem>



                                        }
                                        @foreach (var project in searchViewModel.Projects)
                                        {
                                            var link = "/projects/" + project.Id;
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.Folder" Href="@link">
                                                @project.Name
                                            </MudListItem>


                                        }
                                        @foreach (var doc in searchViewModel.Documents)
                                        {
                                            var link = "/documents/" + doc.Id;
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.FileCopy" Href="@link">
                                                @doc.Name
                                            </MudListItem>



                                        }
                                        @foreach (var report in searchViewModel.Reports)
                                        {
                                            var link = "/projects/" + report.ProjectId;
                                            <MudListItem T="string" Icon="@Icons.Custom.FileFormats.FilePdf" Href="@link">
                                                @report.Name
                                            </MudListItem>



                                        }
                                        @foreach (var target in searchViewModel.Targets)
                                        {
                                            var link = "/workspace/" + @target.ProjectId + "/targets/" + @target.Id;
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.Adjust" Href="@link">
                                                @target.Name
                                            </MudListItem>


                                        }
                                        @foreach (var target in searchViewModel.TargetServices)
                                        {
                                            var link = "/workspace/" + @target.Target.ProjectId + "/targets/" + @target.TargetId;
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.Hive" Href="@link">
                                                @target.Name
                                            </MudListItem>



                                        }
                                        @foreach (var vault in searchViewModel.Vaults)
                                        {
                                            var link = "/workspace/" + @vault.ProjectId + "/vaults/" + @vault.Id;
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.Castle" Href="@link">
                                                @vault.Name
                                            </MudListItem>



                                        }
                                        @foreach (var cat in searchViewModel.VulnCategories)
                                        {
                                            var link = "/vuln/categories/" + cat.Id;
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.Category" Href="@link">
                                                @cat.Name
                                            </MudListItem>


                                        }
                                        @foreach (var vuln in searchViewModel.Vulns)
                                        {
                                            var link = "/vulns/" + @vuln.Id;
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.BugReport" Href="@link">
                                                @vuln.Name
                                            </MudListItem>

                                        }

                                    </MudList>
                                }
                                else
                                {
                                    <MudPaper Height="200" Class="pa-4">
                                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large"></MudIcon>
                                            <MudStack Justify="Justify.Center" Spacing="0">
                                                <MudText Align="Align.Center">@localizer["noResults"]</MudText>
                                            </MudStack>
                                        </MudStack>
                                    </MudPaper>
                                }

                            </DialogContent>
                            <DialogActions>

                            </DialogActions>
                        </DialogContent>
                    </MudDialog>
                    <CultureSelector/>
                    <ThemeSwitch @bind-isDarkMode="@_isDarkMode"/>
                    @*
                    <MudDivider Vertical="true" DividerType="DividerType.Middle" FlexItem="true"></MudDivider>
                    *@
                    <UserMenu/>

                </MudStack>
            </MudAppBar>

            <MudDrawer  Variant="DrawerVariant.Mini" @bind-Open="_drawerOpen" Elevation="2">
                <MudDrawerHeader LinkToIndex="true" Class="center-image">
                    @if (_drawerOpen)
                    {
                        @if (_isDarkMode)
                        {
                            <MudImage Src="img/logo-horizontal.png" Fluid="true" Height="25" Width="200"></MudImage>

                        }else
                        {
                            <MudImage Src="img/logo-horizontal2.png" Fluid="true" Height="25" Width="200"></MudImage>

                        }
                    }
                    else
                    {
                    <MudImage Class="mud-nav-link-icon" Src="img/logo.png" Height="40" Width="40"></MudImage>
                    }
                </MudDrawerHeader>
                <NavMenu/>
                <MudStack>

                    @if (_drawerOpen)
                    {
                        <MudText Style="font-size:small" Align="Align.Center">Copyright © @DateTime.Now.Year <MudLink href="https://github.com/CervantesSec" target="_blank" Typo="Typo.body2">Cervantes</MudLink><br/>
                            Created by <MudLink href="https://linktr.ee/mesquidar" Typo="Typo.body2">Ruben Mesquida</MudLink>
                            <br/>Beta 1.3</MudText>
                    <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Inherit" Link="https://www.linkedin.com/company/owasp-cervantes/" Target="_blank"/>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Custom.Brands.Twitter" Color="Color.Inherit" Link="https://twitter.com/Cervantes_Sec" Target="_blank"/>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Custom.Brands.Discord" Color="Color.Inherit" Link="https://discord.gg/BvzNjT3Qzc" Target="_blank"/>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.MenuBook" Color="Color.Inherit" Link="https://www.cervantessec.org/" Target="_blank"/>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/CervantesSec" Target="_blank"/>
                    </MudStack>
                    }
                   
                </MudStack>

            </MudDrawer>
            <MudMainContent>
               
                <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-2 pt-2">
                    <MudStack>
                    <MudPaper Class="ma-0" Elevation="25">
                        <MudToolBar>
                            <SectionOutlet SectionName="top-bar"/>
                        </MudToolBar>
                    </MudPaper>
                    @*<div style="padding-bottom:60px">
                                @Body
                            </div>*@
                    <CascadingValue Value="@_isDarkMode">
                        @Body
                    </CascadingValue>
                    </MudStack>
                </MudContainer>

            </MudMainContent>
            <MudScrollToTop Style="z-index:2001;">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowUpward"/>
            </MudScrollToTop>
            
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <Cervantes.Web.Components.Shared.RedirectToLogin/>
    </NotAuthorized>
</AuthorizeView>

@code {

    bool _isDarkMode { get; set; }

    private MudThemeProvider _mudThemeProvider;

    /*private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;*/
    private string CurrentUserId { get; set; }
    private ApplicationUser CurrentUser { get; set; }
    [Inject] UserController userController { get; set; }

    private bool _searchDialogOpen;
    private void OpenSearchDialog() => _searchDialogOpen = true;
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter, NoHeader = true };

    protected async override Task OnInitializedAsync()
    {
        searchViewModel = new SearchViewModel();
        await LoadDataAsync();
        await base.OnInitializedAsync();
    }

    

    private async Task LoadDataAsync()
    {
        if (_accessor.HttpContext.User == null)
        {
            navigationManager.NavigateTo("Account/Login");
            return;
        }

        if (_accessor.HttpContext.User?.Identity?.IsAuthenticated == true)
        {
            CurrentUser = userController.GetUser(_accessor.HttpContext.User?.FindFirstValue(ClaimTypes.NameIdentifier));
        }
    }

    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true)
        {
            //_isDarkMode = await _mudThemeProvider.GetSystemPreference();
            if (!(await LocalStorage.ContainKeyAsync("theme")))
            {
                await LocalStorage.SetItemAsStringAsync("theme", "dark");
            }
            else
            {
                string theme = await LocalStorage.GetItemAsStringAsync("theme");

                if (theme == "dark")
                {
                    _isDarkMode = true;
                }
                else
                {
                    _isDarkMode = false;
                }
            }
            
            if (!(await LocalStorage.ContainKeyAsync("drawer")))
            {
                await LocalStorage.SetItemAsStringAsync("drawer", "true");
            }
            else
            {
                string drawer = await LocalStorage.GetItemAsStringAsync("drawer");

                if (drawer == "true")
                {
                    _drawerOpen = true;
                }
                else
                {
                    _drawerOpen = false;
                }
            }
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
        
    }

 
    bool _drawerOpen;

    private async Task  DrawerToggle()
    {
        //_drawerOpen = !_drawerOpen;
        string drawer = await LocalStorage.GetItemAsStringAsync("drawer");

        if (drawer == "true")
        {
            await LocalStorage.SetItemAsStringAsync("drawer", "false");
            _drawerOpen = false;

        }
        else
        {
            await LocalStorage.SetItemAsStringAsync("drawer", "true");
            _drawerOpen = true;
        }
    }
    
    private string searchString = "";
    private SearchViewModel searchViewModel = new();
    [Inject] SearchController searchController { get; set; }
    private  void Search(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (string.IsNullOrEmpty(searchString))
            {
                searchViewModel = new SearchViewModel();
                StateHasChanged();

            }
            else
            {
                searchViewModel =  searchController.Search(searchString);
                StateHasChanged();
            }
                    
        }
    }

}
