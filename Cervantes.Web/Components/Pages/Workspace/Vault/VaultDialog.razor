@rendermode InteractiveServer
@using Cervantes.CORE
@using Task = System.Threading.Tasks.Task;
@using FluentValidation;
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Variant = MudBlazor.Variant
@using Cervantes.Web.Localization
@using Cervantes.CORE.Entities
@using global::AuthPermissions.AspNetCore
@using global::AuthPermissions.BaseCode.PermissionsCode
@using TaskStatus = Cervantes.CORE.Entities.TaskStatus
@inject IStringLocalizer<Resource> localizer
@inject IDialogService Dialog
@inject IJSRuntime JS
@attribute [HasPermission(Permissions.VaultRead)]
@inject AuthenticationStateProvider authenticationStateProvider


<style>
	.tox-tinymce-aux {
        z-index: 999999!important;
    }
</style>

<MudDialog Class="mud-ex-dialog-initial">
	<TitleContent>
		            <MudStack Row="true" Spacing="1">

		<MudText Typo="Typo.h4"><MudIcon Icon="@Icons.Material.Filled.Castle"/> @vault.Name</MudText>

		@if (userAth.HasPermission(Permissions.VulnsEdit))
		{
			@if (editMode)
			{
				<MudChip T="string" Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Default" OnClick="@((e) => EditMode())">@localizer["details"]</MudChip>
			}
			else
			{
				<MudChip T="string" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" OnClick="@((e) => EditMode())">@localizer["edit"]</MudChip>

			}
		}
		
		@if (userAth.HasPermission(Permissions.VulnsDelete))
		{
			<MudChip T="string" Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="@((e) => DeleteVaultDialog(vault, medium))">@localizer["delete"]</MudChip>
		}
		            </MudStack>
	</TitleContent>
	<DialogContent>
		@if (editMode)
        	{
			        <MudContainer MaxWidth="MaxWidth.False" Style="max-height: 1000px; overflow-y: scroll;">
				        <MudForm Model="@model" @ref="@form" Validation="@(vaultValidator.ValidateValue)" ValidationDelay="0" method="dialog">
                        
					        <MudStack AlignItems="AlignItems.Stretch">
                        				
						        <MudTextField  @bind-Value="model.Name"
						                       For="@(() => model.Name)"
						                       Immediate="true"
						                       Label="@localizer["name"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Castle"/>
                        
						        <TinyMCE.Blazor.Editor ScriptSrc="lib/tinymce/tinymce.min.js" Conf="@editorConf" @bind-Value="model.Description" data-mce-placeholder="Description"/>
                        				
						        <MudSelect  @bind-Value="model.Type" For="@(() => model.Type)" Label="@localizer["type"]" AdornmentIcon="@Icons.Material.Filled.Category" Adornment="Adornment.Start" TransformOrigin="Origin.BottomCenter" AnchorOrigin="Origin.BottomCenter" PopoverClass="fixed">
							        @foreach (VaultType item in Enum.GetValues(typeof(VaultType)))
							        {
								        <MudSelectItem Value="@item">@item.ToString()</MudSelectItem>
							        }
						        </MudSelect>
                        
						        <MudTextField @bind-Value="model.Value"
						                      For="@(() => model.Value)"
						                      Immediate="true"
						                      Label="@localizer["value"]" Adornment="Adornment.Start"  InputType="@PasswordInput"
						                      AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ValueClick" AdornmentAriaLabel="Show Password"/>
                        
                        
					        </MudStack>
				        </MudForm>
				        <MudStack Row="true" Justify="Justify.FlexEnd">
					        <MudButton Variant="Variant.Filled" Color="@Color.Default" OnClick="Cancel">@localizer["cancel"]</MudButton>
					        @if (editMode)
					        {
					        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="@Color.Primary" OnClick="Submit">@localizer["save"]</MudButton>

					        }
				        </MudStack>
				        
			        </MudContainer>
		        
	        }
		else
		{
			<MudGrid>
				<MudItem xs="12" sm="4" md="3">
					<MudCard Elevation="25">
						<MudCardContent>
							<div class="d-flex justify-center mb-4">
								<MudIcon Color="Color.Default" Icon="@Icons.Material.Filled.Castle" Size="Size.Large" />
							</div>
							<MudList T="string" Dense="true">
								<MudListItem T="string" Text="@vault.Name" Icon="@Icons.Material.Filled.Castle" />
								<MudListItem T="string" Text="@vault.Type.ToString()" Icon="@Icons.Material.Filled.Category" />
								<MudListItem T="string" Text="@vault.CreatedDate.ToShortDateString()" Icon="@Icons.Material.Filled.CalendarMonth" />

								<MudListItem T="string" Text="@vault.User.FullName" Icon="@Icons.Material.Filled.Person" />
							</MudList>
						</MudCardContent>
					</MudCard>
				</MudItem>
				
				<MudItem xs="12" sm="8" md="9">
					<MudStack>
					<MudItem xs="12" sm="12" md="12">
						<MudCard Elevation="25">
							<MudCardHeader>
								<CardHeaderContent>
									<MudText>@localizer["description"]</MudText>
								</CardHeaderContent>
							</MudCardHeader>
							<MudCardContent>
								@((MarkupString)vault.Description)
							</MudCardContent>
						</MudCard>
					</MudItem>

					<MudItem xs="12" sm="12" md="12">
						<MudCard Elevation="25">
							<MudCardHeader>
								<CardHeaderContent>
									<MudText>@localizer["value"]</MudText>
								</CardHeaderContent>
							</MudCardHeader>
							<MudCardContent>
								<MudTextField @bind-Value="vault.Value"
								              For="@(() => vault.Value)"
								              Immediate="true"
								              Label="@localizer["value"]" Adornment="Adornment.Start" InputType="@PasswordInput"
								              AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ValueClick" AdornmentAriaLabel="Show Password"/>
							</MudCardContent>
						</MudCard>




					</MudItem>
</MudStack>
				</MudItem>
			</MudGrid>

		}
		
	</DialogContent>
	<DialogActions>
		
	</DialogActions>
</MudDialog>
