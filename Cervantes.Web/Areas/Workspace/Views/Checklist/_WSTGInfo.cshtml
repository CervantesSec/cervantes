@model Cervantes.Web.Areas.Workspace.Models.Wstg.WSTGViewModel

<div class="table-responsive-md">
    <table class="table table-bordered table-hover" id="infot" width="100%">
        <thead class="thead-dark">
        <tr>
            <th><i class="fas fa-info-circle"></i> Information Gathering</th>
            <th><i class="fas fa-vial"></i> Test Name</th>
            <th><i class="fas fa-bullseye"></i> Objectives</th>
            <th><i class="fas fa-project-diagram"></i> Status</th>
            <th><i class="fas fa-sticky-note"></i> Notes</th>
            <th>
                <i class="fas fa-eye"></i>
            </th>
                    
        </tr>
        </thead>
        <tbody>
        <tr>
        
            <td>WSTG-INFO-01</td>
            <td>Conduct Search Engine Discovery Reconnaissance for Information Leakage</td>
            <td>- Identify what sensitive design and configuration information of the application, system, or organization is exposed directly (on the organization's website) or indirectly (via third-party services).</td>
            <td>          
                @Html.DropDownListFor(model => model.Info.Info01Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
            </td>
            <td>    <textarea  asp-for="Info.Info01Note" class="form-control" rows="4"></textarea> </td>
            <td>
                <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#info1Modal">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
        <tr>
            <td>WSTG-INFO-02</td>
            <td>Fingerprint Web Server</td>
            <td>- Determine the version and type of a running web server to enable further discovery of any known vulnerabilities.</td>
            <td>
                                        
              @Html.DropDownListFor(model => model.Info.Info02Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
            </td>
            <td>    <textarea  asp-for="Info.Info02Note" class="form-control" rows="4"></textarea> </td>
            <td>
                <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#info2Modal">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
                
        <tr>
            <td>WSTG-INFO-03</td>
            <td>Review Webserver Metafiles for Information Leakage</td>
            <td><p>- Identify hidden or obfuscated paths and functionality through the analysis of metadata files.</p>
                <p>- Extract and map other information that could lead to better understanding of the systems at hand."</p>
            </td>
            <td>
               @Html.DropDownListFor(model => model.Info.Info03Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
            </td>
            <td>    <textarea  asp-for="Info.Info03Note" class="form-control" rows="4"></textarea>  </td>
            <td>
                <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#info3Modal">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
        <tr>
            <td>WSTG-INFO-04</td>
            <td>Enumerate Applications on Webserver</td>
            <td>- Enumerate the applications within scope that exist on a web server.
            </td>
            <td>
                @Html.DropDownListFor(model => model.Info.Info04Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
            </td>
            <td><textarea  asp-for="Info.Info04Note" class="form-control" rows="4"></textarea> </td>
            <td>
                <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#info4Modal">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
        <tr>
            <td>WSTG-INFO-05</td>
            <td>Review Webpage Content for Information Leakage</td>
            <td><p>- Review webpage comments and metadata to find any information leakage.</p>
                <p>- Gather JavaScript files and review the JS code to better understand the application and to find any information leakage.</p>
                <p>- Identify if source map files or other front-end debug files exist.</p>
            </td>
            <td>
               @Html.DropDownListFor(model => model.Info.Info05Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
            </td>
            <td> <textarea  asp-for="Info.Info05Note" class="form-control" rows="4"></textarea> </td>
            <td>
                <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#info5Modal">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
        
        <tr>
            <td>WSTG-INFO-06</td>
            <td>Identify application entry points</td>
            <td>- Identify possible entry and injection points through request and response analysis.
            </td>
            <td>
                @Html.DropDownListFor(model => model.Info.Info06Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
            </td>
            <td>    <textarea  asp-for="Info.Info06Note" class="form-control" rows="4"></textarea> </td>
            <td>
                <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#info6Modal">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
        
        <tr>
            <td>WSTG-INFO-07</td>
            <td>Map execution paths through application</td>
            <td>- Map the target application and understand the principal workflows.
            </td>
            <td>
               @Html.DropDownListFor(model => model.Info.Info07Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
            </td>
            <td>    <textarea  asp-for="Info.Info07Note" class="form-control" rows="4"></textarea> </td>
            <td>
                <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#info7Modal">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
        
                        
        <tr>
            <td>WSTG-INFO-08</td>
            <td>Fingerprint Web Application Framework</td>
            <td>- Fingerprint the components being used by the web applications.
            </td>
            <td>
                @Html.DropDownListFor(model => model.Info.Info08Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
            </td>
            <td>    <textarea  asp-for="Info.Info08Note" class="form-control" rows="4"></textarea> </td>
            <td>
                <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#info8Modal">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
        
                                        
        <tr>
            <td>WSTG-INFO-09</td>
            <td>Fingerprint Web Application</td>
            <td>Fingerprint Web Application
            </td>
            <td>
                @Html.DropDownListFor(model => model.Info.Info09Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
            </td>
            <td>    <textarea  asp-for="Info.Info09Note" class="form-control" rows="4"></textarea> </td>
            <td>
                <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#info9Modal">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
        
                                                        
        <tr>
            <td>WSTG-INFO-10</td>
            <td>Map Application Architecture</td>
            <td>- Generate a map of the application at hand based on the research conducted.
            </td>
            <td>
                @Html.DropDownListFor(model => model.Info.Info10Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
            </td>
            <td>    <textarea  asp-for="Info.Info10Note" class="form-control" rows="4"></textarea> </td>
            <td>
                <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#info10Modal">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
         
        </tbody>
    </table>
</div>

<!-- Modal -->
<div class="modal fade" id="info1Modal" tabindex="-1" role="dialog" aria-labelledby="info1ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="info1ModalLabel">WSTG-INFO-01 - Conduct Search Engine Discovery Reconnaissance for Information Leakage</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>In order for search engines to work, computer programs (or <code class="language-plaintext highlighter-rouge">robots</code>) regularly fetch data (referred to as <a href="https://en.wikipedia.org/wiki/Web_crawler">crawling</a> from billions of pages on the web. These programs find web content and functionality by following links from other pages, or by looking at sitemaps. If a website uses a special file called <code class="language-plaintext highlighter-rouge">robots.txt</code> to list pages that it does not want search engines to fetch, then the pages listed there will be ignored. This is a basic overview - Google offers a more in-depth explanation of <a href="https://support.google.com/webmasters/answer/70897?hl=en">how a search engine works</a>.</p>
                
                <p>Testers can use search engines to perform reconnaissance on websites and web applications. There are direct and indirect elements to search engine discovery and reconnaissance: direct methods relate to searching the indexes and the associated content from caches, while indirect methods relate to learning sensitive design and configuration information by searching forums, newsgroups, and tendering websites.</p>
                
                <p>Once a search engine robot has completed crawling, it commences indexing the web content based on tags and associated attributes, such as <code class="language-plaintext highlighter-rouge">&lt;TITLE&gt;</code>, in order to return relevant search results. If the <code class="language-plaintext highlighter-rouge">robots.txt</code> file is not updated during the lifetime of the web site, and in-line HTML meta tags that instruct robots not to index content have not been used, then it is possible for indexes to contain web content not intended to be included by the owners. Website owners may use the previously mentioned <code class="language-plaintext highlighter-rouge">robots.txt</code>, HTML meta tags, authentication, and tools provided by search engines to remove such content.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                    <li>Identify what sensitive design and configuration information of the application, system, or organization is exposed directly (on the organization’s website) or indirectly (via third-party services).</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Use a search engine to search for potentially sensitive information. This may include:</p>
                
                <ul>
                    <li>network diagrams and configurations;</li>
                    <li>archived posts and emails by administrators or other key staff;</li>
                    <li>logon procedures and username formats;</li>
                    <li>usernames, passwords, and private keys;</li>
                    <li>third-party, or cloud service configuration files;</li>
                    <li>revealing error message content; and</li>
                    <li>development, test, User Acceptance Testing (UAT), and staging versions of sites.</li>
                </ul>
                
                <h3 id="search-engines">Search Engines</h3>
                
                <p>Do not limit testing to just one search engine provider, as different search engines may generate different results. Search engine results can vary in a few ways, depending on when the engine last crawled content, and the algorithm the engine uses to determine relevant pages. Consider using the following (alphabetically-listed) search engines:</p>
                
                <ul>
                    <li><a href="https://www.baidu.com/">Baidu</a>, China’s <a href="https://en.wikipedia.org/wiki/Web_search_engine#Market_share">most popular</a> search engine.</li>
                    <li><a href="https://www.bing.com/">Bing</a>, a search engine owned and operated by Microsoft, and the second <a href="https://en.wikipedia.org/wiki/Web_search_engine#Market_share">most popular</a> worldwide. Supports <a href="http://help.bing.microsoft.com/#apex/18/en-US/10001/-1">advanced search keywords</a>.</li>
                    <li><a href="https://binsearch.info/">binsearch.info</a>, a search engine for binary Usenet newsgroups.</li>
                    <li><a href="https://commoncrawl.org/">Common Crawl</a>, “an open repository of web crawl data that can be accessed and analyzed by anyone.”</li>
                    <li><a href="https://duckduckgo.com/">DuckDuckGo</a>, a privacy-focused search engine that compiles results from many different <a href="https://help.duckduckgo.com/results/sources/">sources</a>. Supports <a href="https://help.duckduckgo.com/duckduckgo-help-pages/results/syntax/">search syntax</a>.</li>
                    <li><a href="https://www.google.com/">Google</a>, which offers the world’s <a href="https://en.wikipedia.org/wiki/Web_search_engine#Market_share">most popular</a> search engine, and uses a ranking system to attempt to return the most relevant results. Supports <a href="https://support.google.com/websearch/answer/2466433">search operators</a>.</li>
                    <li><a href="https://archive.org/web/">Internet Archive Wayback Machine</a>, “building a digital library of Internet sites and other cultural artifacts in digital form.”</li>
                    <li><a href="https://www.startpage.com/">Startpage</a>, a search engine that uses Google’s results without collecting personal information through trackers and logs. Supports <a href="https://support.startpage.com/index.php?/Knowledgebase/Article/View/989/0/advanced-search-which-search-operators-are-supported-by-startpagecom">search operators</a>.</li>
                    <li><a href="https://www.shodan.io/">Shodan</a>, a service for searching Internet-connected devices and services. Usage options include a limited free plan as well as paid subscription plans.</li>
                </ul>
                
                <p>Both DuckDuckGo and Startpage offer some increased privacy to users by not utilizing trackers or keeping logs. This can provide reduced information leakage about the tester.</p>
                
                <h3 id="search-operators">Search Operators</h3>
                
                <p>A search operator is a special keyword or syntax that extends the capabilities of regular search queries, and can help obtain more specific results. They generally take the form of <code class="language-plaintext highlighter-rouge">operator:query</code>. Here are some commonly supported search operators:</p>
                
                <ul>
                    <li><code class="language-plaintext highlighter-rouge">site:</code> will limit the search to the provided domain.</li>
                    <li><code class="language-plaintext highlighter-rouge">inurl:</code> will only return results that include the keyword in the URL.</li>
                    <li><code class="language-plaintext highlighter-rouge">intitle:</code> will only return results that have the keyword in the page title.</li>
                    <li><code class="language-plaintext highlighter-rouge">intext:</code> or <code class="language-plaintext highlighter-rouge">inbody:</code> will only search for the keyword in the body of pages.</li>
                    <li><code class="language-plaintext highlighter-rouge">filetype:</code> will match only a specific filetype, i.e. png, or php.</li>
                </ul>
                
                <p>For example, to find the web content of owasp.org as indexed by a typical search engine, the syntax required is:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>site:owasp.org
                </code></pre></div></div>
                
                
                <h3 id="viewing-cached-content">Viewing Cached Content</h3>
                
                <p>To search for content that has previously been indexed, use the <code class="language-plaintext highlighter-rouge">cache:</code> operator. This is helpful for viewing content that may have changed since the time it was indexed, or that may no longer be available. Not all search engines provide cached content to search; the most useful source at time of writing is Google.</p>
                
                <p>To view <code class="language-plaintext highlighter-rouge">owasp.org</code> as it is cached, the syntax is:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cache:owasp.org
                </code></pre></div></div>
                
                
                <h3 id="google-hacking-or-dorking">Google Hacking, or Dorking</h3>
                
                <p>Searching with operators can be a very effective discovery technique when combined with the creativity of the tester. Operators can be chained to effectively discover specific kinds of sensitive files and information. This technique, called <a href="https://en.wikipedia.org/wiki/Google_hacking">Google hacking</a> or Dorking, is also possible using other search engines, as long as the search operators are supported.</p>
                
                <p>A database of dorks, such as <a href="https://www.exploit-db.com/google-hacking-database">Google Hacking Database</a>, is a useful resource that can help uncover specific information. Some categories of dorks available on this database include:</p>
                
                <ul>
                    <li>Footholds</li>
                    <li>Files containing usernames</li>
                    <li>Sensitive Directories</li>
                    <li>Web Server Detection</li>
                    <li>Vulnerable Files</li>
                    <li>Vulnerable Servers</li>
                    <li>Error Messages</li>
                    <li>Files containing juicy info</li>
                    <li>Files containing passwords</li>
                    <li>Sensitive Online Shopping Info</li>
                </ul>
                
                <p>Databases for other search engines, such as Bing and Shodan, are available from resources such as Bishop Fox’s <a href="https://resources.bishopfox.com/resources/tools/google-hacking-diggity/">Google Hacking Diggity Project</a>.</p>
                
                <h2 id="remediation">Remediation</h2>
                
                <p>Carefully consider the sensitivity of design and configuration information before it is posted online.</p>
                
                <p>Periodically review the sensitivity of existing design and configuration information that is posted online.</p>
                
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="info2Modal" tabindex="-1" role="dialog" aria-labelledby="info2ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="info2ModalLabel">WSTG-INFO-02 - Fingerprint Web Server</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundamentals of how these tools attempt to identify software, and why this is useful.</p>
                
                <p>Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                    <li>Determine the version and type of a running web server to enable further discovery of any known vulnerabilities.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Techniques used for web server fingerprinting include <a href="https://en.wikipedia.org/wiki/Banner_grabbing">banner grabbing</a>, eliciting responses to malformed requests, and using automated tools to perform more robust scans that use a combination of tactics. The fundamental premise by which all these techniques operate is the same. They all strive to elicit some response from the web server which can then be compared to a database of known responses and behaviors, and thus matched to a known server type.</p>
                
                <h3 id="banner-grabbing">Banner Grabbing</h3>
                
                <p>A banner grab is performed by sending an HTTP request to the web server and examining its <a href="https://developer.mozilla.org/en-US/docs/Glossary/Response_header">response header</a>. This can be accomplished using a variety of tools, including <code class="language-plaintext highlighter-rouge">telnet</code> for HTTP requests, or <code class="language-plaintext highlighter-rouge">openssl</code> for requests over SSL.</p>
                
                <p>For example, here is the response to a request from an Apache server.</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span> <span class="m">200</span> <span class="ne">OK</span>
                <span class="na">Date</span><span class="p">:</span> <span class="s">Thu, 05 Sep 2019 17:42:39 GMT</span>
                <span class="na">Server</span><span class="p">:</span> <span class="s">Apache/2.4.41 (Unix)</span>
                <span class="na">Last-Modified</span><span class="p">:</span> <span class="s">Thu, 05 Sep 2019 17:40:42 GMT</span>
                <span class="na">ETag</span><span class="p">:</span> <span class="s">"75-591d1d21b6167"</span>
                <span class="na">Accept-Ranges</span><span class="p">:</span> <span class="s">bytes</span>
                <span class="na">Content-Length</span><span class="p">:</span> <span class="s">117</span>
                <span class="na">Connection</span><span class="p">:</span> <span class="s">close</span>
                <span class="na">Content-Type</span><span class="p">:</span> <span class="s">text/html</span>
                <span class="s">...</span>
                </code></pre></div></div>
                
                <p>Here is another response, this time from nginx.</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span> <span class="m">200</span> <span class="ne">OK</span>
                <span class="na">Server</span><span class="p">:</span> <span class="s">nginx/1.17.3</span>
                <span class="na">Date</span><span class="p">:</span> <span class="s">Thu, 05 Sep 2019 17:50:24 GMT</span>
                <span class="na">Content-Type</span><span class="p">:</span> <span class="s">text/html</span>
                <span class="na">Content-Length</span><span class="p">:</span> <span class="s">117</span>
                <span class="na">Last-Modified</span><span class="p">:</span> <span class="s">Thu, 05 Sep 2019 17:40:42 GMT</span>
                <span class="na">Connection</span><span class="p">:</span> <span class="s">close</span>
                <span class="na">ETag</span><span class="p">:</span> <span class="s">"5d71489a-75"</span>
                <span class="na">Accept-Ranges</span><span class="p">:</span> <span class="s">bytes</span>
                <span class="s">...</span>
                </code></pre></div></div>
                
                <p>Here’s what a response from lighttpd looks like.</p>
                
                <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.0 200 OK
                Content-Type: text/html
                Accept-Ranges: bytes
                ETag: <span class="s2">"4192788355"</span>
                Last-Modified: Thu, 05 Sep 2019 17:40:42 GMT
                Content-Length: 117
                Connection: close
                Date: Thu, 05 Sep 2019 17:57:57 GMT
                Server: lighttpd/1.4.54
                </code></pre></div></div>
                
                <p>In these examples, the server type and version is clearly exposed. However, security-conscious applications may obfuscate their server information by modifying the header. For example, here is an excerpt from the response to a request for a site with a modified header:</p>
                
                <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
                Server: Website.com
                Date: Thu, 05 Sep 2019 17:57:06 GMT
                Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
                Status: 200 OK
                ...
                </code></pre></div></div>
                
                <p>In cases where the server information is obscured, testers may guess the type of server based on the ordering of the header fields. Note that in the Apache example above, the fields follow this order:</p>
                
                <ul>
                    <li>Date</li>
                    <li>Server</li>
                    <li>Last-Modified</li>
                    <li>ETag</li>
                    <li>Accept-Ranges</li>
                    <li>Content-Length</li>
                    <li>Connection</li>
                    <li>Content-Type</li>
                </ul>
                
                <p>However, in both the nginx and obscured server examples, the fields in common follow this order:</p>
                
                <ul>
                    <li>Server</li>
                    <li>Date</li>
                    <li>Content-Type</li>
                </ul>
                
                <p>Testers can use this information to guess that the obscured server is nginx. However, considering that a number of different web servers may share the same field ordering and fields can be modified or removed, this method is not definite.</p>
                
                <h3 id="sending-malformed-requests">Sending Malformed Requests</h3>
                
                <p>Web servers may be identified by examining their error responses, and in the cases where they have not been customized, their default error pages. One way to compel a server to present these is by sending intentionally incorrect or malformed requests.</p>
                
                <p>For example, here is the response to a request for the non-existent method <code class="language-plaintext highlighter-rouge">SANTA CLAUS</code> from an Apache server.</p>
                
                <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET / SANTA CLAUS/1.1
                
                
                HTTP/1.1 400 Bad Request
                Date: Fri, 06 Sep 2019 19:21:01 GMT
                Server: Apache/2.4.41 <span class="o">(</span>Unix<span class="o">)</span>
                Content-Length: 226
                Connection: close
                Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>iso-8859-1
                
                &lt;<span class="o">!</span>DOCTYPE HTML PUBLIC <span class="s2">"-//IETF//DTD HTML 2.0//EN"</span><span class="o">&gt;</span>
                &lt;html&gt;&lt;<span class="nb">head</span><span class="o">&gt;</span>
                &lt;title&gt;400 Bad Request&lt;/title&gt;
                &lt;/head&gt;&lt;body&gt;
                &lt;h1&gt;Bad Request&lt;/h1&gt;
                &lt;p&gt;Your browser sent a request that this server could not understand.&lt;br /&gt;
                &lt;/p&gt;
                &lt;/body&gt;&lt;/html&gt;
                </code></pre></div></div>
                
                <p>Here is the response to the same request from nginx.</p>
                
                <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET / SANTA CLAUS/1.1
                
                
                &lt;html&gt;
                &lt;<span class="nb">head</span><span class="o">&gt;</span>&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;
                &lt;body&gt;
                &lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;
                &lt;hr&gt;&lt;center&gt;nginx/1.17.3&lt;/center&gt;
                &lt;/body&gt;
                &lt;/html&gt;
                </code></pre></div></div>
                
                <p>Here is the response to the same request from lighttpd.</p>
                
                <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET / SANTA CLAUS/1.1
                
                
                HTTP/1.0 400 Bad Request
                Content-Type: text/html
                Content-Length: 345
                Connection: close
                Date: Sun, 08 Sep 2019 21:56:17 GMT
                Server: lighttpd/1.4.54
                
                &lt;?xml <span class="nv">version</span><span class="o">=</span><span class="s2">"1.0"</span> <span class="nv">encoding</span><span class="o">=</span><span class="s2">"iso-8859-1"</span>?&gt;
                &lt;<span class="o">!</span>DOCTYPE html PUBLIC <span class="s2">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span>
                         <span class="s2">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="o">&gt;</span>
                &lt;html <span class="nv">xmlns</span><span class="o">=</span><span class="s2">"http://www.w3.org/1999/xhtml"</span> xml:lang<span class="o">=</span><span class="s2">"en"</span> <span class="nv">lang</span><span class="o">=</span><span class="s2">"en"</span><span class="o">&gt;</span>
                 &lt;<span class="nb">head</span><span class="o">&gt;</span>
                  &lt;title&gt;400 Bad Request&lt;/title&gt;
                 &lt;/head&gt;
                 &lt;body&gt;
                  &lt;h1&gt;400 Bad Request&lt;/h1&gt;
                 &lt;/body&gt;
                &lt;/html&gt;
                </code></pre></div></div>
                
                <p>As default error pages offer many differentiating factors between types of web servers, their examination can be an effective method for fingerprinting even when server header fields are obscured.</p>
                
                <h3 id="using-automated-scanning-tools">Using Automated Scanning Tools</h3>
                
                <p>As stated earlier, web server fingerprinting is often included as a functionality of automated scanning tools. These tools are able to make requests similar to those demonstrated above, as well as send other more server-specific probes. Automated tools can compare responses from web servers much faster than manual testing, and utilize large databases of known responses to attempt server identification. For these reasons, automated tools are more likely to produce accurate results.</p>
                
                <p>Here are some commonly-used scan tools that include web server fingerprinting functionality.</p>
                
                <ul>
                    <li><a href="https://toolbar.netcraft.com/site_report">Netcraft</a>, an online tool that scans websites for information, including the web server.</li>
                    <li><a href="https://github.com/sullo/nikto">Nikto</a>, an Open Source command-line scanning tool.</li>
                    <li><a href="https://nmap.org/">Nmap</a>, an Open Source command-line tool that also has a GUI, <a href="https://nmap.org/zenmap/">Zenmap</a>.</li>
                </ul>
                
                <h2 id="remediation">Remediation</h2>
                
                <p>While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:</p>
                
                <ul>
                    <li>Obscuring web server information in headers, such as with Apache’s <a href="https://httpd.apache.org/docs/current/mod/mod_headers.html">mod_headers module</a>.</li>
                    <li>Using a hardened <a href="https://en.wikipedia.org/wiki/Proxy_server#Reverse_proxies">reverse proxy server</a> to create an additional layer of security between the web server and the Internet.</li>
                    <li>Ensuring that web servers are kept up-to-date with the latest software and security patches.</li>
                </ul>
                
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="info3Modal" tabindex="-1" role="dialog" aria-labelledby="info3ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="info3ModalLabel">WSTG-INFO-03 - Review Webserver Metafiles for Information Leakage</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>This section describes how to test various metadata files for information leakage of the web application’s path(s), or functionality. Furthermore, the list of directories that are to be avoided by Spiders, Robots, or Crawlers can also be created as a dependency for <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/07-Map_Execution_Paths_Through_Application">Map execution paths through application</a>. Other information may also be collected to identify attack surface, technology details, or for use in social engineering engagement.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify hidden or obfuscated paths and functionality through the analysis of metadata files.</li>
                  <li>Extract and map other information that could lead to better understanding of the systems at hand.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <blockquote>
                  <p>Any of the actions performed below with <code class="language-plaintext highlighter-rouge">wget</code> could also be done with <code class="language-plaintext highlighter-rouge">curl</code>. Many Dynamic Application Security Testing (DAST) tools such as ZAP and Burp Suite include checks or parsing for these resources as part of their spider/crawler functionality. They can also be identified using various <a href="https://en.wikipedia.org/wiki/Google_hacking">Google Dorks</a> or leveraging advanced search features such as <code class="language-plaintext highlighter-rouge">inurl:</code>.</p>
                </blockquote>
                
                <h3 id="robots">Robots</h3>
                
                <p>Web Spiders, Robots, or Crawlers retrieve a web page and then recursively traverse hyperlinks to retrieve further web content. Their accepted behavior is specified by the <a href="https://www.robotstxt.org">Robots Exclusion Protocol</a> of the <a href="https://www.robotstxt.org/">robots.txt</a> file in the web root directory.</p>
                
                <p>As an example, the beginning of the <code class="language-plaintext highlighter-rouge">robots.txt</code> file from <a href="https://www.google.com/robots.txt">Google</a> sampled on 2020 May 5 is quoted below:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User-agent: *
                Disallow: /search
                Allow: /search/about
                Allow: /search/static
                Allow: /search/howsearchworks
                Disallow: /sdch
                ...
                </code></pre></div></div>
                
                <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent">User-Agent</a> directive refers to the specific web spider/robot/crawler. For example, the <code class="language-plaintext highlighter-rouge">User-Agent: Googlebot</code> refers to the spider from Google while <code class="language-plaintext highlighter-rouge">User-Agent: bingbot</code> refers to a crawler from Microsoft. <code class="language-plaintext highlighter-rouge">User-Agent: *</code> in the example above applies to all <a href="https://support.google.com/webmasters/answer/6062608?visit_id=637173940975499736-3548411022&amp;rd=1">web spiders/robots/crawlers</a>.</p>
                
                <p>The <code class="language-plaintext highlighter-rouge">Disallow</code> directive specifies which resources are prohibited by spiders/robots/crawlers. In the example above, the following are prohibited:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
                Disallow: /search
                ...
                Disallow: /sdch
                ...
                </code></pre></div></div>
                
                <p>Web spiders/robots/crawlers can <a href="https://blog.isc2.org/isc2_blog/2008/07/the-attack-of-t.html">intentionally ignore</a> the <code class="language-plaintext highlighter-rouge">Disallow</code> directives specified in a <code class="language-plaintext highlighter-rouge">robots.txt</code> file, such as those from <a href="https://www.htbridge.com/news/social_networks_can_robots_violate_user_privacy.html">Social Networks</a> to ensure that shared linked are still valid. Hence, <code class="language-plaintext highlighter-rouge">robots.txt</code> should not be considered as a mechanism to enforce restrictions on how web content is accessed, stored, or republished by third parties.</p>
                
                <p>The <code class="language-plaintext highlighter-rouge">robots.txt</code> file is retrieved from the web root directory of the web server. For example, to retrieve the <code class="language-plaintext highlighter-rouge">robots.txt</code> from <code class="language-plaintext highlighter-rouge">www.google.com</code> using <code class="language-plaintext highlighter-rouge">wget</code> or <code class="language-plaintext highlighter-rouge">curl</code>:</p>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-O</span> <span class="nt">-Ss</span> http://www.google.com/robots.txt <span class="o">&amp;&amp;</span> <span class="nb">head</span> <span class="nt">-n5</span> robots.txt
                User-agent: <span class="k">*</span>
                Disallow: /search
                Allow: /search/about
                Allow: /search/static
                Allow: /search/howsearchworks
                ...
                </code></pre></div></div>
                
                <h4 id="analyze-robotstxt-using-google-webmaster-tools">Analyze robots.txt Using Google Webmaster Tools</h4>
                
                <p>Web site owners can use the Google “Analyze robots.txt” function to analyze the website as part of its <a href="https://www.google.com/webmasters/tools">Google Webmaster Tools</a>. This tool can assist with testing and the procedure is as follows:</p>
                
                <ol>
                  <li>Sign into Google Webmaster Tools with a Google account.</li>
                  <li>On the dashboard, enter the URL for the site to be analyzed.</li>
                  <li>Choose between the available methods and follow the on screen instruction.</li>
                </ol>
                
                <h3 id="meta-tags">META Tags</h3>
                
                <p><code class="language-plaintext highlighter-rouge">&lt;META&gt;</code> tags are located within the <code class="language-plaintext highlighter-rouge">HEAD</code> section of each HTML document and should be consistent across a web site in the event that the robot/spider/crawler start point does not begin from a document link other than webroot i.e. a <a href="https://en.wikipedia.org/wiki/Deep_linking">deep link</a>. Robots directive can also be specified through use of a specific <a href="https://www.robotstxt.org/meta.html">META tag</a>.</p>
                
                <h4 id="robots-meta-tag">Robots META Tag</h4>
                
                <p>If there is no <code class="language-plaintext highlighter-rouge">&lt;META NAME="ROBOTS" ... &gt;</code> entry then the “Robots Exclusion Protocol” defaults to <code class="language-plaintext highlighter-rouge">INDEX,FOLLOW</code> respectively. Therefore, the other two valid entries defined by the “Robots Exclusion Protocol” are prefixed with <code class="language-plaintext highlighter-rouge">NO...</code> i.e. <code class="language-plaintext highlighter-rouge">NOINDEX</code> and <code class="language-plaintext highlighter-rouge">NOFOLLOW</code>.</p>
                
                <p>Based on the Disallow directive(s) listed within the <code class="language-plaintext highlighter-rouge">robots.txt</code> file in webroot, a regular expression search for <code class="language-plaintext highlighter-rouge">&lt;META NAME="ROBOTS"</code> within each web page is undertaken and the result compared to the <code class="language-plaintext highlighter-rouge">robots.txt</code> file in webroot.</p>
                
                <h4 id="miscellaneous-meta-information-tags">Miscellaneous META Information Tags</h4>
                
                <p>Organizations often embed informational META tags in web content to support various technologies such as screen readers, social networking previews, search engine indexing, etc. Such meta-information can be of value to testers in identifying technologies used, and additional paths/functionality to explore and test. The following meta information was retrieved from <code class="language-plaintext highlighter-rouge">www.whitehouse.gov</code> via View Page Source on 2020 May 05:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
                <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:locale"</span> <span class="na">content=</span><span class="s">"en_US"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:type"</span> <span class="na">content=</span><span class="s">"website"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:title"</span> <span class="na">content=</span><span class="s">"The White House"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:description"</span> <span class="na">content=</span><span class="s">"We, the citizens of America, are now joined in a great national effort to rebuild our country and to restore its promise for all. – President Donald Trump."</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:url"</span> <span class="na">content=</span><span class="s">"https://www.whitehouse.gov/"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:site_name"</span> <span class="na">content=</span><span class="s">"The White House"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"fb:app_id"</span> <span class="na">content=</span><span class="s">"1790466490985150"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:image"</span> <span class="na">content=</span><span class="s">"https://www.whitehouse.gov/wp-content/uploads/2017/12/wh.gov-share-img_03-1024x538.png"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:image:secure_url"</span> <span class="na">content=</span><span class="s">"https://www.whitehouse.gov/wp-content/uploads/2017/12/wh.gov-share-img_03-1024x538.png"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"twitter:card"</span> <span class="na">content=</span><span class="s">"summary_large_image"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"twitter:description"</span> <span class="na">content=</span><span class="s">"We, the citizens of America, are now joined in a great national effort to rebuild our country and to restore its promise for all. – President Donald Trump."</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"twitter:title"</span> <span class="na">content=</span><span class="s">"The White House"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"twitter:site"</span> <span class="na">content=</span><span class="s"></span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"twitter:image"</span> <span class="na">content=</span><span class="s">"https://www.whitehouse.gov/wp-content/uploads/2017/12/wh.gov-share-img_03-1024x538.png"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"twitter:creator"</span> <span class="na">content=</span><span class="s"></span> <span class="nt">/&gt;</span>
                ...
                <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"apple-mobile-web-app-title"</span> <span class="na">content=</span><span class="s">"The White House"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"application-name"</span> <span class="na">content=</span><span class="s">"The White House"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"msapplication-TileColor"</span> <span class="na">content=</span><span class="s">"#0c2644"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"theme-color"</span> <span class="na">content=</span><span class="s">"#f5f5f5"</span><span class="nt">&gt;</span>
                ...
                </code></pre></div></div>
                
                <h3 id="sitemaps">Sitemaps</h3>
                
                <p>A sitemap is a file where a developer or organization can provide information about the pages, videos, and other files offered by the site or application, and the relationship between them. Search engines can use this file to more intelligently explore your site. Testers can use <code class="language-plaintext highlighter-rouge">sitemap.xml</code> files to learn more about the site or application to explore it more completely.</p>
                
                <p>The following excerpt is from Google’s primary sitemap retrieved 2020 May 05.</p>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>wget <span class="nt">--no-verbose</span> https://www.google.com/sitemap.xml <span class="o">&amp;&amp;</span> <span class="nb">head</span> <span class="nt">-n8</span> sitemap.xml
                2020-05-05 12:23:30 URL:https://www.google.com/sitemap.xml <span class="o">[</span>2049] -&gt; <span class="s2">"sitemap.xml"</span> <span class="o">[</span>1]
                
                &lt;?xml <span class="nv">version</span><span class="o">=</span><span class="s2">"1.0"</span> <span class="nv">encoding</span><span class="o">=</span><span class="s2">"UTF-8"</span>?&gt;
                &lt;sitemapindex <span class="nv">xmlns</span><span class="o">=</span><span class="s2">"http://www.google.com/schemas/sitemap/0.84"</span><span class="o">&gt;</span>
                  &lt;sitemap&gt;
                    &lt;loc&gt;https://www.google.com/gmail/sitemap.xml&lt;/loc&gt;
                  &lt;/sitemap&gt;
                  &lt;sitemap&gt;
                    &lt;loc&gt;https://www.google.com/forms/sitemaps.xml&lt;/loc&gt;
                  &lt;/sitemap&gt;
                ...
                </code></pre></div></div>
                
                <p>Exploring from there a tester may wish to retrieve the gmail sitemap <code class="language-plaintext highlighter-rouge">https://www.google.com/gmail/sitemap.xml</code>:</p>
                
                <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
                <span class="nt">&lt;urlset</span> <span class="na">xmlns=</span><span class="s">"http://www.sitemaps.org/schemas/sitemap/0.9"</span> <span class="na">xmlns:xhtml=</span><span class="s">"http://www.w3.org/1999/xhtml"</span><span class="nt">&gt;</span>
                  <span class="nt">&lt;url&gt;</span>
                    <span class="nt">&lt;loc&gt;</span>https://www.google.com/intl/am/gmail/about/<span class="nt">&lt;/loc&gt;</span>
                    <span class="nt">&lt;xhtml:link</span> <span class="na">href=</span><span class="s">"https://www.google.com/gmail/about/"</span> <span class="na">hreflang=</span><span class="s">"x-default"</span> <span class="na">rel=</span><span class="s">"alternate"</span><span class="nt">/&gt;</span>
                    <span class="nt">&lt;xhtml:link</span> <span class="na">href=</span><span class="s">"https://www.google.com/intl/el/gmail/about/"</span> <span class="na">hreflang=</span><span class="s">"el"</span> <span class="na">rel=</span><span class="s">"alternate"</span><span class="nt">/&gt;</span>
                    <span class="nt">&lt;xhtml:link</span> <span class="na">href=</span><span class="s">"https://www.google.com/intl/it/gmail/about/"</span> <span class="na">hreflang=</span><span class="s">"it"</span> <span class="na">rel=</span><span class="s">"alternate"</span><span class="nt">/&gt;</span>
                    <span class="nt">&lt;xhtml:link</span> <span class="na">href=</span><span class="s">"https://www.google.com/intl/ar/gmail/about/"</span> <span class="na">hreflang=</span><span class="s">"ar"</span> <span class="na">rel=</span><span class="s">"alternate"</span><span class="nt">/&gt;</span>
                ...
                </code></pre></div></div>
                
                <h3 id="security-txt">Security TXT</h3>
                
                <p><code class="language-plaintext highlighter-rouge">security.txt</code> is a <a href="https://securitytxt.org/">proposed standard</a> which allows websites to define security policies and contact details. There are multiple reasons this might be of interest in testing scenarios, including but not limited to:</p>
                
                <ul>
                  <li>Identifying further paths or resources to include in discovery/analysis.</li>
                  <li>Open Source intelligence gathering.</li>
                  <li>Finding information on Bug Bounties, etc.</li>
                  <li>Social Engineering.</li>
                </ul>
                
                <p>The file may be present either in the root of the webserver or in the <code class="language-plaintext highlighter-rouge">.well-known/</code> directory. Ex:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">https://example.com/security.txt</code></li>
                  <li><code class="language-plaintext highlighter-rouge">https://example.com/.well-known/security.txt</code></li>
                </ul>
                
                <p>Here is a real world example retrieved from LinkedIn 2020 May 05:</p>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>wget <span class="nt">--no-verbose</span> https://www.linkedin.com/.well-known/security.txt <span class="o">&amp;&amp;</span> <span class="nb">cat </span>security.txt
                2020-05-07 12:56:51 URL:https://www.linkedin.com/.well-known/security.txt <span class="o">[</span>333/333] -&gt; <span class="s2">"security.txt"</span> <span class="o">[</span>1]
                <span class="c"># Conforms to IETF `draft-foudil-securitytxt-07`</span>
                Contact: mailto:security@linkedin.com
                Contact: https://www.linkedin.com/help/linkedin/answer/62924
                Encryption: https://www.linkedin.com/help/linkedin/answer/79676
                Canonical: https://www.linkedin.com/.well-known/security.txt
                Policy: https://www.linkedin.com/help/linkedin/answer/62924
                </code></pre></div></div>
                
                <h3 id="humans-txt">Humans TXT</h3>
                
                <p><code class="language-plaintext highlighter-rouge">humans.txt</code> is an initiative for knowing the people behind a website. It takes the form of a text file that contains information about the different people who have contributed to building the website. See <a href="http://humanstxt.org/">humanstxt</a> for more info. This file often (though not always) contains information for career or job sites/paths.</p>
                
                <p>The following example was retrieved from Google 2020 May 05:</p>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>wget <span class="nt">--no-verbose</span>  https://www.google.com/humans.txt <span class="o">&amp;&amp;</span> <span class="nb">cat </span>humans.txt
                2020-05-07 12:57:52 URL:https://www.google.com/humans.txt <span class="o">[</span>286/286] -&gt; <span class="s2">"humans.txt"</span> <span class="o">[</span>1]
                Google is built by a large team of engineers, designers, researchers, robots, and others <span class="k">in </span>many different sites across the globe. It is updated continuously, and built with more tools and technologies than we can shake a stick at. If you<span class="s1">'d like to help us out, see careers.google.com.
                </span></code></pre></div></div>
                
                <h3 id="other-well-known-information-sources">Other .well-known Information Sources</h3>
                
                <p>There are other RFCs and Internet drafts which suggest standardized uses of files within the <code class="language-plaintext highlighter-rouge">.well-known/</code> directory. Lists of which can be found <a href="https://en.wikipedia.org/wiki/List_of_/.well-known/_services_offered_by_webservers">here</a> or <a href="https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml">here</a>.</p>
                
                <p>It would be fairly simple for a tester to review the RFC/drafts are create a list to be supplied to a crawler or fuzzer, in order to verify the existence or content of such files.</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li>Browser (View Source or Dev Tools functionality)</li>
                  <li>curl</li>
                  <li>wget</li>
                  <li>Burp Suite</li>
                  <li>ZAP</li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="info4Modal" tabindex="-1" role="dialog" aria-labelledby="info4ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="info4ModalLabel">WSTG-INFO-04 - Enumerate Applications on Webserver</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>A paramount step in testing for web application vulnerabilities is to find out which particular applications are hosted on a web server. Many applications have known vulnerabilities and known attack strategies that can be exploited in order to gain remote control or to exploit data. In addition, many applications are often misconfigured or not updated, due to the perception that they are only used “internally” and therefore no threat exists.
                With the proliferation of virtual web servers, the traditional 1:1-type relationship between an IP address and a web server is losing much of its original significance. It is not uncommon to have multiple web sites or applications whose symbolic names resolve to the same IP address. This scenario is not limited to hosting environments, but also applies to ordinary corporate environments as well.</p>
                
                <p>Security professionals are sometimes given a set of IP addresses as a target to test. It is arguable that this scenario is more akin to a penetration test-type engagement, but in any case it is expected that such an assignment would test all web applications accessible through this target. The problem is that the given IP address hosts an HTTP service on port 80, but if a tester should access it by specifying the IP address (which is all they know) it reports “No web server configured at this address” or a similar message. But that system could “hide” a number of web applications, associated to unrelated symbolic (DNS) names. Obviously, the extent of the analysis is deeply affected by the tester tests all applications or only tests the applications that they are aware of.</p>
                
                <p>Sometimes, the target specification is richer. The tester may be given a list of IP addresses and their corresponding symbolic names. Nevertheless, this list might convey partial information, i.e., it could omit some symbolic names and the client may not even being aware of that (this is more likely to happen in large organizations).</p>
                
                <p>Other issues affecting the scope of the assessment are represented by web applications published at non-obvious URLs (e.g., <code class="language-plaintext highlighter-rouge">http://www.example.com/some-strange-URL</code>), which are not referenced elsewhere. This may happen either by error (due to misconfigurations), or intentionally (for example, unadvertised administrative interfaces).</p>
                
                <p>To address these issues, it is necessary to perform web application discovery.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Enumerate the applications within scope that exist on a web server.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Web application discovery is a process aimed at identifying web applications on a given infrastructure. The latter is usually specified as a set of IP addresses (maybe a net block), but may consist of a set of DNS symbolic names or a mix of the two. This information is handed out prior to the execution of an assessment, be it a classic-style penetration test or an application-focused assessment. In both cases, unless the rules of engagement specify otherwise (e.g., test only the application located at the URL <code class="language-plaintext highlighter-rouge">http://www.example.com/</code>), the assessment should strive to be the most comprehensive in scope, i.e. it should identify all the applications accessible through the given target. The following examples examine a few techniques that can be employed to achieve this goal.</p>
                
                <blockquote>
                  <p>Some of the following techniques apply to Internet-facing web servers, namely DNS and reverse-IP web-based search services and the use of search engines. Examples make use of private IP addresses (such as <code class="language-plaintext highlighter-rouge">192.168.1.100</code>), which, unless indicated otherwise, represent <em>generic</em> IP addresses and are used only for anonymity purposes.</p>
                </blockquote>
                
                <p>There are three factors influencing how many applications are related to a given DNS name (or an IP address):</p>
                
                <ol>
                  <li>
                    <p><strong>Different Base URL</strong></p>
                
                    <p>The obvious entry point for a web application is <code class="language-plaintext highlighter-rouge">www.example.com</code>, i.e., with this shorthand notation we think of the web application originating at <code class="language-plaintext highlighter-rouge">http://www.example.com/</code> (the same applies for https). However, even though this is the most common situation, there is nothing forcing the application to start at <code class="language-plaintext highlighter-rouge">/</code>.</p>
                
                    <p>For example, the same symbolic name may be associated to three web applications such as: <code class="language-plaintext highlighter-rouge">http://www.example.com/url1</code> <code class="language-plaintext highlighter-rouge">http://www.example.com/url2</code> <code class="language-plaintext highlighter-rouge">http://www.example.com/url3</code></p>
                
                    <p>In this case, the URL <code class="language-plaintext highlighter-rouge">http://www.example.com/</code> would not be associated with a meaningful page, and the three applications would be <strong>hidden</strong>, unless the tester explicitly knows how to reach them, i.e., the tester knows <em>url1</em>, <em>url2</em> or <em>url3</em>. There is usually no need to publish web applications in this way, unless the owner doesn’t want them to be accessible in a standard way, and is prepared to inform the users about their exact location. This doesn’t mean that these applications are secret, just that their existence and location is not explicitly advertised.</p>
                  </li>
                  <li>
                    <p><strong>Non-standard Ports</strong></p>
                
                    <p>While web applications usually live on port 80 (http) and 443 (https), there is nothing magic about these port numbers. In fact, web applications may be associated with arbitrary TCP ports, and can be referenced by specifying the port number as follows: <code class="language-plaintext highlighter-rouge">http[s]://www.example.com:port/</code>. For example, <code class="language-plaintext highlighter-rouge">http://www.example.com:20000/</code>.</p>
                  </li>
                  <li>
                    <p><strong>Virtual Hosts</strong></p>
                
                    <p>DNS allows a single IP address to be associated with one or more symbolic names. For example, the IP address <code class="language-plaintext highlighter-rouge">192.168.1.100</code> might be associated to DNS names <code class="language-plaintext highlighter-rouge">www.example.com</code>, <code class="language-plaintext highlighter-rouge">helpdesk.example.com</code>, <code class="language-plaintext highlighter-rouge">webmail.example.com</code>. It is not necessary that all the names belong to the same DNS domain. This 1-to-N relationship may be reflected to serve different content by using so called virtual hosts. The information specifying the virtual host we are referring to is embedded in the HTTP 1.1 <a href="https://tools.ietf.org/html/rfc2616#section-14.23">Host header</a>.</p>
                
                    <p>One would not suspect the existence of other web applications in addition to the obvious <code class="language-plaintext highlighter-rouge">www.example.com</code>, unless they know of <code class="language-plaintext highlighter-rouge">helpdesk.example.com</code> and <code class="language-plaintext highlighter-rouge">webmail.example.com</code>.</p>
                  </li>
                </ol>
                
                <h3 id="approaches-to-address-issue-1---non-standard-urls">Approaches to Address Issue 1 - Non-standard URLs</h3>
                
                <p>There is no way to fully ascertain the existence of non-standard-named web applications. Being non-standard, there is no fixed criteria governing the naming convention, however there are a number of techniques that the tester can use to gain some additional insight.</p>
                
                <p>First, if the web server is mis-configured and allows directory browsing, it may be possible to spot these applications. Vulnerability scanners may help in this respect.</p>
                
                <p>Second, these applications may be referenced by other web pages and there is a chance that they have been spidered and indexed by web search engines. If testers suspect the existence of such <strong>hidden</strong> applications on <code class="language-plaintext highlighter-rouge">www.example.com</code> they could search using the <em>site</em> operator and examining the result of a query for <code class="language-plaintext highlighter-rouge">site: www.example.com</code>. Among the returned URLs there could be one pointing to such a non-obvious application.</p>
                
                <p>Another option is to probe for URLs which might be likely candidates for non-published applications. For example, a web mail front end might be accessible from URLs such as <code class="language-plaintext highlighter-rouge">https://www.example.com/webmail</code>, <code class="language-plaintext highlighter-rouge">https://webmail.example.com/</code>, or <code class="language-plaintext highlighter-rouge">https://mail.example.com/</code>. The same holds for administrative interfaces, which may be published at hidden URLs (for example, a Tomcat administrative interface), and yet not referenced anywhere. So doing a bit of dictionary-style searching (or “intelligent guessing”) could yield some results. Vulnerability scanners may help in this respect.</p>
                
                <h3 id="approaches-to-address-issue-2---non-standard-ports">Approaches to Address Issue 2 - Non-standard Ports</h3>
                
                <p>It is easy to check for the existence of web applications on non-standard ports. A port scanner such as nmap is capable of performing service recognition by means of the <code class="language-plaintext highlighter-rouge">-sV</code> option, and will identify http[s] services on arbitrary ports. What is required is a full scan of the whole 64k TCP port address space.</p>
                
                <p>For example, the following command will look up, with a TCP connect scan, all open ports on IP <code class="language-plaintext highlighter-rouge">192.168.1.100</code> and will try to determine what services are bound to them (only <em>essential</em> switches are shown – nmap features a broad set of options, whose discussion is out of scope):</p>
                
                <p><code class="language-plaintext highlighter-rouge">nmap –Pn –sT –sV –p0-65535 192.168.1.100</code></p>
                
                <p>It is sufficient to examine the output and look for http or the indication of SSL-wrapped services (which should be probed to confirm that they are https). For example, the output of the previous command could look like:</p>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Interesting ports on 192.168.1.100:
                <span class="o">(</span>The 65527 ports scanned but not shown below are <span class="k">in </span>state: closed<span class="o">)</span>
                PORT      STATE SERVICE     VERSION
                22/tcp    open  ssh         OpenSSH 3.5p1 <span class="o">(</span>protocol 1.99<span class="o">)</span>
                80/tcp    open  http        Apache httpd 2.0.40 <span class="o">((</span>Red Hat Linux<span class="o">))</span>
                443/tcp   open  ssl         OpenSSL
                901/tcp   open  http        Samba SWAT administration server
                1241/tcp  open  ssl         Nessus security scanner
                3690/tcp  open  unknown
                8000/tcp  open  http-alt?
                8080/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1
                </code></pre></div></div>
                
                <p>From this example, one see that:</p>
                
                <ul>
                  <li>There is an Apache HTTP server running on port 80.</li>
                  <li>It looks like there is an HTTPS server on port 443 (but this needs to be confirmed, for example, by visiting <code class="language-plaintext highlighter-rouge">https://192.168.1.100</code> with a browser).</li>
                  <li>On port 901 there is a Samba SWAT web interface.</li>
                  <li>The service on port 1241 is not HTTPS, but is the SSL-wrapped Nessus daemon.</li>
                  <li>Port 3690 features an unspecified service (nmap gives back its <em>fingerprint</em> - here omitted for clarity - together with instructions to submit it for incorporation in the nmap fingerprint database, provided you know which service it represents).</li>
                  <li>Another unspecified service on port 8000; this might possibly be HTTP, since it is not uncommon to find HTTP servers on this port. Let’s examine this issue:</li>
                </ul>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>telnet 192.168.10.100 8000
                Trying 192.168.1.100...
                Connected to 192.168.1.100.
                Escape character is <span class="s1">'^]'</span><span class="nb">.</span>
                GET / HTTP/1.0
                
                HTTP/1.0 200 OK
                pragma: no-cache
                Content-Type: text/html
                Server: MX4J-HTTPD/1.0
                expires: now
                Cache-Control: no-cache
                
                &lt;html&gt;
                ...
                </code></pre></div></div>
                
                <p>This confirms that in fact it is an HTTP server. Alternatively, testers could have visited the URL with a web browser; or used the GET or HEAD Perl commands, which mimic HTTP interactions such as the one given above (however HEAD requests may not be honored by all servers).</p>
                
                <ul>
                  <li>Apache Tomcat running on port 8080.</li>
                </ul>
                
                <p>The same task may be performed by vulnerability scanners, but first check that the scanner of choice is able to identify HTTP[S] services running on non-standard ports. For example, Nessus is capable of identifying them on arbitrary ports (provided it is instructed to scan all the ports), and will provide, with respect to nmap, a number of tests on known web server vulnerabilities, as well as on the SSL configuration of HTTPS services. As hinted before, Nessus is also able to spot popular applications or web interfaces which could otherwise go unnoticed (for example, a Tomcat administrative interface).</p>
                
                <h3 id="approaches-to-address-issue-3---virtual-hosts">Approaches to Address Issue 3 - Virtual Hosts</h3>
                
                <p>There are a number of techniques which may be used to identify DNS names associated to a given IP address <code class="language-plaintext highlighter-rouge">x.y.z.t</code>.</p>
                
                <h4 id="dns-zone-transfers">DNS Zone Transfers</h4>
                
                <p>This technique has limited use nowadays, given the fact that zone transfers are largely not honored by DNS servers. However, it may be worth a try. First of all, testers must determine the name servers serving <code class="language-plaintext highlighter-rouge">x.y.z.t</code>. If a symbolic name is known for <code class="language-plaintext highlighter-rouge">x.y.z.t</code> (let it be <code class="language-plaintext highlighter-rouge">www.example.com</code>), its name servers can be determined by means of tools such as <code class="language-plaintext highlighter-rouge">nslookup</code>, <code class="language-plaintext highlighter-rouge">host</code>, or <code class="language-plaintext highlighter-rouge">dig</code>, by requesting DNS NS records.</p>
                
                <p>If no symbolic names are known for <code class="language-plaintext highlighter-rouge">x.y.z.t</code>, but the target definition contains at least a symbolic name, testers may try to apply the same process and query the name server of that name (hoping that <code class="language-plaintext highlighter-rouge">x.y.z.t</code> will be served as well by that name server). For example, if the target consists of the IP address <code class="language-plaintext highlighter-rouge">x.y.z.t</code> and the name <code class="language-plaintext highlighter-rouge">mail.example.com</code>, determine the name servers for domain <code class="language-plaintext highlighter-rouge">example.com</code>.</p>
                
                <p>The following example shows how to identify the name servers for <code class="language-plaintext highlighter-rouge">www.owasp.org</code> by using the <code class="language-plaintext highlighter-rouge">host</code> command:</p>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>host <span class="nt">-t</span> ns www.owasp.org
                www.owasp.org is an <span class="nb">alias </span><span class="k">for </span>owasp.org.
                owasp.org name server ns1.secure.net.
                owasp.org name server ns2.secure.net.
                </code></pre></div></div>
                
                <p>A zone transfer may now be requested to the name servers for domain <code class="language-plaintext highlighter-rouge">example.com</code>. If the tester is lucky, they will get back a list of the DNS entries for this domain. This will include the obvious <code class="language-plaintext highlighter-rouge">www.example.com</code> and the not-so-obvious <code class="language-plaintext highlighter-rouge">helpdesk.example.com</code> and <code class="language-plaintext highlighter-rouge">webmail.example.com</code> (and possibly others). Check all names returned by the zone transfer and consider all of those which are related to the target being evaluated.</p>
                
                <p>Trying to request a zone transfer for <code class="language-plaintext highlighter-rouge">owasp.org</code> from one of its name servers:</p>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>host <span class="nt">-l</span> www.owasp.org ns1.secure.net
                Using domain server:
                Name: ns1.secure.net
                Address: 192.220.124.10#53
                Aliases:
                
                Host www.owasp.org not found: 5<span class="o">(</span>REFUSED<span class="o">)</span>
                <span class="p">;</span> Transfer failed.
                </code></pre></div></div>
                
                <h4 id="dns-inverse-queries">DNS Inverse Queries</h4>
                
                <p>This process is similar to the previous one, but relies on inverse (PTR) DNS records. Rather than requesting a zone transfer, try setting the record type to PTR and issue a query on the given IP address. If the testers are lucky, they may get back a DNS name entry. This technique relies on the existence of IP-to-symbolic name maps, which is not guaranteed.</p>
                
                <h4 id="web-based-dns-searches">Web-based DNS Searches</h4>
                
                <p>This kind of search is akin to DNS zone transfer, but relies on web-based services that enable name-based searches on DNS. One such service is the <a href="https://searchdns.netcraft.com/?host">Netcraft Search DNS</a> service.  The tester may query for a list of names belonging to your domain of choice, such as <code class="language-plaintext highlighter-rouge">example.com</code>. Then they will check whether the names they obtained are pertinent to the target they are examining.</p>
                
                <h4 id="reverse-ip-services">Reverse-IP Services</h4>
                
                <p>Reverse-IP services are similar to DNS inverse queries, with the difference that the testers query a web-based application instead of a name server. There are a number of such services available. Since they tend to return partial (and often different) results, it is better to use multiple services to obtain a more comprehensive analysis.</p>
                
                <p><a href="https://www.domaintools.com/reverse-ip/">Domain Tools Reverse IP</a> (requires free membership)</p>
                
                <p><a href="https://bing.com">Bing</a>, syntax: <code class="language-plaintext highlighter-rouge">ip:x.x.x.x</code></p>
                
                <p><a href="http://whois.webhosting.info/">Webhosting Info</a>, syntax: <code class="language-plaintext highlighter-rouge">http://whois.webhosting.info/x.x.x.x</code></p>
                
                <p><a href="https://www.dnsstuff.com/">DNSstuff</a> (multiple services available)</p>
                
                <p><a href="https://web.archive.org/web/20190515092354/http://www.net-square.com/mspawn.html">Net Square</a> (multiple queries on domains and IP addresses, requires installation)</p>
                
                <p>The following example shows the result of a query to one of the above reverse-IP services to <code class="language-plaintext highlighter-rouge">216.48.3.18</code>, the IP address of www.owasp.org. Three additional non-obvious symbolic names mapping to the same address have been revealed.</p>

                <h4 id="googling">Googling</h4>
                
                <p>Following information gathering from the previous techniques, testers can rely on search engines to possibly refine and increment their analysis. This may yield evidence of additional symbolic names belonging to the target, or applications accessible via non-obvious URLs.</p>
                
                <p>For instance, considering the previous example regarding <code class="language-plaintext highlighter-rouge">www.owasp.org</code>, the tester could query Google and other search engines looking for information (hence, DNS names) related to the newly discovered domains of <code class="language-plaintext highlighter-rouge">webgoat.org</code>, <code class="language-plaintext highlighter-rouge">webscarab.com</code>, and <code class="language-plaintext highlighter-rouge">webscarab.net</code>.</p>
                
                <p>Googling techniques are explained in <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage">Testing: Spiders, Robots, and Crawlers</a>.</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li>DNS lookup tools such as <code class="language-plaintext highlighter-rouge">nslookup</code>, <code class="language-plaintext highlighter-rouge">dig</code> and similar.</li>
                  <li>Search engines (Google, Bing and other major search engines).</li>
                  <li>Specialized DNS-related web-based search service: see text.</li>
                  <li><a href="https://nmap.org/">Nmap</a></li>
                  <li><a href="https://www.tenable.com/products/nessus">Nessus Vulnerability Scanner</a></li>
                  <li><a href="https://www.cirt.net/nikto2">Nikto</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="info5Modal" tabindex="-1" role="dialog" aria-labelledby="info5ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="info5ModalLabel">WSTG-INFO-05 - Review Webpage Content for Information Leakage</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>It is very common, and even recommended, for programmers to include detailed comments and metadata on their source code. However, comments and metadata included into the HTML code might reveal internal information that should not be available to potential attackers. Comments and metadata review should be done in order to determine if any information is being leaked.</p>
                
                <p>For modern web apps, the use of client-Side JavaScript for the front-end is becoming more popular. Popular front-end construction technologies use client-side JavaScript like ReactJS, AngularJS, or Vue.  Similar to the comments and metadata in HTML code, many programmers also hardcod sensitive information in JavaScript variables on the front-end. Sensitive information can include (but is not limited to): Private API Keys (<em>e.g.</em> an unrestricted Google Map API Key), internal IP addresses, sensitive routes (<em>e.g.</em> route to hidden admin pages or functionality), or even credentials. This sensitive information can be leaked from such front-end JavaScript code. A review should be done in order to determine if any sensitive information leaked which could be used by attackers for abuse.</p>
                
                <p>For large web applications, performance issues are a big concern to programmers. Programmers have used different methods to optimize front-end performance, including Syntactically Awesome Style Sheets (SASS), Sassy CSS (SCSS), webpack, etc. Using these technologies, front-end code will sometimes become harder to understand and difficult to debug, and because of it, programmers often deploy source map files for debugging purposes. A “source map” is a special file that connects a minified/uglified version of an asset (CSS or JavaScript) to the original authored version. Programmers are still debating whether or not to bring source map files to the production environment. However, it is undeniable that source map files or files for debugging if released to the production environment will make their source more human-readable. It can make it easier for attackers to find vulnerabilities from the front-end or collect sensitive information from it. JavaScript code review should be done in order to determine if any debug files are exposed from the front-end. Depending on the context and sensitivity of the project, a security expert should decide whether the files should exist in the production environment or not.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Review webpage comments and metadata to find any information leakage.</li>
                  <li>Gather JavaScript files and review the JS code to better understand the application and to find any information leakage.</li>
                  <li>Identify if source map files or other front-end debug files exist.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="review-webpage-comments-and-metadata">Review webpage comments and metadata</h3>
                
                <p>HTML comments are often used by the developers to include debugging information about the application. Sometimes, they forget about the comments and they leave them in production environments. Testers should look for HTML comments which start with <code class="language-plaintext highlighter-rouge">&lt;!--</code>.</p>
                
                <p>Check HTML source code for comments containing sensitive information that can help the attacker gain more insight about the application. It might be SQL code, usernames and passwords, internal IP addresses, or debugging information.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"table2"</span><span class="nt">&gt;</span>
                  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col1"</span><span class="nt">&gt;</span>1<span class="nt">&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"col2"</span><span class="nt">&gt;</span>Mary<span class="nt">&lt;/div&gt;</span>
                  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col1"</span><span class="nt">&gt;</span>2<span class="nt">&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"col2"</span><span class="nt">&gt;</span>Peter<span class="nt">&lt;/div&gt;</span>
                  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col1"</span><span class="nt">&gt;</span>3<span class="nt">&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"col2"</span><span class="nt">&gt;</span>Joe<span class="nt">&lt;/div&gt;</span>
                
                <span class="c">&lt;!-- Query: SELECT id, name FROM app.users WHERE active='1' --&gt;</span>
                
                <span class="nt">&lt;/div&gt;</span>
                ...
                </code></pre></div></div>
                
                <p>The tester may even find something like this:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- Use the DB administrator password for testing:  f@keP@a$$w0rD --&gt;</span>
                </code></pre></div></div>
                
                <p>Check HTML version information for valid version numbers and Data Type Definition (DTD) URLs</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span>
                </code></pre></div></div>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">strict.dtd</code> – default strict DTD</li>
                  <li><code class="language-plaintext highlighter-rouge">loose.dtd</code> – loose DTD</li>
                  <li><code class="language-plaintext highlighter-rouge">frameset.dtd</code> – DTD for frameset documents</li>
                </ul>
                
                <p>Some <code class="language-plaintext highlighter-rouge">META</code> tags do not provide active attack vectors but instead allow an attacker to profile an application:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;META</span> <span class="na">name=</span><span class="s">"Author"</span> <span class="na">content=</span><span class="s">"Andrew Muller"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <p>A common (but not <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</a> compliant) <code class="language-plaintext highlighter-rouge">META</code> tag is <a href="https://en.wikipedia.org/wiki/Meta_refresh">Refresh</a>.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;META</span> <span class="na">http-equiv=</span><span class="s">"Refresh"</span> <span class="na">content=</span><span class="s">"15;URL=https://www.owasp.org/index.html"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <p>A common use for <code class="language-plaintext highlighter-rouge">META</code> tag is to specify keywords that a search engine may use to improve the quality of search results.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;META</span> <span class="na">name=</span><span class="s">"keywords"</span> <span class="na">lang=</span><span class="s">"en-us"</span> <span class="na">content=</span><span class="s">"OWASP, security, sunshine, lollipops"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <p>Although most web servers manage search engine indexing via the <code class="language-plaintext highlighter-rouge">robots.txt</code> file, it can also be managed by <code class="language-plaintext highlighter-rouge">META</code> tags. The tag below will advise robots to not index and not follow links on the HTML page containing the tag.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;META</span> <span class="na">name=</span><span class="s">"robots"</span> <span class="na">content=</span><span class="s">"none"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <p>The <a href="https://www.w3.org/PICS/">Platform for Internet Content Selection (PICS)</a> and <a href="https://www.w3.org/2007/powder/">Protocol for Web Description Resources (POWDER)</a> provide infrastructure for associating metadata with Internet content.</p>
                
                <h3 id="identifying-javascript-code-and-gathering-javascript-files">Identifying JavaScript Code and Gathering JavaScript Files</h3>
                
                <p>Programmers often hardcode sensitive information with JavaScript variables on the front-end. Testers should check HTML source code and look for JavaScript code between <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;/script&gt;</code> tags. Testers should also identify external JavaScript files to review the code (JavaScript files have the file extension <code class="language-plaintext highlighter-rouge">.js</code> and name of the JavaScript file usually put in the <code class="language-plaintext highlighter-rouge">src</code> (source) attribute of a <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tag).</p>
                
                <p>Check JavaScript code for any sensitive information leaks which could be used by attackers to further abuse or manipulate the system. Look for values such as: API keys, internal IP addresses, sensitive routes, or credentials. For example:</p>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myS3Credentials</span> <span class="o">=</span> <span class="p">{</span>
                  <span class="na">accessKeyId</span><span class="p">:</span> <span class="nx">config</span><span class="p">(</span><span class="dl">'</span><span class="s1">AWSS3AccessKeyID</span><span class="dl">'</span><span class="p">),</span>
                  <span class="na">secretAcccessKey</span><span class="p">:</span> <span class="nx">config</span><span class="p">(</span><span class="dl">'</span><span class="s1">AWSS3SecretAccessKey</span><span class="dl">'</span><span class="p">),</span>
                <span class="p">};</span>
                </code></pre></div></div>
                
                <p>The tester may even find something like this:</p>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">conString</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">tcp://postgres:1234@localhost/postgres</span><span class="dl">"</span><span class="p">;</span>
                </code></pre></div></div>
                
                <p>When an API Key is found, testers can check if the API Key restrictions are set per service or by IP, HTTP referrer, application, SDK, etc.</p>
                
                <p>For example, if testers found a Google Map API Key, they can check if this API Key is restricted by IP or restricted only per the Google Map APIs. If the Google API Key is restricted only per the Google Map APIs, attackers can still use that API Key to query unrestricted Google Map APIs and the application owner must to pay for that.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
                <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"application/json"</span><span class="nt">&gt;</span>
                <span class="p">...</span>
                <span class="p">{</span><span class="dl">"</span><span class="s2">GOOGLE_MAP_API_KEY</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">AIzaSyDUEBnKgwiqMNpDplT6ozE4Z0XxuAbqDi4</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">RECAPTCHA_KEY</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">6LcPscEUiAAAAHOwwM3fGvIx9rsPYUq62uRhGjJ0</span><span class="dl">"</span><span class="p">}</span>
                <span class="p">...</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>In some cases, testers may find sensitive routes from JavaScript code, such as links to internal or hidden admin pages.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"application/json"</span><span class="nt">&gt;</span>
                <span class="p">...</span>
                <span class="dl">"</span><span class="s2">runtimeConfig</span><span class="dl">"</span><span class="p">:{</span><span class="dl">"</span><span class="s2">BASE_URL_VOUCHER_API</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">https://staging-voucher.victim.net/api</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">BASE_BACKOFFICE_API</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">https://10.10.10.2/api</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">ADMIN_PAGE</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">/hidden_administrator</span><span class="dl">"</span><span class="p">}</span>
                <span class="p">...</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <h3 id="identifying-source-map-files">Identifying Source Map Files</h3>
                
                <p>Source map files will usually be loaded when DevTools open. Testers can also find source map files by adding the “.map” extension after the extension of each external JavaScript file. For example, if a tester sees a <code class="language-plaintext highlighter-rouge">/static/js/main.chunk.js</code> file, they can then check for its source map file by visiting <code class="language-plaintext highlighter-rouge">/static/js/main.chunk.js.map</code>.</p>
                
                <h4 id="black-box-testing">Black-Box Testing</h4>
                
                <p>Check source map files for any sensitive information that can help the attacker gain more insight about the application. For example:</p>
                
                <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
                  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
                  </span><span class="nl">"file"</span><span class="p">:</span><span class="w"> </span><span class="s2">"static/js/main.chunk.js"</span><span class="p">,</span><span class="w">
                  </span><span class="nl">"sources"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                    </span><span class="s2">"/home/sysadmin/cashsystem/src/actions/index.js"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"/home/sysadmin/cashsystem/src/actions/reportAction.js"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"/home/sysadmin/cashsystem/src/actions/cashoutAction.js"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"/home/sysadmin/cashsystem/src/actions/userAction.js"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"..."</span><span class="w">
                  </span><span class="p">],</span><span class="w">
                  </span><span class="s2">"..."</span><span class="w">
                </span><span class="p">}</span><span class="w">
                </span></code></pre></div></div>
                
                <p>When websites load source map files, the front-end source code will become readable and easier to debug.</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://www.gnu.org/software/wget/wget.html">Wget</a></li>
                  <li>Browser “view source” function</li>
                  <li>Eyeballs</li>
                  <li><a href="https://curl.haxx.se/">Curl</a></li>
                  <li><a href="https://portswigger.net/burp">Burp Suite</a></li>
                  <li><a href="https://github.com/tomnomnom/waybackurls">Waybackurls</a></li>
                  <li><a href="https://github.com/ozguralp/gmapsapiscanner/">Google Maps API Scanner</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://github.com/streaak/keyhacks">KeyHacks</a></li>
                </ul>
                
                <h3 id="whitepapers">Whitepapers</h3>
                
                <ul>
                  <li><a href="https://www.w3.org/TR/1999/REC-html401-19991224">HTML version 4.01</a></li>
                  <li><a href="https://www.w3.org/TR/2010/REC-xhtml-basic-20101123/">XHTML</a></li>
                  <li><a href="https://www.w3.org/TR/html5/">HTML version 5</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="info6Modal" tabindex="-1" role="dialog" aria-labelledby="info6ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="info6ModalLabel">WSTG-INFO-06 - Identify application entry points</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Enumerating the application and its attack surface is a key precursor before any thorough testing can be undertaken, as it allows the tester to identify likely areas of weakness. This section aims to help identify and map out areas within the application that should be investigated once enumeration and mapping have been completed.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify possible entry and injection points through request and response analysis.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Before any testing begins, the tester should always get a good understanding of the application and how the user and browser communicates with it. As the tester walks through the application, they should pay attention to all HTTP requests as well as every parameter and form field that is passed to the application. They should pay special attention to when GET requests are used and when POST requests are used to pass parameters to the application. In addition, they also need to pay attention to when other methods for RESTful services are used.</p>
                
                <p>Note that in order to see the parameters sent in the body of requests such as a POST request, the tester may want to use a tool such as an intercepting proxy (See <a href="#tools">tools</a>). Within the POST request, the tester should also make special note of any hidden form fields that are being passed to the application, as these usually contain sensitive information, such as state information, quantity of items, the price of items, that the developer never intended for anyone to see or change.</p>
                
                <p>In the author’s experience, it has been very useful to use an intercepting proxy and a spreadsheet for this stage of testing. The proxy will keep track of every request and response between the tester and the application as they explore it. Additionally, at this point, testers usually trap every request and response so that they can see exactly every header, parameter, etc. that is being passed to the application and what is being returned. This can be quite tedious at times, especially on large interactive sites (think of a banking application). However, experience will show what to look for and this phase can be significantly reduced.</p>
                
                <p>As the tester walks through the application, they should take note of any interesting parameters in the URL, custom headers, or body of the requests/responses, and save them in a spreadsheet. The spreadsheet should include the page requested (it might be good to also add the request number from the proxy, for future reference), the interesting parameters, the type of request (GET, POST, etc), if access is authenticated/unauthenticated, if TLS is used, if it’s part of a multi-step process, if WebSockers are used, and any other relevant notes. Once they have every area of the application mapped out, then they can go through the application and test each of the areas that they have identified and make notes for what worked and what didn’t work. The rest of this guide will identify how to test each of these areas of interest, but this section must be undertaken before any of the actual testing can commence.</p>
                
                <p>Below are some points of interests for all requests and responses. Within the requests section, focus on the GET and POST methods, as these appear the majority of the requests. Note that other methods, such as PUT and DELETE, can be used. Often, these more rare requests, if allowed, can expose vulnerabilities. There is a special section in this guide dedicated for testing these HTTP methods.</p>
                
                <h3 id="requests">Requests</h3>
                
                <ul>
                  <li>Identify where GETs are used and where POSTs are used.</li>
                  <li>Identify all parameters used in a POST request (these are in the body of the request).</li>
                  <li>Within the POST request, pay special attention to any hidden parameters. When a POST is sent all the form fields (including hidden parameters) will be sent in the body of the HTTP message to the application. These typically aren’t seen unless a proxy or view the HTML source code is used. In addition, the next page shown, its data, and the level of access can all be different depending on the value of the hidden parameter(s).</li>
                  <li>Identify all parameters used in a GET request (i.e., URL), in particular the query string (usually after a ? mark).</li>
                  <li>Identify all the parameters of the query string. These usually are in a pair format, such as <code class="language-plaintext highlighter-rouge">foo=bar</code>. Also note that many parameters can be in one query string such as separated by a <code class="language-plaintext highlighter-rouge">&amp;</code>, <code class="language-plaintext highlighter-rouge">\~</code>, <code class="language-plaintext highlighter-rouge">:</code>, or any other special character or encoding.</li>
                  <li>A special note when it comes to identifying multiple parameters in one string or within a POST request is that some or all of the parameters will be needed to execute the attacks. The tester needs to identify all of the parameters (even if encoded or encrypted) and identify which ones are processed by the application. Later sections of the guide will identify how to test these parameters. At this point, just make sure each one of them is identified.</li>
                  <li>Also pay attention to any additional or custom type headers not typically seen (such as <code class="language-plaintext highlighter-rouge">debug: false</code>).</li>
                </ul>
                
                <h3 id="responses">Responses</h3>
                
                <ul>
                  <li>Identify where new cookies are set (<code class="language-plaintext highlighter-rouge">Set-Cookie</code> header), modified, or added to.</li>
                  <li>Identify where there are any redirects (3xx HTTP status code), 400 status codes, in particular 403 Forbidden, and 500 internal server errors during normal responses (i.e., unmodified requests).</li>
                  <li>Also note where any interesting headers are used. For example, <code class="language-plaintext highlighter-rouge">Server: BIG-IP</code> indicates that the site is load balanced. Thus, if a site is load balanced and one server is incorrectly configured, then the tester might have to make multiple requests to access the vulnerable server, depending on the type of load balancing used.</li>
                </ul>
                
                <h3 id="black-box-testing">Black-Box Testing</h3>
                
                <h4 id="testing-for-application-entry-points">Testing for Application Entry Points</h4>
                
                <p>The following are two examples on how to check for application entry points.</p>
                
                <h4 id="example-1">Example 1</h4>
                
                <p>This example shows a GET request that would purchase an item from an online shopping application.</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET&nbsp;/shoppingApp/buyme.asp?CUSTOMERID=100&amp;ITEM=z101a&amp;PRICE=62.50&amp;IP=x.x.x.x HTTP/1.1
                Host:&nbsp;x.x.x.x
                Cookie:&nbsp;SESSIONID=Z29vZCBqb2IgcGFkYXdhIG15IHVzZXJuYW1lIGlzIGZvbyBhbmQgcGFzc3dvcmQgaXMgYmFy
                </span></code></pre></div></div>
                
                <blockquote>
                  <p>Here the tester would note all the parameters of the request such as CUSTOMERID, ITEM, PRICE, IP, and the Cookie (which could just be encoded parameters or used for session state).</p>
                </blockquote>
                
                <h4 id="example-2">Example 2</h4>
                
                <p>This example shows a POST request that would log you into an application.</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">POST&nbsp;/KevinNotSoGoodApp/authenticate.asp?service=login HTTP/1.1
                Host:&nbsp;x.x.x.x
                Cookie:&nbsp;SESSIONID=dGhpcyBpcyBhIGJhZCBhcHAgdGhhdCBzZXRzIHByZWRpY3RhYmxlIGNvb2tpZXMgYW5kIG1pbmUgaXMgMTIzNA==;CustomCookie=00my00trusted00ip00is00x.x.x.x00
                
                user=admin&amp;pass=pass123&amp;debug=true&amp;fromtrustIP=true
                </span></code></pre></div></div>
                
                <blockquote>
                  <p>In this example the tester would note all the parameters as they have before, however the majority of the parameters are passed in the body of the request and not in the URL. Additionally, note that there is a custom HTTP header (<code class="language-plaintext highlighter-rouge">CustomCookie</code>) being used.</p>
                </blockquote>
                
                <h3 id="gray-box-testing">Gray-Box Testing</h3>
                
                <p>Testing for application entry points via a gray-box methodology would consist of everything already identified above with one addition. In cases where there are external sources from which the application receives data and processes it (such as SNMP traps, syslog messages, SMTP, or SOAP messages from other servers) a meeting with the application developers could identify any functions that would accept or expect user input and how they are formatted. For example, the developer could help in understanding how to formulate a correct SOAP request that the application would accept and where the web service resides (if the web service or any other function hasn’t already been identified during the black-box testing).</p>
                
                <h4 id="owasp-attack-surface-detector">OWASP Attack Surface Detector</h4>
                
                <p>The Attack Surface Detector (ASD) tool investigates the source code and uncovers the endpoints of a web application, the parameters these endpoints accept, and the data type of those parameters. This includes the unlinked endpoints a spider will not be able to find, or optional parameters totally unused in client-side code. It also has the capability to calculate the changes in attack surface between two versions of an application.</p>
                
                <p>The Attack Surface Detector is available as a plugin to both ZAP and Burp Suite, and a command-line tool is also available. The command-line tool exports the attack surface as a JSON output, which can then be used by the ZAP and Burp Suite plugin. This is helpful for cases where the source code is not provided to the penetration tester directly. For example, the penetration tester can get the json output file from a customer who does not want to provide the source code itself.</p>
                
                <h5 id="how-to-use">How to Use</h5>
                
                <p>The CLI jar file is available for download from <a href="https://github.com/secdec/attack-surface-detector-cli/releases">https://github.com/secdec/attack-surface-detector-cli/releases</a>.</p>
                
                <p>You can run the following command for ASD to identify endpoints from the source code of the target web application.</p>
                
                <p><code class="language-plaintext highlighter-rouge">java -jar attack-surface-detector-cli-1.3.5.jar &lt;source-code-path&gt; [flags]</code></p>
                
                <p>Here is an example of running the command against <a href="https://github.com/OWASP/railsgoat">OWASP RailsGoat</a>.</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ java -jar attack-surface-detector-cli-1.3.5.jar railsgoat/
                Beginning endpoint detection for '&lt;...&gt;/railsgoat' with 1 framework types
                Using framework=RAILS
                [0] GET: /login (0 variants): PARAMETERS={url=name=url, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_contro
                ller.rb (lines '6'-'9')
                [1] GET: /logout (0 variants): PARAMETERS={}; FILE=/app/controllers/sessions_controller.rb (lines '33'-'37')
                [2] POST: /forgot_password (0 variants): PARAMETERS={email=name=email, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/
                password_resets_controller.rb (lines '29'-'38')
                [3] GET: /password_resets (0 variants): PARAMETERS={token=name=token, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/p
                assword_resets_controller.rb (lines '19'-'27')
                [4] POST: /password_resets (0 variants): PARAMETERS={password=name=password, paramType=QUERY_STRING, dataType=STRING, user=name=user, paramType=QUERY_STRING, dataType=STRING, confirm_password=name=confirm_password, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/password_resets_controller.rb (lines '5'-'17')
                [5] GET: /sessions/new (0 variants): PARAMETERS={url=name=url, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_controller.rb (lines '6'-'9')
                [6] POST: /sessions (0 variants): PARAMETERS={password=name=password, paramType=QUERY_STRING, dataType=STRING, user_id=name=user_id, paramType=SESSION, dataType=STRING, remember_me=name=remember_me, paramType=QUERY_STRING, dataType=STRING, url=name=url, paramType=QUERY_STRING, dataType=STRING, email=name=email, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_controller.rb (lines '11'-'31')
                [7] DELETE: /sessions/{id} (0 variants): PARAMETERS={}; FILE=/app/controllers/sessions_controller.rb (lines '33'-'37')
                [8] GET: /users (0 variants): PARAMETERS={}; FILE=/app/controllers/api/v1/users_controller.rb (lines '9'-'11')
                [9] GET: /users/{id} (0 variants): PARAMETERS={}; FILE=/app/controllers/api/v1/users_controller.rb (lines '13'-'15')
                ... snipped ...
                [38] GET: /api/v1/mobile/{id} (0 variants): PARAMETERS={id=name=id, paramType=QUERY_STRING, dataType=STRING, class=name=class, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/api/v1/mobile_controller.rb (lines '8'-'13')
                [39] GET: / (0 variants): PARAMETERS={url=name=url, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_controller.rb (lines '6'-'9')
                Generated 40 distinct endpoints with 0 variants for a total of 40 endpoints
                Successfully validated serialization for these endpoints
                0 endpoints were missing code start line
                0 endpoints were missing code end line
                0 endpoints had the same code start and end line
                Generated 36 distinct parameters
                Generated 36 total parameters
                - 36/36 have their data type
                - 0/36 have a list of accepted values
                - 36/36 have their parameter type
                --- QUERY_STRING: 35
                --- SESSION: 1
                Finished endpoint detection for '&lt;...&gt;/railsgoat'
                ----------
                -- DONE --
                0 projects had duplicate endpoints
                Generated 40 distinct endpoints
                Generated 40 total endpoints
                Generated 36 distinct parameters
                Generated 36 total parameters
                1/1 projects had endpoints generated
                To enable logging include the -debug argument
                </code></pre></div></div>
                
                <p>You can also generate a JSON output file using the <code class="language-plaintext highlighter-rouge">-json</code> flag, which can be used by the plugin to both ZAP and Burp Suite. See the following links for more details.</p>
                
                <ul>
                  <li><a href="https://github.com/secdec/attack-surface-detector-zap/wiki">Home of ASD Plugin for OWASP ZAP</a></li>
                  <li><a href="https://github.com/secdec/attack-surface-detector-burp/wiki">Home of ASD Plugin for PortSwigger Burp</a></li>
                </ul>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://www.zaproxy.org/">OWASP Zed Attack Proxy (ZAP)</a></li>
                  <li><a href="https://www.portswigger.net/burp/">Burp Suite</a></li>
                  <li><a href="https://www.telerik.com/fiddler">Fiddler</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://tools.ietf.org/html/rfc2616">RFC 2616 – Hypertext Transfer Protocol – HTTP 1.1</a></li>
                  <li><a href="https://owasp.org/www-project-attack-surface-detector/">OWASP Attack Surface Detector</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="info7Modal" tabindex="-1" role="dialog" aria-labelledby="info7ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="info7ModalLabel">WSTG-INFO-07 - Map execution paths through application</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Before commencing security testing, understanding the structure of the application is paramount. Without a thorough understanding of the layout of the application, it is unlikely that it will be tested thoroughly.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Map the target application and understand the principal workflows.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>In black-box testing it is extremely difficult to test the entire codebase. Not just because the tester has no view of the code paths through the application, but even if they did, to test all code paths would be very time consuming. One way to reconcile this is to document what code paths were discovered and tested.</p>
                
                <p>There are several ways to approach the testing and measurement of code coverage:</p>
                
                <ul>
                  <li><strong>Path</strong> - test each of the paths through an application that includes combinatorial and boundary value analysis testing for each decision path. While this approach offers thoroughness, the number of testable paths grows exponentially with each decision branch.</li>
                  <li><strong>Data Flow (or Taint Analysis)</strong> - tests the assignment of variables via external interaction (normally users). Focuses on mapping the flow, transformation and use of data throughout an application.</li>
                  <li><strong>Race</strong> - tests multiple concurrent instances of the application manipulating the same data.</li>
                </ul>
                
                <p>The trade off as to what method is used and to what degree each method is used should be negotiated with the application owner. Simpler approaches could also be adopted, including asking the application owner what functions or code sections they are particularly concerned about and how those code segments can be reached.</p>
                
                <p>To demonstrate code coverage to the application owner, the tester can start with a spreadsheet and document all the links discovered by spidering the application (either manually or automatically). Then the tester can look more closely at decision points in the application and investigate how many significant code paths are discovered. These should then be documented in the spreadsheet with URLs, prose and screenshot descriptions of the paths discovered.</p>
                
                <h3 id="code-review">Code Review</h3>
                
                <p>Ensuring sufficient code coverage for the application owner is far easier with gray-box and white-box approach to testing. Information solicited by and provided to the tester will ensure the minimum requirements for code coverage are met.</p>
                
                <p>Many modern Dynamic Application Security Testing (DAST) tools facilitate the use of a web server agent or could be paired with a third-party agent to monitor web application coverage specifics.</p>
                
                <h3 id="automatic-spidering">Automatic Spidering</h3>
                
                <p>The automatic spider is a tool used to automatically discover new resources (URLs) on a particular website. It begins with a list of URLs to visit, called the seeds, which depends on how the Spider is started. While there are a lot of Spidering tools, the following example uses the <a href="https://github.com/zaproxy/zaproxy">Zed Attack Proxy (ZAP)</a>:</p>
                
                
                <p><a href="https://github.com/zaproxy/zaproxy">ZAP</a> offers various automatic spidering options, which can leveraged based on the tester’s needs:</p>
                
                <ul>
                  <li><a href="https://www.zaproxy.org/docs/desktop/start/features/spider/">Spider</a></li>
                  <li><a href="https://www.zaproxy.org/docs/desktop/addons/ajax-spider/">AJAX Spider</a></li>
                  <li><a href="https://www.zaproxy.org/docs/desktop/addons/openapi-support/">OpenAPI Support</a></li>
                </ul>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://github.com/zaproxy/zaproxy">Zed Attack Proxy (ZAP)</a></li>
                  <li><a href="https://en.wikipedia.org/wiki/List_of_spreadsheet_software">List of spreadsheet software</a></li>
                  <li><a href="https://en.wikipedia.org/wiki/List_of_concept-_and_mind-mapping_software">Diagramming software</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://en.wikipedia.org/wiki/Code_coverage">Code Coverage</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/07-Map_Execution_Paths_Through_Application" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="info8Modal" tabindex="-1" role="dialog" aria-labelledby="info8ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="info8ModalLabel">WSTG-INFO-08 - Fingerprint Web Application Framework</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and Open Source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target that is entirely or partly dependent on these well known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most of the web frameworks have several markers in those locations which help an attacker or tester to recognize them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Fingerprint the components being used by the web applications.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="black-box-testing">Black-Box Testing</h3>
                
                <p>There are several common locations to consider in order to identify frameworks or components:</p>
                
                <ul>
                  <li>HTTP headers</li>
                  <li>Cookies</li>
                  <li>HTML source code</li>
                  <li>Specific files and folders</li>
                  <li>File extensions</li>
                  <li>Error messages</li>
                </ul>
                
                <h4 id="http-headers">HTTP Headers</h4>
                
                <p>The most basic form of identifying a web framework is to look at the <code class="language-plaintext highlighter-rouge">X-Powered-By</code> field in the HTTP response header. Many tools can be used to fingerprint a target, the simplest one is netcat.</p>
                
                <p>Consider the following HTTP Request-Response:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc 127.0.0.1 80
                HEAD / HTTP/1.0
                
                HTTP/1.1 200 OK
                Server: nginx/1.0.14
                [...]
                X-Powered-By: Mono
                </code></pre></div></div>
                
                <p>From the <code class="language-plaintext highlighter-rouge">X-Powered-By</code> field, we understand that the web application framework is likely to be <code class="language-plaintext highlighter-rouge">Mono</code>. However, although this approach is simple and quick, this methodology doesn’t work in 100% of cases. It is possible to easily disable <code class="language-plaintext highlighter-rouge">X-Powered-By</code> header by a proper configuration. There are also several techniques that allow a web site to obfuscate HTTP headers (see an example in the <a href="#Remediation">Remediation</a> section). In the example above we can also note a specific version of <code class="language-plaintext highlighter-rouge">nginx</code> is being used to serve the content.</p>
                
                <p>So in the same example the tester could either miss the <code class="language-plaintext highlighter-rouge">X-Powered-By</code> header or obtain an answer like the following:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
                Server: nginx/1.0.14
                Date: Sat, 07 Sep 2013 08:19:15 GMT
                Content-Type: text/html;charset=ISO-8859-1
                Connection: close
                Vary: Accept-Encoding
                X-Powered-By: Blood, sweat and tears
                </code></pre></div></div>
                
                <p>Sometimes there are more HTTP-headers that point at a certain framework. In the following example, according to the information from HTTP-request, one can see that <code class="language-plaintext highlighter-rouge">X-Powered-By</code> header contains PHP version. However, the <code class="language-plaintext highlighter-rouge">X-Generator</code> header points out the used framework is actually <code class="language-plaintext highlighter-rouge">Swiftlet</code>, which helps a penetration tester to expand their attack vectors. When performing fingerprinting, carefully inspect every HTTP-header for such leaks.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
                Server: nginx/1.4.1
                Date: Sat, 07 Sep 2013 09:22:52 GMT
                Content-Type: text/html
                Connection: keep-alive
                Vary: Accept-Encoding
                X-Powered-By: PHP/5.4.16-1~dotdeb.1
                Expires: Thu, 19 Nov 1981 08:52:00 GMT
                Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
                Pragma: no-cache
                X-Generator: Swiftlet
                </code></pre></div></div>
                
                <h4 id="cookies">Cookies</h4>
                
                <p>Another similar and somewhat more reliable way to determine the current web framework are framework-specific cookies.</p>
            
                
                <p>The cookie <code class="language-plaintext highlighter-rouge">CAKEPHP</code> has automatically been set, which gives information about the framework being used. A list of common cookie names is presented in <a href="#Cookies">Cookies</a> section. Limitations still exist in relying on this identification mechanism - it is possible to change the name of cookies. For example, for the selected <code class="language-plaintext highlighter-rouge">CakePHP</code> framework this could be done via the following configuration (excerpt from <code class="language-plaintext highlighter-rouge">core.php</code>):</p>
                
                <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/**
                * The name of CakePHP's session cookie.
                *
                * Note the guidelines for Session names states: "The session name references
                * the session id in cookies and URLs. It should contain only alphanumeric
                * characters."
                *  http://php.net/session_name
                */</span>
                <span class="nc">Configure</span><span class="o">::</span><span class="nf">write</span><span class="p">(</span><span class="s1">'Session.cookie'</span><span class="p">,</span> <span class="s1">'CAKEPHP'</span><span class="p">);</span>
                </code></pre></div></div>
                
                <p>However, these changes are less likely to be made than changes to the <code class="language-plaintext highlighter-rouge">X-Powered-By</code> header, so this approach to identification can be considered as more reliable.</p>
                
                <h4 id="html-source-code">HTML Source Code</h4>
                
                <p>This technique is based on finding certain patterns in the HTML page source code. Often one can find a lot of information which helps a tester to recognize a specific component. One of the common markers are HTML comments that directly lead to framework disclosure. More often certain framework-specific paths can be found, i.e. links to framework-specific CSS or JS folders. Finally, specific script variables might also point to a certain framework.</p>
                
                <p>From the screenshot below one can easily learn the used framework and its version by the mentioned markers. The comment, specific paths and script variables can all help an attacker to quickly determine an instance of ZK framework.</p>
                
                
                <p>Frequently such information is positioned in the <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> section of HTTP responses, in <code class="language-plaintext highlighter-rouge">&lt;meta&gt;</code> tags, or at the end of the page. Nevertheless, entire responses should be analyzed since it can be useful for other purposes such as inspection of other useful comments and hidden fields. Sometimes, web developers do not care much about hiding information about the frameworks or components used. It is still possible to stumble upon something like this at the bottom of the page:</p>
            
                
                <h3 id="specific-files-and-folders">Specific Files and Folders</h3>
                
                <p>There is another approach which greatly helps an attacker or tester to identify applications or components with high accuracy. Every web component has its own specific file and folder structure on the server. It has been noted that one can see the specific path from the HTML page source but sometimes they are not explicitly presented there and still reside on the server.</p>
                
                <p>In order to uncover them a technique known as forced browsing or “dirbusting” is used. Dirbusting is brute forcing a target with known folder and filenames and monitoring HTTP-responses to enumerate server content. This information can be used both for finding default files and attacking them, and for fingerprinting the web application. Dirbusting can be done in several ways, the example below shows a successful dirbusting attack against a WordPress-powered target with the help of defined list and intruder functionality of Burp Suite.</p>
            
                
            <p>We can see that for some WordPress-specific folders (for instance, <code class="language-plaintext highlighter-rouge">/wp-includes/</code>, <code class="language-plaintext highlighter-rouge">/wp-admin/</code> and <code class="language-plaintext highlighter-rouge">/wp-content/</code>) HTTP responses are 403 (Forbidden), 302 (Found, redirection to&nbsp;<code class="language-plaintext highlighter-rouge">wp-login.php</code>), and 200 (OK) respectively. This is a good indicator that the target is WordPress powered. The same way it is possible to dirbust different application plugin folders and their versions. In the screenshot below one can see a typical CHANGELOG file of a Drupal plugin, which provides information on the application being used and discloses a vulnerable plugin version.</p>

            <p>Tip: before starting with dirbusting, check the <code class="language-plaintext highlighter-rouge">robots.txt</code> file first. Sometimes application specific folders and other sensitive information can be found there as well. An example of such a <code class="language-plaintext highlighter-rouge">robots.txt</code> file is presented on a screenshot below.</p>
                
                
                <p>Specific files and folders are different for each specific application. If the identified application or component is Open Source there may be value in setting up a temporary installation during penetration tests in order to gain a better understanding of what infrastructure or functionality is presented, and what files might be left on the server. However, several good file lists already exist; one good example is <a href="https://github.com/fuzzdb-project/fuzzdb">FuzzDB wordlists of predictable files/folders</a>.</p>
                
                <h4 id="file-extensions">File Extensions</h4>
                
                <p>URLs may include file extensions, which can also help to identify the web platform or technology.</p>
                
                <p>For example, the OWASP wiki used PHP:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://wiki.owasp.org/index.php?title=Fingerprint_Web_Application_Framework&amp;action=edit&amp;section=4
                </code></pre></div></div>
                
                <p>Here are some common web file extensions and associated technologies:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">.php</code> – PHP</li>
                  <li><code class="language-plaintext highlighter-rouge">.aspx</code> – Microsoft ASP.NET</li>
                  <li><code class="language-plaintext highlighter-rouge">.jsp</code> – Java Server Pages</li>
                </ul>
                
                <h4 id="error-messages">Error Messages</h4>
                
                <p>As can be seen in the following screenshot the listed file system path points to use of WordPress (<code class="language-plaintext highlighter-rouge">wp-content</code>). Also testers should be aware that WordPress is PHP based (<code class="language-plaintext highlighter-rouge">functions.php</code>).</p>
            
                
                <h2 id="common-identifiers">Common Identifiers</h2>
                
                <h3 id="cookies-1">Cookies</h3>
                
                <table class="table table-bordered">
                  <thead>
                    <tr>
                      <th>Framework</th>
                      <th>Cookie name</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>Zope</td>
                      <td>zope3</td>
                    </tr>
                    <tr>
                      <td>CakePHP</td>
                      <td>cakephp</td>
                    </tr>
                    <tr>
                      <td>Kohana</td>
                      <td>kohanasession</td>
                    </tr>
                    <tr>
                      <td>Laravel</td>
                      <td>laravel_session</td>
                    </tr>
                    <tr>
                      <td>phpBB</td>
                      <td>phpbb3_</td>
                    </tr>
                    <tr>
                      <td>WordPress</td>
                      <td>wp-settings</td>
                    </tr>
                    <tr>
                      <td>1C-Bitrix</td>
                      <td>BITRIX_</td>
                    </tr>
                    <tr>
                      <td>AMPcms</td>
                      <td>AMP</td>
                    </tr>
                    <tr>
                      <td>Django CMS</td>
                      <td>django</td>
                    </tr>
                    <tr>
                      <td>DotNetNuke</td>
                      <td>DotNetNukeAnonymous</td>
                    </tr>
                    <tr>
                      <td>e107</td>
                      <td>e107_tz</td>
                    </tr>
                    <tr>
                      <td>EPiServer</td>
                      <td>EPiTrace, EPiServer</td>
                    </tr>
                    <tr>
                      <td>Graffiti CMS</td>
                      <td>graffitibot</td>
                    </tr>
                    <tr>
                      <td>Hotaru CMS</td>
                      <td>hotaru_mobile</td>
                    </tr>
                    <tr>
                      <td>ImpressCMS</td>
                      <td>ICMSession</td>
                    </tr>
                    <tr>
                      <td>Indico</td>
                      <td>MAKACSESSION</td>
                    </tr>
                    <tr>
                      <td>InstantCMS</td>
                      <td>InstantCMS[logdate]</td>
                    </tr>
                    <tr>
                      <td>Kentico CMS</td>
                      <td>CMSPreferredCulture</td>
                    </tr>
                    <tr>
                      <td>MODx</td>
                      <td>SN4[12symb]</td>
                    </tr>
                    <tr>
                      <td>TYPO3</td>
                      <td>fe_typo_user</td>
                    </tr>
                    <tr>
                      <td>Dynamicweb</td>
                      <td>Dynamicweb</td>
                    </tr>
                    <tr>
                      <td>LEPTON</td>
                      <td>lep[some_numeric_value]+sessionid</td>
                    </tr>
                    <tr>
                      <td>Wix</td>
                      <td>Domain=.wix.com</td>
                    </tr>
                    <tr>
                      <td>VIVVO</td>
                      <td>VivvoSessionId</td>
                    </tr>
                  </tbody>
                </table>
                
                <h3 id="html-source-code-1">HTML Source Code</h3>
                
                <table class="table table-bordered">
                  <thead>
                    <tr>
                      <th>Application</th>
                      <th>Keyword</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>WordPress</td>
                      <td><code class="language-plaintext highlighter-rouge">&lt;meta name="generator" content="WordPress 3.9.2" /&gt;</code></td>
                    </tr>
                    <tr>
                      <td>phpBB</td>
                      <td><code class="language-plaintext highlighter-rouge">&lt;body id="phpbb"</code></td>
                    </tr>
                    <tr>
                      <td>Mediawiki</td>
                      <td><code class="language-plaintext highlighter-rouge">&lt;meta name="generator" content="MediaWiki 1.21.9" /&gt;</code></td>
                    </tr>
                    <tr>
                      <td>Joomla</td>
                      <td><code class="language-plaintext highlighter-rouge">&lt;meta name="generator" content="Joomla! - Open Source Content Management" /&gt;</code></td>
                    </tr>
                    <tr>
                      <td>Drupal</td>
                      <td><code class="language-plaintext highlighter-rouge">&lt;meta name="Generator" content="Drupal 7 (http://drupal.org)" /&gt;</code></td>
                    </tr>
                    <tr>
                      <td>DotNetNuke</td>
                      <td><code class="language-plaintext highlighter-rouge">DNN Platform - [http://www.dnnsoftware.com](http://www.dnnsoftware.com)</code></td>
                    </tr>
                  </tbody>
                </table>
                
                <h4 id="general-markers">General Markers</h4>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">%framework_name%</code></li>
                  <li><code class="language-plaintext highlighter-rouge">powered by</code></li>
                  <li><code class="language-plaintext highlighter-rouge">built upon</code></li>
                  <li><code class="language-plaintext highlighter-rouge">running</code></li>
                </ul>
                
                <h4 id="specific-markers">Specific Markers</h4>
                
                <table class="table table-bordered">
                  <thead>
                    <tr>
                      <th>Framework</th>
                      <th>Keyword</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>Adobe ColdFusion</td>
                      <td><code class="language-plaintext highlighter-rouge">&lt;!-- START headerTags.cfm</code></td>
                    </tr>
                    <tr>
                      <td>Microsoft ASP.NET</td>
                      <td><code class="language-plaintext highlighter-rouge">__VIEWSTATE</code></td>
                    </tr>
                    <tr>
                      <td>ZK</td>
                      <td><code class="language-plaintext highlighter-rouge">&lt;!-- ZK</code></td>
                    </tr>
                    <tr>
                      <td>Business Catalyst</td>
                      <td><code class="language-plaintext highlighter-rouge">&lt;!-- BC_OBNW --&gt;</code></td>
                    </tr>
                    <tr>
                      <td>Indexhibit</td>
                      <td><code class="language-plaintext highlighter-rouge">ndxz-studio</code></td>
                    </tr>
                  </tbody>
                </table>
                
                <h2 id="remediation">Remediation</h2>
                
                <p>While efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc. such efforts boil down to “security through obscurity”. System owners/admins should recognize that those efforts only slow down the most basic of adversaries. The time/effort may be better used on stakeholder awareness and solution maintenance activities.</p>
                
                <h2 id="tools">Tools</h2>
                
                <p>A list of general and well-known tools is presented below. There are also a lot of other utilities, as well as framework-based fingerprinting tools.</p>
                
                <h3 id="whatweb">WhatWeb</h3>
                
                <p>Website: <a href="https://github.com/urbanadventurer/WhatWeb">https://github.com/urbanadventurer/WhatWeb</a></p>
                
                <p>Currently one of the best fingerprinting tools on the market. Included in a default <a href="https://www.kali.org/">Kali Linux</a> build. Language: Ruby Matches for fingerprinting are made with:</p>
                
                <ul>
                  <li>Text strings (case sensitive)</li>
                  <li>Regular expressions</li>
                  <li>Google Hack Database queries (limited set of keywords)</li>
                  <li>MD5 hashes</li>
                  <li>URL recognition</li>
                  <li>HTML tag patterns</li>
                  <li>Custom ruby code for passive and aggressive operations</li>
                </ul>
            
                
                <h3 id="wappalyzer">Wappalyzer</h3>
                
                <p>Website: <a href="https://www.wappalyzer.com/">https://www.wappalyzer.com/</a></p>
                
            <p>Wapplyzer is available in multiple usage models, the most popular of which is likely the Firefox/Chrome extensions. They work only on regular expression matching and doesn’t need anything other than the page to be loaded in browser. It works completely at the browser level and gives results in the form of icons. Although sometimes it has false positives, this is very handy to have notion of what technologies were used to construct a target website immediately after browsing a page.</p>

            <h2 id="references">References</h2>
                
                <h3 id="whitepapers">Whitepapers</h3>
                
                <ul>
                  <li><a href="https://web.archive.org/web/20190526182734/https://net-square.com/httprint_paper.html">Saumil Shah: “An Introduction to HTTP fingerprinting”</a></li>
                  <li><a href="https://anantshri.info/articles/web_app_finger_printing.html">Anant Shrivastava : “Web Application Finger Printing”</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="info9Modal" tabindex="-1" role="dialog" aria-labelledby="info9ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="info9ModalLabel">WSTG-INFO-09 - Fingerprint Web Application</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>This content has been merged into: Fingerprint Web Application Framework.</p>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/09-Fingerprint_Web_Application" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="info10Modal" tabindex="-1" role="dialog" aria-labelledby="info10ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="info10ModalLabel">WSTG-INFO-10 - Map Application Architecture</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>The complexity of interconnected and heterogeneous web infrastructure can include hundreds of web applications and makes configuration management and review a fundamental step in testing and deploying every single application. In fact it takes only a single vulnerability to undermine the security of the entire infrastructure, and even small and seemingly unimportant problems may evolve into severe risks for another application in the same infrastructure.</p>
                
                <p>To address these problems, it is of utmost importance to perform an in-depth review of configuration and known security issues. Before performing an in-depth review it is necessary to map the network and application architecture. The different elements that make up the infrastructure need to be determined to understand how they interact with a web application and how they affect security.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Generate a map of the application at hand based on the research conducted.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="map-the-application-architecture">Map the Application Architecture</h3>
                
                <p>The application architecture needs to be mapped through some test to determine what different components are used to build the web application. In small setups, such as a simple PHP application, a single server might be used that serves the PHP application, and perhaps also the authentication mechanism.</p>
                
                <p>On more complex setups, such as an online bank system, multiple servers might be involved. These may include a reverse proxy, a front-end web server, an application server, and a database server or LDAP server. Each of these servers will be used for different purposes and might even be segregated in different networks with firewalls between them. This creates different network zones so that access to the web server will not necessarily grant a remote user access to the authentication mechanism itself, and so that compromises of the different elements of the architecture can be isolated so that they will not compromise the whole architecture.</p>
                
                <p>Getting knowledge of the application architecture can be easy if this information is provided to the testing team by the application developers in document form or through interviews, but can also prove to be very difficult if doing a blind penetration test.</p>
                
                <p>In the latter case, a tester will first start with the assumption that there is a simple setup (a single server). Then they will retrieve information from other tests and derive the different elements, question this assumption, and extend the architecture map. The tester will start by asking simple questions such as: “Is there a firewall protecting the web server?”. This question will be answered based on the results of network scans targeted at the web server and the analysis of whether the network ports of the web server are being filtered in the network edge (no answer or ICMP unreachables are received) or if the server is directly connected to the Internet (i.e. returns RST packets for all non-listening ports). This analysis can be enhanced to determine the type of firewall used based on network packet tests. Is it a stateful firewall or is it an access list filter on a router? How is it configured? Can it be bypassed? Is it a full fledged web application firewall?</p>
                
                <p>Detecting a reverse proxy in front of the web server can be done by analysis of the web server banner, which might directly disclose the existence of a reverse proxy. It can also be determined by obtaining the answers given by the web server to requests and comparing them to the expected answers. For example, some reverse proxies act as Intrusion Prevention Systems (IPS) by blocking known attacks targeted at the web server. If the web server is known to answer with a 404 message to a request that targets an unavailable page and returns a different error message for some common web attacks like those done by vulnerability scanners, it might be an indication of a reverse proxy (or an application-level firewall) which is filtering the requests and returning a different error page than the one expected. Another example: if the web server returns a set of available HTTP methods (including TRACE) but the expected methods return errors then there is probably something in between blocking them.</p>
                
                <p>In some cases, even the protection system gives itself away.</p>
                

                
                <p>Reverse proxies can also be introduced as proxy-caches to accelerate the performance of back-end application servers. Detecting these proxies can be done based on the server header. They can also be detected by timing requests that should be cached by the server and comparing the time taken to server the first request with subsequent requests.</p>
                
                <p>Another element that can be detected is network load balancers. Typically, these systems will balance a given TCP/IP port to multiple servers based on different algorithms (round-robin, web server load, number of requests, etc.). Thus, the detection of this architecture element needs to be done by examining multiple requests and comparing results to determine if the requests are going to the same or different web servers. For example, based on the Date header if the server clocks are not synchronized. In some cases, the network load balance process might inject new information in the headers that will make it stand out distinctly, like the BIGipServer prefixed cookie introduced by F5 BIG-IP load balancers.</p>
                
                <p>Application web servers are usually easy to detect. The request for several resources is handled by the application server itself (not the web server) and the response header will vary significantly (including different or additional values in the answer header). Another way to detect these is to see if the web server tries to set cookies which are indicative of an application web server being used (such as the JSESSIONID provided by various J2EE servers), or to rewrite URLs automatically to do session tracking.</p>
                
                <p>Authentication back ends (such as LDAP directories, relational databases, or RADIUS servers) however, are not as easy to detect from an external point of view in an immediate way, since they will be hidden by the application itself.</p>
                
                <p>The use of a back end database can be determined simply by navigating an application. If there is highly dynamic content generated “on the fly” it is probably being extracted from some sort of database by the application itself. Sometimes the way information is requested might give insight to the existence of a database back end. For example, an online shopping application that uses numeric identifiers (<code class="language-plaintext highlighter-rouge">id</code>) when browsing the different articles in the shop. However, when doing a blind application test, knowledge of the underlying database is usually only available when a vulnerability surfaces in the application, such as poor exception handling or susceptibility to SQL injection.</p>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecturee" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

