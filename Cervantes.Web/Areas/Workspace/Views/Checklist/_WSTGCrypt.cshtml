@model Cervantes.Web.Areas.Workspace.Models.Wstg.WSTGViewModel

<div class="table-responsive-md">
            <table class="table table-bordered table-hover" id="crypt" width="100%">
                <thead class="thead-dark">
                <tr>
                    <th><i class="fas fa-key"></i> Weak Cryptography</th>
                    <th><i class="fas fa-vial"></i> Test Name</th>
                    <th><i class="fas fa-bullseye"></i> Objectives</th>
                    
                    <th><i class="fas fa-project-diagram"></i> Status</th>
                    
                    <th><i class="fas fa-sticky-note"></i> Notes</th>
                    
                    <th>
                        <i class="fas fa-eye"></i>
                    </th>
                    
                    
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>WSTG-CRYP-01</td>
                    <td>Testing for Weak Transport Layer Security</td>
                                    
                    <td><p>- Validate the service configuration.</p>
                        <p>- Review the digital certificate's cryptographic strength and validity.</p>
                        <p>- Ensure that the TLS security is not bypassable and is properly implemented across the application.</p></td>
                                    
                    <td>
                        @Html.DropDownListFor(model => model.Cryp.Cryp01Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Cryp.Cryp01Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#cryp1Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                
                <tr>
                    <td>WSTG-CRYP-02</td>
                    <td>Testing for Padding Oracle</td>
                                                    
                    <td><p>- Identify encrypted messages that rely on padding.</p>
                        <p>- Attempt to break the padding of the encrypted messages and analyze the returned error messages for further analysis.</p></td>
                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Cryp.Cryp02Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Cryp.Cryp02Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#cryp2Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                
                <tr>
                    <td>WSTG-CRYP-03</td>
                    <td>Testing for Sensitive Information Sent via Unencrypted Channels</td>
                                                                    
                    <td><p>- Identify sensitive information transmitted through the various channels.</p>
                        <p>- Assess the privacy and security of the channels used.</p></td>
                                                                    
                    <td>
                       @Html.DropDownListFor(model => model.Cryp.Cryp03Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Cryp.Cryp03Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#cryp3Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                
                <tr>
                    <td>WSTG-CRYP-04</td>
                    <td>Testing for Weak Encryption</td>
                                                                    
                    <td>- Provide a guideline for the identification weak encryption or hashing uses and implementations.</td>
                                                                    
                    <td>
                        @Html.DropDownListFor(model => model.Cryp.Cryp04Status, Html.GetEnumSelectList<Cervantes.CORE.WSTGStatus>(), new {@class = "form-control"})
                    </td>
                    <td> <textarea asp-for="Cryp.Cryp04Note" class="form-control" rows="4"></textarea></td>
                    <td>
                        <button type="button" class="btn btn-tool" data-toggle="modal" data-target="#cryp4Modal">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                </tr>
                
               
                </tbody>
            </table>
        </div>

<!-- Modal -->
<div class="modal fade" id="cryp1Modal" tabindex="-1" role="dialog" aria-labelledby="cryp1ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cryp1ModalLabel">WSTG-CRYP-01 - Testing for Weak Transport Layer Security</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>When information is sent between the client and the server, it must be encrypted and protected in order to prevent an attacker from being able to read or modify it. This is most commonly done using HTTPS, which uses the <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">Transport Layer Security (TLS)</a> protocol, a replacement for the older Secure Socket Layer (SSL) protocol. TLS also provides a way for the server to demonstrate to the client that they have connected to the correct server, by presenting a trusted digital certificate.</p>
                
                <p>Over the years there have been a large number of cryptographic weaknesses identified in the SSL and TLS protocols, as well as in the ciphers that they use. Additionally, many of the implementations of these protocols have also had serious vulnerabilities. As such, it is important to test that sites are not only implementing TLS, but that they are doing so in a secure manner.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Validate the service configuration.</li>
                  <li>Review the digital certificate’s cryptographic strength and validity.</li>
                  <li>Ensure that the TLS security is not bypassable and is properly implemented across the application.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Transport layer security related issues can be broadly split into the following areas:</p>
                
                <h3 id="server-configuration">Server Configuration</h3>
                
                <p>There are a large number of protocol versions, ciphers, and extensions supported by TLS. Many of these are considered to be legacy, and have cryptographic weaknesses, such as those listed below. Note that new weaknesses are likely to be identified over time, so this list may be incomplete.</p>
                
                <ul>
                  <li><a href="https://drownattack.com/">SSLv2 (DROWN)</a></li>
                  <li><a href="https://en.wikipedia.org/wiki/POODLE">SSLv3 (POODLE)</a></li>
                  <li><a href="https://www.acunetix.com/blog/web-security-zone/what-is-beast-attack/">TLSv1.0 (BEAST)</a></li>
                  <li><a href="https://en.wikipedia.org/wiki/FREAK">EXPORT ciphers suites (FREAK)</a></li>
                  <li><a href="https://www.rapid7.com/db/vulnerabilities/ssl-null-ciphers">NULL ciphers</a> (<a href="https://tools.ietf.org/html/rfc4785">they only provide authentication</a>).</li>
                  <li>Anonymous ciphers (these may be supported on SMTP servers, as discussed in <a href="https://tools.ietf.org/html/rfc7672#section-8.2">RFC 7672</a>)</li>
                  <li><a href="https://www.rc4nomore.com/">RC4 ciphers (NOMORE)</a></li>
                  <li>CBC mode ciphers (BEAST, <a href="https://en.wikipedia.org/wiki/Lucky_Thirteen_attack">Lucky 13</a>)</li>
                  <li><a href="https://en.wikipedia.org/wiki/CRIME">TLS compression (CRIME)</a></li>
                  <li><a href="https://weakdh.org/">Weak DHE keys (LOGJAM)</a></li>
                </ul>
                
                <p>The <a href="https://wiki.mozilla.org/Security/Server_Side_TLS">Mozilla Server Side TLS Guide</a> details the protocols and ciphers that are currently recommended.</p>
                
                <h4 id="exploitability">Exploitability</h4>
                
                <p>It should be emphasised that while many of these attacks have been demonstrated in a lab environment, they are not generally considered practical to exploit in the real world, as they require a (usually active) MitM attack, and significant resources. As such, they are unlikely to be exploited by anyone other than nation states.</p>
                
                <h3 id="digital-certificates">Digital Certificates</h3>
                
                <h4 id="cryptographic-weaknesses">Cryptographic Weaknesses</h4>
                
                <p>From a cryptographic perspective, there are two main areas that need to be reviewed on a digital certificate:</p>
                
                <ul>
                  <li>The key strength should be <em>at least</em> 2048 bits.</li>
                  <li>The signature algorithm should be <em>at least</em> SHA-256. Legacy algorithms such as MD5 and SHA-1 should not be used.</li>
                </ul>
                
                <h4 id="validity">Validity</h4>
                
                <p>As well as being cryptographically secure, the certificate must also be considered valid (or trusted). This means that it must:</p>
                
                <ul>
                  <li>Be within the defined validity period.
                    <ul>
                      <li>Any certificates issued after 1st September 2020 must not have a maximum lifespan of more than <a href="https://blog.mozilla.org/security/2020/07/09/reducing-tls-certificate-lifespans-to-398-days/">398 days</a>.</li>
                    </ul>
                  </li>
                  <li>Be signed by a trusted certificate authority (CA).
                    <ul>
                      <li>This should either be a trusted public CA for externally facing applications, or an internal CA for internal applications.</li>
                      <li>Don’t flag internal applications as having untrusted certificates just because <em>your</em> system doesn’t trust the CA.</li>
                    </ul>
                  </li>
                  <li>Have a Subject Alternate Name (SAN) that matches the hostname of the system.
                    <ul>
                      <li>The Common Name (CN) field is ignored by modern browsers, which only look at the SAN.</li>
                      <li>Make sure that you’re accessing the system with the correct name (for example, if you access the host by IP then any certificate will be appear untrusted).</li>
                    </ul>
                  </li>
                </ul>
                
                <p>Some certificates may be issued for wildcard domains (such as <code class="language-plaintext highlighter-rouge">*.example.org</code>), meaning that they can be valid for multiple subdomains. Although convenient, there are a number of security concerns around this that should be considered. These are discussed in the <a href="https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html#carefully-consider-the-use-of-wildcard-certificates">OWASP Transport Layer Security Cheat Sheet</a>.</p>
                
                <p>Certificates can also leak information about internal systems or domain names in the Issuer and SAN fields, which can be useful when trying to build up a picture of the internal network or conduct social engineering activities.</p>
                
                <h3 id="implementation-vulnerabilities">Implementation Vulnerabilities</h3>
                
                <p>Over the years there have been vulnerabilities in the various TLS implementations. There are too many to list here, but some of the key examples are:</p>
                
                <ul>
                  <li><a href="https://www.debian.org/security/2008/dsa-1571">Debian OpenSSL Predictable Random Number Generator</a> (CVE-2008-0166)</li>
                  <li><a href="https://www.openssl.org/news/secadv/20091111.txt">OpenSSL Insecure Renegotiation</a> (CVE-2009-3555)</li>
                  <li><a href="https://heartbleed.com">OpenSSL Heartbleed</a> (CVE-2014-0160)</li>
                  <li><a href="https://support.f5.com/csp/article/K15882">F5 TLS POODLE</a> (CVE-2014-8730)</li>
                  <li><a href="https://docs.microsoft.com/en-us/security-updates/securitybulletins/2014/ms14-066">Microsoft Schannel Denial of Service</a> (MS14-066 / CVE CVE-2014-6321)</li>
                </ul>
                
                <h3 id="application-vulnerabilities">Application Vulnerabilities</h3>
                
                <p>As well as the underlying TLS configuration being securely configured, the application also needs to use it in a secure way. Some of these points are addressed elsewhere in this guide:</p>
                
                <ul>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels">Not sending sensitive data over unencrypted channels (WSTG-CRYP-03)</a></li>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security">Setting the HTTP Strict-Transport-Security header (WSTG-CONF-07)</a></li>
                  <li><a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes">Setting the Secure flag on cookies (WSTG-SESS-02)</a></li>
                </ul>
                
                <h4 id="mixed-active-content">Mixed Active Content</h4>
                
                <p>Mixed active content is when active resources (such as scripts to CSS) are loaded over unencrypted HTTP and included into a secure (HTTPS) page. This is dangerous because it would allow an attacker to modify these files (as they are sent unencrypted), which could allow them to execute arbitrary code (JavaScript or CSS) in the page. Passive content (such as images) loaded over an insecure connection can also leak information or allow an attacker to deface the page, although it is less likely to lead to a full compromise.</p>
                
                <blockquote>
                  <p>Note: modern browsers will block active content being loaded from insecure sources into secure pages.</p>
                </blockquote>
                
                <h4 id="redirecting-from-http-to-https">Redirecting from HTTP to HTTPS</h4>
                
                <p>Many sites will accept connections over unencrypted HTTP, and then immediately redirect the user to the secure (HTTPS) version of the site with a <code class="language-plaintext highlighter-rouge">301 Moved Permanently</code> redirect. The HTTPS version of the site then sets the <code class="language-plaintext highlighter-rouge">Strict-Transport-Security</code> header to instruct the browser to always use HTTPS in future.</p>
                
                <p>However, if an attacker is able to intercept this initial request, they could redirect the user to a malicious site, or use a tool such as <a href="https://github.com/moxie0/sslstrip">sslstrip</a> to intercept subsequent requests.</p>
                
                <p>In order to defend against this type of attack, the site must use be added to the <a href="https://hstspreload.org">preload list</a>.</p>
                
                <h2 id="automated-testing">Automated Testing</h2>
                
                <p>There are a large number of scanning tools that can be used to identify weaknesses in the SSL/TLS configuration of a service, including both dedicated tools and general purpose vulnerability scanners. Some of the more popular ones are:</p>
                
                <ul>
                  <li><a href="https://nmap.org">Nmap</a> (various scripts)</li>
                  <li><a href="https://owasp.org/www-project-o-saft/">OWASP O-Saft</a></li>
                  <li><a href="https://github.com/rbsec/sslscan">sslscan</a></li>
                  <li><a href="https://github.com/nabla-c0d3/sslyze">sslyze</a></li>
                  <li><a href="https://www.ssllabs.com/ssltest/">SSL Labs</a></li>
                  <li><a href="https://github.com/drwetter/testssl.sh">testssl.sh</a></li>
                </ul>
                
                <h3 id="manual-testing">Manual Testing</h3>
                
                <p>It is also possible to carry out most checks manually, using command-line looks such as <code class="language-plaintext highlighter-rouge">openssl s_client</code> or <code class="language-plaintext highlighter-rouge">gnutls-cli</code> to connect with specific protocols, ciphers or options.</p>
                
                <p>When testing like this, be aware that the version of OpenSSL or GnuTLS shipped with most modern systems may will not support some outdated and insecure protocols such as SSLv2 or EXPORT ciphers. Make sure that your version supports the outdated versions before using it for testing, or you’ll end up with false negatives.</p>
                
                <p>It can also be possible to performed limited testing using a web browser, as modern browsers will provide details of the protocols and ciphers that are being used in their developer tools. They also provide an easy way to test whether a certificate is considered trusted, by browsing to the service and seeing if you are presented with a certificate warning.</p>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html">OWASP Transport Layer Protection Cheat Sheet</a></li>
                  <li><a href="https://wiki.mozilla.org/Security/Server_Side_TLS">Mozilla Server Side TLS Guide</a></li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="cryp2Modal" tabindex="-1" role="dialog" aria-labelledby="cryp2ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cryp2ModalLabel">WSTG-CRYP-02 - Testing for Padding Oracle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>A padding oracle is a function of an application which decrypts encrypted data provided by the client, e.g. internal session state stored on the client, and leaks the state of the validity of the padding after decryption. The existence of a padding oracle allows an attacker to decrypt encrypted data and encrypt arbitrary data without knowledge of the key used for these cryptographic operations. This can lead to leakage of sensitive data or to privilege escalation vulnerabilities, if integrity of the encrypted data is assumed by the application.</p>
                
                <p>Block ciphers encrypt data only in blocks of certain sizes. Block sizes used by common ciphers are 8 and 16 bytes. Data where the size doesn’t match a multiple of the block size of the used cipher has to be padded in a specific manner so the decryptor is able to strip the padding. A commonly used padding scheme is PKCS#7. It fills the remaining bytes with the value of the padding length.</p>
                
                <h3 id="example-1">Example 1</h3>
                
                <p>If the padding has the length of 5 bytes, the byte value <code class="language-plaintext highlighter-rouge">0x05</code> is repeated five times after the plain text.</p>
                
                <p>An error condition is present if the padding doesn’t match the syntax of the used padding scheme. A padding oracle is present if an application leaks this specific padding error condition for encrypted data provided by the client. This can happen by exposing exceptions (e.g. <code class="language-plaintext highlighter-rouge">BadPaddingException</code> in Java) directly, by subtle differences in the responses sent to the client or by another side-channel like timing behavior.</p>
                
                <p>Certain modes of operation of cryptography allow bit-flipping attacks, where flipping of a bit in the cipher text causes that the bit is also flipped in the plain text. Flipping a bit in the n-th block of CBC encrypted data causes that the same bit in the (n+1)-th block is flipped in the decrypted data. The n-th block of the decrypted cipher text is garbaged by this manipulation.</p>
                
                <p>The padding oracle attack enables an attacker to decrypt encrypted data without knowledge of the encryption key and used cipher by sending skillful manipulated cipher texts to the padding oracle and observing of the results returned by it. This causes loss of confidentiality of the encrypted data. E.g. in the case of session data stored on the client-side the attacker can gain information about the internal state and structure of the application.</p>
                
                <p>A padding oracle attack also enables an attacker to encrypt arbitrary plain texts without knowledge of the used key and cipher. If the application assumes that integrity and authenticity of the decrypted data is given, an attacker could be able to manipulate internal session state and possibly gain higher privileges.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify encrypted messages that rely on padding.</li>
                  <li>Attempt to break the padding of the encrypted messages and analyze the returned error messages for further analysis.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="black-box-testing">Black-Box Testing</h3>
                
                <p>First the possible input points for padding oracles must be identified. Generally the following conditions must be met:</p>
                
                <ol>
                  <li>The data is encrypted. Good candidates are values which appear to be random.</li>
                  <li>A block cipher is used. The length of the decoded (Base64 is used often) cipher text is a multiple of common cipher block sizes like 8 or 16 bytes. Different cipher texts (e.g. gathered by different sessions or manipulation of session state) share a common divisor in the length.</li>
                </ol>
                
                <h4 id="example-2">Example 2</h4>
                
                <p><code class="language-plaintext highlighter-rouge">Dg6W8OiWMIdVokIDH15T/A==</code> results after Base64 decoding in <code class="language-plaintext highlighter-rouge">0e 0e 96 f0 e8 96 30 87 55 a2 42 03 1f 5e 53 fc</code>. This seems to be random and 16 byte long.</p>
                
                <p>If such an input value candidate is identified, the behavior of the application to bit-wise tampering of the encrypted value should be verified. Normally this Base64 encoded value will include the initialization vector (IV) prepended to the cipher text. Given a plaintext <em><code class="language-plaintext highlighter-rouge">p</code></em> and a cipher with a block size <em><code class="language-plaintext highlighter-rouge">n</code></em>, the number of blocks will be <em><code class="language-plaintext highlighter-rouge">b = ceil( length(b) / n)</code></em>. The length of the encrypted string will be <em><code class="language-plaintext highlighter-rouge">y=(b+1)*n</code></em> due to the initialization vector. To verify the presence of the oracle, decode the string, flip the last bit of the second-to-last block <em><code class="language-plaintext highlighter-rouge">b-1</code></em> (the least significant bit of the byte at <em><code class="language-plaintext highlighter-rouge">y-n-1</code></em>), re-encode and send. Next, decode the original string, flip the last bit of the block <em><code class="language-plaintext highlighter-rouge">b-2</code></em> (the least significant bit of the byte at <em><code class="language-plaintext highlighter-rouge">y-2*n-1</code></em>), re-encode and send.</p>
                
                <p>If it is known that the encrypted string is a single block (the IV is stored on the server or the application is using a bad practice hardcoded IV), several bit flips must be performed in turn. An alternative approach could be to prepend a random block, and flip bits in order to make the last byte of the added block take all possible values (0 to 255).</p>
                
                <p>The tests and the base value should at least cause three different states while and after decryption:</p>
                
                <ul>
                  <li>Cipher text gets decrypted, resulting data is correct.</li>
                  <li>Cipher text gets decrypted, resulting data is garbled and causes some exception or error handling in the application logic.</li>
                  <li>Cipher text decryption fails due to padding errors.</li>
                </ul>
                
                <p>Compare the responses carefully. Search especially for exceptions and messages which state that something is wrong with the padding. If such messages appear, the application contains a padding oracle. If the three different states described above are observable implicitly (different error messages, timing side-channels), there is a high probability that there is a padding oracle present at this point. Try to perform the padding oracle attack to ensure this.</p>
                
                <h5 id="example-3">Example 3</h5>
                
                <ul>
                  <li>ASP.NET throws <code class="language-plaintext highlighter-rouge">System.Security.Cryptography.CryptographicException: Padding is invalid and cannot be removed.</code> if padding of a decrypted cipher text is broken.</li>
                  <li>In Java a <code class="language-plaintext highlighter-rouge">javax.crypto.BadPaddingException</code> is thrown in this case.</li>
                  <li>Decryption errors or similar can be possible padding oracles.</li>
                </ul>
                
                <blockquote>
                  <p>A secure implementation will check for integrity and cause only two responses: <code class="language-plaintext highlighter-rouge">ok</code> and <code class="language-plaintext highlighter-rouge">failed</code>. There are no side channels which can be used to determine internal error states.</p>
                </blockquote>
                
                <h3 id="gray-box-testing">Gray-Box Testing</h3>
                
                <p>Verify that all places where encrypted data from the client, that should only be known by the server, is decrypted. The following conditions should be met by such code:</p>
                
                <ol>
                  <li>The integrity of the cipher text should be verified by a secure mechanism, like HMAC or authenticated cipher operation modes like GCM or CCM.</li>
                  <li>All error states while decryption and further processing are handled uniformly.</li>
                </ol>
                
                <h3 id="example-4">Example 4</h3>
                
                <p><a href="https://erlend.oftedal.no/blog/poet/">Visualization of the decryption process</a></p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://code.blindspotsecurity.com/trac/bletchley">Bletchley</a></li>
                  <li><a href="https://github.com/GDSSecurity/PadBuster">PadBuster</a></li>
                  <li><a href="http://netifera.com/research/">Padding Oracle Exploitation Tool (POET)</a></li>
                  <li><a href="https://github.com/iagox86/Poracle">Poracle</a></li>
                  <li><a href="https://github.com/mwielgoszewski/python-paddingoracle">python-paddingoracle</a></li>
                </ul>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://en.wikipedia.org/wiki/Padding_oracle_attack">Wikepedia - Padding Oracle Attack</a></li>
                  <li><a href="https://www.usenix.org/event/woot10/tech/full_papers/Rizzo.pdf">Juliano Rizzo, Thai Duong, “Practical Padding Oracle Attacks”</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/02-Testing_for_Padding_Oracle" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="cryp3Modal" tabindex="-1" role="dialog" aria-labelledby="cryp3ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cryp3ModalLabel">WSTG-CRYP-03 - Testing for Sensitive Information Sent via Unencrypted Channels</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Sensitive data must be protected when it is transmitted through the network. If data is transmitted over HTTPS or encrypted in another way the protection mechanism must not have limitations or vulnerabilities, as explained in the broader article <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security">Testing for Weak Transport Layer Security</a> and in other OWASP documentation:</p>
                
                <ul>
                  <li><a href="https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure">OWASP Top 10 2017 A3-Sensitive Data Exposure</a>.</li>
                  <li><a href="https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md">OWASP ASVS - Verification V9</a>.</li>
                  <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html">Transport Layer Protection Cheat Sheet</a>.</li>
                </ul>
                
                <p>As a rule of thumb if data must be protected when it is stored, this data must also be protected during transmission. Some examples for sensitive data are:</p>
                
                <ul>
                  <li>Information used in authentication (e.g. Credentials, PINs, Session identifiers, Tokens, Cookies…)</li>
                  <li>Information protected by laws, regulations or specific organizational policy (e.g. Credit Cards, Customers data)</li>
                </ul>
                
                <p>If the application transmits sensitive information via unencrypted channels - e.g. HTTP - it is considered a security risk. Some examples are Basic authentication which sends authentication credentials in plain-text over HTTP, form based authentication credentials sent via HTTP, or plain-text transmission of any other information considered sensitive due to regulations, laws, organizational policy or application business logic.</p>
                
                <p>Examples for Personal Identifying Information (PII) are:</p>
                
                <ul>
                  <li>Social security numbers</li>
                  <li>Bank account numbers</li>
                  <li>Passport information</li>
                  <li>Healthcare related information</li>
                  <li>Medical insurance information</li>
                  <li>Student information</li>
                  <li>Credit and debit card numbers</li>
                  <li>Drivers license and State ID information</li>
                </ul>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Identify sensitive information transmitted through the various channels.</li>
                  <li>Assess the privacy and security of the channels used.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <p>Various types of information that must be protected, could be transmitted by the application in clear text. It is possible to check if this information is transmitted over HTTP instead of HTTPS, or whether weak ciphers are used. See more information about insecure transmission of credentials <a href="https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure">OWASP Top 10 2017 A3-Sensitive Data Exposure</a> or <a href="https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html">Transport Layer Protection Cheat Sheet</a>.</p>
                
                <h3 id="example-1-basic-authentication-over-http">Example 1: Basic Authentication over HTTP</h3>
                
                <p>A typical example is the usage of Basic Authentication over HTTP. When using Basic Authentication, user credentials are encoded rather than encrypted, and are sent as HTTP headers. In the example below the tester uses <a href="https://curl.haxx.se/">curl</a> to test for this issue. Note how the application uses Basic authentication, and HTTP rather than HTTPS</p>
                
                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-kis</span> http://example.com/restricted/
                HTTP/1.1 401 Authorization Required
                Date: Fri, 01 Aug 2013 00:00:00 GMT
                WWW-Authenticate: Basic <span class="nv">realm</span><span class="o">=</span><span class="s2">"Restricted Area"</span>
                Accept-Ranges: bytes Vary:
                Accept-Encoding Content-Length: 162
                Content-Type: text/html
                
                &lt;html&gt;&lt;<span class="nb">head</span><span class="o">&gt;</span>&lt;title&gt;401 Authorization Required&lt;/title&gt;&lt;/head&gt;
                &lt;body <span class="nv">bgcolor</span><span class="o">=</span>white&gt; &lt;h1&gt;401 Authorization Required&lt;/h1&gt;  Invalid login credentials!  &lt;/body&gt;&lt;/html&gt;
                </code></pre></div></div>
                
                <h3 id="example-2-form-based-authentication-performed-over-http">Example 2: Form-Based Authentication Performed over HTTP</h3>
                
                <p>Another typical example is authentication forms which transmit user authentication credentials over HTTP. In the example below one can see HTTP being used in the <code class="language-plaintext highlighter-rouge">action</code> attribute of the form. It is also possible to see this issue by examining the HTTP traffic with an interception proxy.</p>
                
                <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"http://example.com/login"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"username"</span><span class="nt">&gt;</span>User:<span class="nt">&lt;/label&gt;</span> <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"username"</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">value=</span><span class="s">""</span><span class="nt">/&gt;&lt;br</span> <span class="nt">/&gt;</span>
                    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"password"</span><span class="nt">&gt;</span>Password:<span class="nt">&lt;/label&gt;</span> <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">id=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">""</span><span class="nt">/&gt;</span>
                    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"Login"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;/form&gt;</span>
                </code></pre></div></div>
                
                <h3 id="example-3-cookie-containing-session-id-sent-over-http">Example 3: Cookie Containing Session ID Sent over HTTP</h3>
                
                <p>The Session ID Cookie must be transmitted over protected channels. If the cookie does not have the <a href="/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes">secure flag</a> set, it is permitted for the application to transmit it unencrypted. Note below the setting of the cookie is done without the Secure flag, and the entire log in process is performed in HTTP and not HTTPS.</p>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">https://secure.example.com/login
                
                </span><span class="nf">POST</span> <span class="nn">/login</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
                <span class="na">Host</span><span class="p">:</span> <span class="s">secure.example.com</span>
                <span class="s">[...]</span>
                <span class="na">Referer</span><span class="p">:</span> <span class="s">https://secure.example.com/</span>
                <span class="na">Content-Type</span><span class="p">:</span> <span class="s">application/x-www-form-urlencoded</span>
                <span class="na">Content-Length</span><span class="p">:</span> <span class="s">188</span>
                
                HTTP/1.1 302 Found
                Date: Tue, 03 Dec 2013 21:18:55 GMT
                Server: Apache
                Set-Cookie: JSESSIONID=BD99F321233AF69593EDF52B123B5BDA; expires=Fri, 01-Jan-2014 00:00:00 GMT; path=/; domain=example.com; httponly
                Location: private/
                Content-Length: 0
                Content-Type: text/html
                </code></pre></div></div>
                
                <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">http://example.com/private
                
                </span><span class="nf">GET</span> <span class="nn">/private</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
                <span class="na">Host</span><span class="p">:</span> <span class="s">example.com</span>
                <span class="s">[...]</span>
                <span class="na">Referer</span><span class="p">:</span> <span class="s">https://secure.example.com/login</span>
                <span class="na">Cookie</span><span class="p">:</span> <span class="s">JSESSIONID=BD99F321233AF69593EDF52B123B5BDA;</span>
                
                HTTP/1.1 200 OK
                Content-Type: text/html;charset=UTF-8
                Content-Length: 730
                Date: Tue, 25 Dec 2013 00:00:00 GMT
                </code></pre></div></div>
                
                <h3 id="example-4-testing-password-sensitive-information-in-source-code-or-logs">Example 4: Testing Password Sensitive Information in Source Code or Logs</h3>
                
                <p>Use one of the following techniques to search for senstive information.</p>
                
                <p>Checking if password or encyrption key is hardcoded in the source code or configuration files.</p>
                
                <p><code class="language-plaintext highlighter-rouge">grep -r –E "Pass | password | pwd |user | guest| admin | encry | key | decrypt | sharekey " ./PathToSearch/</code></p>
                
                <p>Checking if logs or source code may contain phone number, email address, ID or any other PII. Change the regular expression based on the format of the PII.</p>
                
                <p><code class="language-plaintext highlighter-rouge">grep -r " {2\}[0-9]\{6\} "  ./PathToSearch/</code></p>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li><a href="https://curl.haxx.se/">curl</a></li>
                  <li><a href="http://man7.org/linux/man-pages/man1/egrep.1.html">grep</a></li>
                  <li><a href="https://download.cnet.com/Identity-Finder-Free-Edition/3000-2144_4-10906766.html">Identity Finder</a></li>
                  <li><a href="https://www.wireshark.org/">Wireshark</a></li>
                  <li><a href="https://www.tcpdump.org/">TCPDUMP</a></li>
                </ul>

            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="cryp4Modal" tabindex="-1" role="dialog" aria-labelledby="cryp4ModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cryp4ModalLabel">WSTG-CRYP-04 - Testing for Weak Encryption</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h2 id="summary">Summary</h2>
                
                <p>Incorrect uses of encryption algorithms may result in sensitive data exposure, key leakage, broken authentication, insecure session, and spoofing attacks. There are some encryption or hash algorithms known to be weak and are not suggested for use such as MD5 and RC4.</p>
                
                <p>In addition to the right choices of secure encryption or hash algorithms, the right uses of parameters also matter for the security level. For example, ECB (Electronic Code Book) mode is not suggested for use in asymmetric encryption.</p>
                
                <h2 id="test-objectives">Test Objectives</h2>
                
                <ul>
                  <li>Provide a guideline for the identification weak encryption or hashing uses and implementations.</li>
                </ul>
                
                <h2 id="how-to-test">How to Test</h2>
                
                <h3 id="basic-security-checklist">Basic Security Checklist</h3>
                
                <ul>
                  <li>When using AES128 or AES256, the IV (Initialization Vector) must be random and unpredictable. Refer to <a href="https://csrc.nist.gov/publications/detail/fips/140/2/final">FIPS 140-2, Security Requirements for Cryptographic Modules</a>, section 4.9.1. random number generator tests. For example, in Java, <code class="language-plaintext highlighter-rouge">java.util.Random</code> is considered a weak random number generator. <code class="language-plaintext highlighter-rouge">java.security.SecureRandom</code> should be used instead of <code class="language-plaintext highlighter-rouge">java.util.Random</code>.</li>
                  <li>For asymmetric encryption, use Elliptic Curve Cryptography (ECC) with a secure curve like <code class="language-plaintext highlighter-rouge">Curve25519</code> preferred.
                    <ul>
                      <li>If ECC can’t be used then use RSA encryption with a minimum 2048bit key.</li>
                    </ul>
                  </li>
                  <li>When uses of RSA in signature, PSS padding is recommended.</li>
                  <li>Weak hash/encryption algorithms should not be used such MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES)</li>
                  <li>Minimum Key length requirements:</li>
                </ul>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Key&nbsp;exchange:&nbsp;Diffie–Hellman&nbsp;key&nbsp;exchange&nbsp;with&nbsp;minimum&nbsp;2048&nbsp;bits
                Message&nbsp;Integrity:&nbsp;HMAC-SHA2
                Message&nbsp;Hash:&nbsp;SHA2&nbsp;256&nbsp;bits
                Asymmetric&nbsp;encryption:&nbsp;RSA&nbsp;2048&nbsp;bits
                Symmetric-key&nbsp;algorithm:&nbsp;AES&nbsp;128&nbsp;bits
                Password&nbsp;Hashing:&nbsp;PBKDF2,&nbsp;Scrypt,&nbsp;Bcrypt
                ECDH, ECDSA:&nbsp;256&nbsp;bits
                </code></pre></div></div>
                
                <ul>
                  <li>Uses of SSH, CBC mode should not be used.</li>
                  <li>When symmetric encryption algorithm is used, ECB (Electronic Code Book) mode should not be used.</li>
                  <li>When PBKDF2 is used to hash password, the parameter of iteration is recommended to be over 10000. <a href="https://pages.nist.gov/800-63-3/sp800-63b.html#sec5">NIST</a> also suggests at least 10,000 iterations of the hash function. In addition, MD5 hash function is forbidden to be used with PBKDF2 such as PBKDF2WithHmacMD5.</li>
                </ul>
                
                <h3 id="source-code-review">Source Code Review</h3>
                
                <ul>
                  <li>
                    <p>Search for the following keywords to identify use of weak algorithms: <code class="language-plaintext highlighter-rouge">MD4,&nbsp;MD5,&nbsp;RC4,&nbsp;RC2,&nbsp;DES,&nbsp;Blowfish,&nbsp;SHA-1,&nbsp;ECB</code></p>
                  </li>
                  <li>
                    <p>For Java implementations, the following API is related to encryption. Review the parameters of the encryption implementation. For example,</p>
                  </li>
                </ul>
                
                <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SecretKeyFactory</span><span class="o">(</span><span class="nc">SecretKeyFactorySpi</span><span class="err">&nbsp;</span><span class="n">keyFacSpi</span><span class="o">,</span><span class="err">&nbsp;</span><span class="nc">Provider</span><span class="err">&nbsp;</span><span class="n">provider</span><span class="o">,</span><span class="err">&nbsp;</span><span class="nc">String</span><span class="err">&nbsp;</span><span class="n">algorithm</span><span class="o">)</span>
                <span class="nc">SecretKeySpec</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span><span class="err">&nbsp;</span><span class="n">key</span><span class="o">,</span><span class="err">&nbsp;</span><span class="kt">int</span><span class="err">&nbsp;</span><span class="n">offset</span><span class="o">,</span><span class="err">&nbsp;</span><span class="kt">int</span><span class="err">&nbsp;</span><span class="n">len</span><span class="o">,</span><span class="err">&nbsp;</span><span class="nc">String</span><span class="err">&nbsp;</span><span class="n">algorithm</span><span class="o">)</span>
                <span class="nc">Cipher</span><span class="err">&nbsp;</span><span class="n">c</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"DES/CBC/PKCS5Padding"</span><span class="o">);</span>
                </code></pre></div></div>
                
                <ul>
                  <li>For RSA encryption, the following padding modes are suggested.</li>
                </ul>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RSA/ECB/OAEPWithSHA-1AndMGF1Padding&nbsp;(2048)
                RSA/ECB/OAEPWithSHA-256AndMGF1Padding&nbsp;(2048)
                </code></pre></div></div>
                
                <ul>
                  <li>Search for <code class="language-plaintext highlighter-rouge">ECB</code>, it’s not allowed to be used in padding.</li>
                  <li>Review if different IV (initial Vector) is used.</li>
                </ul>
                
                <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//&nbsp;Use&nbsp;a&nbsp;different&nbsp;IV&nbsp;value&nbsp;for&nbsp;every&nbsp;encryption</span>
                <span class="kt">byte</span><span class="o">[]</span><span class="err">&nbsp;</span><span class="n">newIv</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="o">...;</span>
                <span class="n">s</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="k">new</span><span class="err">&nbsp;</span><span class="nc">GCMParameterSpec</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">getTLen</span><span class="o">(),</span><span class="err">&nbsp;</span><span class="n">newIv</span><span class="o">);</span>
                <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(...,</span><span class="err">&nbsp;</span><span class="n">s</span><span class="o">);</span>
                <span class="o">...</span>
                </code></pre></div></div>
                
                <ul>
                  <li>Search for <code class="language-plaintext highlighter-rouge">IvParameterSpec</code>, check if the IV value is generated differently and randomly.</li>
                </ul>
                
                <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&nbsp;</span><span class="nc">IvParameterSpec</span><span class="err">&nbsp;</span><span class="n">iv</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="k">new</span><span class="err">&nbsp;</span><span class="nc">IvParameterSpec</span><span class="o">(</span><span class="n">randBytes</span><span class="o">);</span>
                <span class="err">&nbsp;</span><span class="nc">SecretKeySpec</span><span class="err">&nbsp;</span><span class="n">skey</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="k">new</span><span class="err">&nbsp;</span><span class="nc">SecretKeySpec</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span><span class="err">&nbsp;</span><span class="s">"AES"</span><span class="o">);</span>
                <span class="err">&nbsp;</span><span class="nc">Cipher</span><span class="err">&nbsp;</span><span class="n">cipher</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"AES/CBC/PKCS5Padding"</span><span class="o">);</span>
                <span class="err">&nbsp;</span><span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span><span class="err">&nbsp;</span><span class="n">skey</span><span class="o">,</span><span class="err">&nbsp;</span><span class="n">iv</span><span class="o">);</span>
                </code></pre></div></div>
                
                <ul>
                  <li>In Java, search for MessageDigest to check if weak hash algorithm (MD5 or CRC) is used. For example:</li>
                </ul>
                
                <p><code class="language-plaintext highlighter-rouge">MessageDigest&nbsp;md5&nbsp;=&nbsp;MessageDigest.getInstance("MD5");</code></p>
                
                <ul>
                  <li>For signature, SHA1 and MD5 should not be used. For example:</li>
                </ul>
                
                <p><code class="language-plaintext highlighter-rouge">Signature&nbsp;sig&nbsp;=&nbsp;Signature.getInstance("SHA1withRSA");</code></p>
                
                <ul>
                  <li>Search for <code class="language-plaintext highlighter-rouge">PBKDF2</code>. To generate the hash value of password, <code class="language-plaintext highlighter-rouge">PBKDF2</code> is suggested to be used. Review the parameters to generate the <code class="language-plaintext highlighter-rouge">PBKDF2</code> has value.</li>
                </ul>
                
                <p>The iterations should be over <strong>10000</strong>, and the <strong>salt</strong> value should be generated as <strong>random value</strong>.</p>
                
                <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span><span class="err">&nbsp;</span><span class="kd">static</span><span class="err">&nbsp;</span><span class="kt">byte</span><span class="o">[]</span><span class="err">&nbsp;</span><span class="n">pbkdf2</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span><span class="err">&nbsp;</span><span class="n">password</span><span class="o">,</span><span class="err">&nbsp;</span><span class="kt">byte</span><span class="o">[]</span><span class="err">&nbsp;</span><span class="n">salt</span><span class="o">,</span><span class="err">&nbsp;</span><span class="kt">int</span><span class="err">&nbsp;</span><span class="n">iterations</span><span class="o">,</span><span class="err">&nbsp;</span><span class="kt">int</span><span class="err">&nbsp;</span><span class="n">bytes</span><span class="o">)</span>
                <span class="err">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="kd">throws</span><span class="err">&nbsp;</span><span class="nc">NoSuchAlgorithmException</span><span class="o">,</span><span class="err">&nbsp;</span><span class="nc">InvalidKeySpecException</span>
                <span class="err">&nbsp;&nbsp;</span><span class="o">{</span>
                <span class="err">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nc">PBEKeySpec</span><span class="err">&nbsp;</span><span class="n">spec</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="k">new</span><span class="err">&nbsp;</span><span class="nc">PBEKeySpec</span><span class="o">(</span><span class="n">password</span><span class="o">,</span><span class="err">&nbsp;</span><span class="n">salt</span><span class="o">,</span><span class="err">&nbsp;</span><span class="n">iterations</span><span class="o">,</span><span class="err">&nbsp;</span><span class="n">bytes</span><span class="err">&nbsp;</span><span class="o">*</span><span class="err">&nbsp;</span><span class="mi">8</span><span class="o">);</span>
                <span class="err">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="nc">SecretKeyFactory</span><span class="err">&nbsp;</span><span class="n">skf</span><span class="err">&nbsp;</span><span class="o">=</span><span class="err">&nbsp;</span><span class="nc">SecretKeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="no">PBKDF2_ALGORITHM</span><span class="o">);</span>
                <span class="err">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="k">return</span><span class="err">&nbsp;</span><span class="n">skf</span><span class="o">.</span><span class="na">generateSecret</span><span class="o">(</span><span class="n">spec</span><span class="o">).</span><span class="na">getEncoded</span><span class="o">();</span>
                <span class="err">&nbsp;&nbsp;&nbsp;</span><span class="o">}</span>
                </code></pre></div></div>
                
                <ul>
                  <li>Hard-coded sensitive information:</li>
                </ul>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User&nbsp;related&nbsp;keywords:&nbsp;name,&nbsp;root,&nbsp;su,&nbsp;sudo, admin, superuser,&nbsp;login,&nbsp;username,&nbsp;uid
                Key&nbsp;related&nbsp;keywords:&nbsp;public&nbsp;key,&nbsp;AK,&nbsp;SK,&nbsp;secret&nbsp;key,&nbsp;private&nbsp;key,&nbsp;passwd,&nbsp;password,&nbsp;pwd,&nbsp;share&nbsp;key,&nbsp;shared key, cryto,&nbsp;base64
                Other&nbsp;common&nbsp;sensitive&nbsp;keywords:&nbsp;sysadmin,&nbsp;root,&nbsp;privilege,&nbsp;pass,&nbsp;key,&nbsp;code,&nbsp;master,&nbsp;admin,&nbsp;uname,&nbsp;session,&nbsp;token,&nbsp;Oauth,&nbsp;privatekey, shared secret
                </code></pre></div></div>
                
                <h2 id="tools">Tools</h2>
                
                <ul>
                  <li>Vulnerability scanners such as Nessus, NMAP (scripts), or OpenVAS can scan for use or acceptance of weak encryption against protocol such as SNMP, TLS, SSH, SMTP, etc.</li>
                  <li>Use static code analysis tool to do source code review such as klocwork, Fortify, Coverity, CheckMark for the following cases.</li>
                </ul>
                
                <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CWE-261:&nbsp;Weak&nbsp;Cryptography&nbsp;for&nbsp;Passwords
                CWE-323:&nbsp;Reusing&nbsp;a&nbsp;Nonce,&nbsp;Key&nbsp;Pair&nbsp;in&nbsp;Encryption
                CWE-326:&nbsp;Inadequate&nbsp;Encryption&nbsp;Strength
                CWE-327:&nbsp;Use&nbsp;of&nbsp;a&nbsp;Broken&nbsp;or&nbsp;Risky&nbsp;Cryptographic&nbsp;Algorithm
                CWE-328:&nbsp;Reversible&nbsp;One-Way&nbsp;Hash
                CWE-329:&nbsp;Not&nbsp;Using&nbsp;a&nbsp;Random&nbsp;IV&nbsp;with&nbsp;CBC&nbsp;Mode
                CWE-330:&nbsp;Use&nbsp;of&nbsp;Insufficiently&nbsp;Random&nbsp;Values
                CWE-347:&nbsp;Improper&nbsp;Verification&nbsp;of&nbsp;Cryptographic&nbsp;Signature
                CWE-354:&nbsp;Improper&nbsp;Validation&nbsp;of&nbsp;Integrity&nbsp;Check&nbsp;Value
                CWE-547:&nbsp;Use&nbsp;of&nbsp;Hard-coded,&nbsp;Security-relevant&nbsp;Constants
                CWE-780&nbsp;Use&nbsp;of&nbsp;RSA&nbsp;Algorithm&nbsp;without&nbsp;OAEP
                </code></pre></div></div>
                
                <h2 id="references">References</h2>
                
                <ul>
                  <li><a href="https://csrc.nist.gov/publications/fips">NIST FIPS Standards</a></li>
                  <li><a href="https://en.wikipedia.org/wiki/Initialization_vector">Wikipedia: Initialization Vector</a></li>
                  <li><a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">Secure Coding - Generating Strong Random Numbers</a></li>
                  <li><a href="https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding">Optimal Asymmetric Encryption Padding</a></li>
                  <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html">Cryptographic Storage Cheat Sheet</a></li>
                  <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html">Password Storage Cheat Sheet</a></li>
                  <li><a href="https://www.securecoding.cert.org/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms">Secure Coding - Do not use insecure or weak cryptographic algorithms</a></li>
                  <li><a href="https://owasp.org/www-community/vulnerabilities/Insecure_Randomness">Insecure Randomness</a></li>
                  <li><a href="https://owasp.org/www-community/vulnerabilities/Insufficient_Entropy">Insufficient Entropy</a></li>
                  <li><a href="https://owasp.org/www-community/vulnerabilities/Insufficient_Session-ID_Length">Insufficient Session-ID Length</a></li>
                  <li><a href="https://owasp.org/www-community/vulnerabilities/Using_a_broken_or_risky_cryptographic_algorithm">Using a broken or risky cryptographic algorithm</a></li>
                  <li><a href="https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html">Javax.crypto.cipher API</a></li>
                  <li>ISO 18033-1:2015 – Encryption Algorithms</li>
                  <li>ISO 18033-2:2015 – Asymmetric Ciphers</li>
                  <li>ISO 18033-3:2015 – Block Ciphers</li>
                </ul>
            </div>
            <div class="modal-footer">
                <a href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption" class="btn btn-success" target="_blank">View on owasp.org</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>